
// this file is automatically generated by 'aquabsd.alps/aquabsd.alps.kbd/map/gen.py' from the X11 keysyms spec
// if you need to update this (you probably won't ever), delete 'keysymdef.h' and run 'gen.py'

static inline const char* __map_x11_to_aqua(int key) {
	switch (key) {
	case 0xffffff: return "void"; // None

	// XK_MISCELLANY

	case 0xff08: return "backspace"; // XK_MISCELLANY
	case 0xff09: return "tab"; // XK_MISCELLANY
	case 0xff0a: return "linefeed"; // XK_MISCELLANY
	case 0xff0b: return "clear"; // XK_MISCELLANY
	case 0xff0d: return "return"; // XK_MISCELLANY
	case 0xff13: return "pause"; // XK_MISCELLANY
	case 0xff14: return "scroll.lock"; // XK_MISCELLANY
	case 0xff15: return "sys.req"; // XK_MISCELLANY
	case 0xff1b: return "escape"; // XK_MISCELLANY
	case 0xffff: return "delete"; // XK_MISCELLANY
	case 0xff20: return "multi.key"; // XK_MISCELLANY
	case 0xff37: return "codeinput"; // XK_MISCELLANY
	case 0xff3c: return "singlecandidate"; // XK_MISCELLANY
	case 0xff3d: return "multiplecandidate"; // XK_MISCELLANY
	case 0xff3e: return "previouscandidate"; // XK_MISCELLANY
	case 0xff21: return "kanji"; // XK_MISCELLANY
	case 0xff22: return "muhenkan"; // XK_MISCELLANY
	case 0xff23: return "henkan.mode"; // XK_MISCELLANY
	case 0xff24: return "romaji"; // XK_MISCELLANY
	case 0xff25: return "hiragana"; // XK_MISCELLANY
	case 0xff26: return "katakana"; // XK_MISCELLANY
	case 0xff27: return "hiragana.katakana"; // XK_MISCELLANY
	case 0xff28: return "zenkaku"; // XK_MISCELLANY
	case 0xff29: return "hankaku"; // XK_MISCELLANY
	case 0xff2a: return "zenkaku.hankaku"; // XK_MISCELLANY
	case 0xff2b: return "touroku"; // XK_MISCELLANY
	case 0xff2c: return "massyo"; // XK_MISCELLANY
	case 0xff2d: return "kana.lock"; // XK_MISCELLANY
	case 0xff2e: return "kana.shift"; // XK_MISCELLANY
	case 0xff2f: return "eisu.shift"; // XK_MISCELLANY
	case 0xff30: return "eisu.toggle"; // XK_MISCELLANY
	case 0xff50: return "home"; // XK_MISCELLANY
	case 0xff51: return "left"; // XK_MISCELLANY
	case 0xff52: return "up"; // XK_MISCELLANY
	case 0xff53: return "right"; // XK_MISCELLANY
	case 0xff54: return "down"; // XK_MISCELLANY
	case 0xff55: return "prior"; // XK_MISCELLANY
	case 0xff56: return "next"; // XK_MISCELLANY
	case 0xff57: return "end"; // XK_MISCELLANY
	case 0xff58: return "begin"; // XK_MISCELLANY
	case 0xff60: return "select"; // XK_MISCELLANY
	case 0xff61: return "print"; // XK_MISCELLANY
	case 0xff62: return "execute"; // XK_MISCELLANY
	case 0xff63: return "insert"; // XK_MISCELLANY
	case 0xff65: return "undo"; // XK_MISCELLANY
	case 0xff66: return "redo"; // XK_MISCELLANY
	case 0xff67: return "menu"; // XK_MISCELLANY
	case 0xff68: return "find"; // XK_MISCELLANY
	case 0xff69: return "cancel"; // XK_MISCELLANY
	case 0xff6a: return "help"; // XK_MISCELLANY
	case 0xff6b: return "break"; // XK_MISCELLANY
	case 0xff7e: return "mode.switch"; // XK_MISCELLANY
	case 0xff7f: return "num.lock"; // XK_MISCELLANY
	case 0xff80: return "kp.space"; // XK_MISCELLANY
	case 0xff89: return "kp.tab"; // XK_MISCELLANY
	case 0xff8d: return "kp.enter"; // XK_MISCELLANY
	case 0xff91: return "kp.f1"; // XK_MISCELLANY
	case 0xff92: return "kp.f2"; // XK_MISCELLANY
	case 0xff93: return "kp.f3"; // XK_MISCELLANY
	case 0xff94: return "kp.f4"; // XK_MISCELLANY
	case 0xff95: return "kp.home"; // XK_MISCELLANY
	case 0xff96: return "kp.left"; // XK_MISCELLANY
	case 0xff97: return "kp.up"; // XK_MISCELLANY
	case 0xff98: return "kp.right"; // XK_MISCELLANY
	case 0xff99: return "kp.down"; // XK_MISCELLANY
	case 0xff9a: return "kp.prior"; // XK_MISCELLANY
	case 0xff9b: return "kp.next"; // XK_MISCELLANY
	case 0xff9c: return "kp.end"; // XK_MISCELLANY
	case 0xff9d: return "kp.begin"; // XK_MISCELLANY
	case 0xff9e: return "kp.insert"; // XK_MISCELLANY
	case 0xff9f: return "kp.delete"; // XK_MISCELLANY
	case 0xffbd: return "kp.equal"; // XK_MISCELLANY
	case 0xffaa: return "kp.multiply"; // XK_MISCELLANY
	case 0xffab: return "kp.add"; // XK_MISCELLANY
	case 0xffac: return "kp.separator"; // XK_MISCELLANY
	case 0xffad: return "kp.subtract"; // XK_MISCELLANY
	case 0xffae: return "kp.decimal"; // XK_MISCELLANY
	case 0xffaf: return "kp.divide"; // XK_MISCELLANY
	case 0xffb0: return "kp.0"; // XK_MISCELLANY
	case 0xffb1: return "kp.1"; // XK_MISCELLANY
	case 0xffb2: return "kp.2"; // XK_MISCELLANY
	case 0xffb3: return "kp.3"; // XK_MISCELLANY
	case 0xffb4: return "kp.4"; // XK_MISCELLANY
	case 0xffb5: return "kp.5"; // XK_MISCELLANY
	case 0xffb6: return "kp.6"; // XK_MISCELLANY
	case 0xffb7: return "kp.7"; // XK_MISCELLANY
	case 0xffb8: return "kp.8"; // XK_MISCELLANY
	case 0xffb9: return "kp.9"; // XK_MISCELLANY
	case 0xffbe: return "f1"; // XK_MISCELLANY
	case 0xffbf: return "f2"; // XK_MISCELLANY
	case 0xffc0: return "f3"; // XK_MISCELLANY
	case 0xffc1: return "f4"; // XK_MISCELLANY
	case 0xffc2: return "f5"; // XK_MISCELLANY
	case 0xffc3: return "f6"; // XK_MISCELLANY
	case 0xffc4: return "f7"; // XK_MISCELLANY
	case 0xffc5: return "f8"; // XK_MISCELLANY
	case 0xffc6: return "f9"; // XK_MISCELLANY
	case 0xffc7: return "f10"; // XK_MISCELLANY
	case 0xffc8: return "f11"; // XK_MISCELLANY
	case 0xffc9: return "f12"; // XK_MISCELLANY
	case 0xffca: return "f13"; // XK_MISCELLANY
	case 0xffcb: return "f14"; // XK_MISCELLANY
	case 0xffcc: return "f15"; // XK_MISCELLANY
	case 0xffcd: return "f16"; // XK_MISCELLANY
	case 0xffce: return "f17"; // XK_MISCELLANY
	case 0xffcf: return "f18"; // XK_MISCELLANY
	case 0xffd0: return "f19"; // XK_MISCELLANY
	case 0xffd1: return "f20"; // XK_MISCELLANY
	case 0xffd2: return "f21"; // XK_MISCELLANY
	case 0xffd3: return "f22"; // XK_MISCELLANY
	case 0xffd4: return "f23"; // XK_MISCELLANY
	case 0xffd5: return "f24"; // XK_MISCELLANY
	case 0xffd6: return "f25"; // XK_MISCELLANY
	case 0xffd7: return "f26"; // XK_MISCELLANY
	case 0xffd8: return "f27"; // XK_MISCELLANY
	case 0xffd9: return "f28"; // XK_MISCELLANY
	case 0xffda: return "f29"; // XK_MISCELLANY
	case 0xffdb: return "f30"; // XK_MISCELLANY
	case 0xffdc: return "f31"; // XK_MISCELLANY
	case 0xffdd: return "f32"; // XK_MISCELLANY
	case 0xffde: return "f33"; // XK_MISCELLANY
	case 0xffdf: return "f34"; // XK_MISCELLANY
	case 0xffe0: return "f35"; // XK_MISCELLANY
	case 0xffe1: return "shift.l"; // XK_MISCELLANY
	case 0xffe2: return "shift.r"; // XK_MISCELLANY
	case 0xffe3: return "control.l"; // XK_MISCELLANY
	case 0xffe4: return "control.r"; // XK_MISCELLANY
	case 0xffe5: return "caps.lock"; // XK_MISCELLANY
	case 0xffe6: return "shift.lock"; // XK_MISCELLANY
	case 0xffe7: return "meta.l"; // XK_MISCELLANY
	case 0xffe8: return "meta.r"; // XK_MISCELLANY
	case 0xffe9: return "alt.l"; // XK_MISCELLANY
	case 0xffea: return "alt.r"; // XK_MISCELLANY
	case 0xffeb: return "super.l"; // XK_MISCELLANY
	case 0xffec: return "super.r"; // XK_MISCELLANY
	case 0xffed: return "hyper.l"; // XK_MISCELLANY
	case 0xffee: return "hyper.r"; // XK_MISCELLANY

	// XK_XKB_KEYS

	case 0xfe01: return "iso.lock"; // XK_XKB_KEYS
	case 0xfe02: return "iso.level2.latch"; // XK_XKB_KEYS
	case 0xfe03: return "iso.level3.shift"; // XK_XKB_KEYS
	case 0xfe04: return "iso.level3.latch"; // XK_XKB_KEYS
	case 0xfe05: return "iso.level3.lock"; // XK_XKB_KEYS
	case 0xfe11: return "iso.level5.shift"; // XK_XKB_KEYS
	case 0xfe12: return "iso.level5.latch"; // XK_XKB_KEYS
	case 0xfe13: return "iso.level5.lock"; // XK_XKB_KEYS
	case 0xfe06: return "iso.group.latch"; // XK_XKB_KEYS
	case 0xfe07: return "iso.group.lock"; // XK_XKB_KEYS
	case 0xfe08: return "iso.next.group"; // XK_XKB_KEYS
	case 0xfe09: return "iso.next.group.lock"; // XK_XKB_KEYS
	case 0xfe0a: return "iso.prev.group"; // XK_XKB_KEYS
	case 0xfe0b: return "iso.prev.group.lock"; // XK_XKB_KEYS
	case 0xfe0c: return "iso.first.group"; // XK_XKB_KEYS
	case 0xfe0d: return "iso.first.group.lock"; // XK_XKB_KEYS
	case 0xfe0e: return "iso.last.group"; // XK_XKB_KEYS
	case 0xfe0f: return "iso.last.group.lock"; // XK_XKB_KEYS
	case 0xfe20: return "iso.left.tab"; // XK_XKB_KEYS
	case 0xfe21: return "iso.move.line.up"; // XK_XKB_KEYS
	case 0xfe22: return "iso.move.line.down"; // XK_XKB_KEYS
	case 0xfe23: return "iso.partial.line.up"; // XK_XKB_KEYS
	case 0xfe24: return "iso.partial.line.down"; // XK_XKB_KEYS
	case 0xfe25: return "iso.partial.space.left"; // XK_XKB_KEYS
	case 0xfe26: return "iso.partial.space.right"; // XK_XKB_KEYS
	case 0xfe27: return "iso.set.margin.left"; // XK_XKB_KEYS
	case 0xfe28: return "iso.set.margin.right"; // XK_XKB_KEYS
	case 0xfe29: return "iso.release.margin.left"; // XK_XKB_KEYS
	case 0xfe2a: return "iso.release.margin.right"; // XK_XKB_KEYS
	case 0xfe2b: return "iso.release.both.margins"; // XK_XKB_KEYS
	case 0xfe2c: return "iso.fast.cursor.left"; // XK_XKB_KEYS
	case 0xfe2d: return "iso.fast.cursor.right"; // XK_XKB_KEYS
	case 0xfe2e: return "iso.fast.cursor.up"; // XK_XKB_KEYS
	case 0xfe2f: return "iso.fast.cursor.down"; // XK_XKB_KEYS
	case 0xfe30: return "iso.continuous.underline"; // XK_XKB_KEYS
	case 0xfe31: return "iso.discontinuous.underline"; // XK_XKB_KEYS
	case 0xfe32: return "iso.emphasize"; // XK_XKB_KEYS
	case 0xfe33: return "iso.center.object"; // XK_XKB_KEYS
	case 0xfe34: return "iso.enter"; // XK_XKB_KEYS
	case 0xfe50: return "dead.grave"; // XK_XKB_KEYS
	case 0xfe51: return "dead.acute"; // XK_XKB_KEYS
	case 0xfe52: return "dead.circumflex"; // XK_XKB_KEYS
	case 0xfe53: return "dead.tilde"; // XK_XKB_KEYS
	case 0xfe54: return "dead.macron"; // XK_XKB_KEYS
	case 0xfe55: return "dead.breve"; // XK_XKB_KEYS
	case 0xfe56: return "dead.abovedot"; // XK_XKB_KEYS
	case 0xfe57: return "dead.diaeresis"; // XK_XKB_KEYS
	case 0xfe58: return "dead.abovering"; // XK_XKB_KEYS
	case 0xfe59: return "dead.doubleacute"; // XK_XKB_KEYS
	case 0xfe5a: return "dead.caron"; // XK_XKB_KEYS
	case 0xfe5b: return "dead.cedilla"; // XK_XKB_KEYS
	case 0xfe5c: return "dead.ogonek"; // XK_XKB_KEYS
	case 0xfe5d: return "dead.iota"; // XK_XKB_KEYS
	case 0xfe5e: return "dead.voiced.sound"; // XK_XKB_KEYS
	case 0xfe5f: return "dead.semivoiced.sound"; // XK_XKB_KEYS
	case 0xfe60: return "dead.belowdot"; // XK_XKB_KEYS
	case 0xfe61: return "dead.hook"; // XK_XKB_KEYS
	case 0xfe62: return "dead.horn"; // XK_XKB_KEYS
	case 0xfe63: return "dead.stroke"; // XK_XKB_KEYS
	case 0xfe64: return "dead.abovecomma"; // XK_XKB_KEYS
	case 0xfe65: return "dead.abovereversedcomma"; // XK_XKB_KEYS
	case 0xfe66: return "dead.doublegrave"; // XK_XKB_KEYS
	case 0xfe67: return "dead.belowring"; // XK_XKB_KEYS
	case 0xfe68: return "dead.belowmacron"; // XK_XKB_KEYS
	case 0xfe69: return "dead.belowcircumflex"; // XK_XKB_KEYS
	case 0xfe6a: return "dead.belowtilde"; // XK_XKB_KEYS
	case 0xfe6b: return "dead.belowbreve"; // XK_XKB_KEYS
	case 0xfe6c: return "dead.belowdiaeresis"; // XK_XKB_KEYS
	case 0xfe6d: return "dead.invertedbreve"; // XK_XKB_KEYS
	case 0xfe6e: return "dead.belowcomma"; // XK_XKB_KEYS
	case 0xfe6f: return "dead.currency"; // XK_XKB_KEYS
	case 0xfe90: return "dead.lowline"; // XK_XKB_KEYS
	case 0xfe91: return "dead.aboveverticalline"; // XK_XKB_KEYS
	case 0xfe92: return "dead.belowverticalline"; // XK_XKB_KEYS
	case 0xfe93: return "dead.longsolidusoverlay"; // XK_XKB_KEYS
	case 0xfe80: return "dead.a"; // XK_XKB_KEYS
	case 0xfe81: return "dead.a"; // XK_XKB_KEYS
	case 0xfe82: return "dead.e"; // XK_XKB_KEYS
	case 0xfe83: return "dead.e"; // XK_XKB_KEYS
	case 0xfe84: return "dead.i"; // XK_XKB_KEYS
	case 0xfe85: return "dead.i"; // XK_XKB_KEYS
	case 0xfe86: return "dead.o"; // XK_XKB_KEYS
	case 0xfe87: return "dead.o"; // XK_XKB_KEYS
	case 0xfe88: return "dead.u"; // XK_XKB_KEYS
	case 0xfe89: return "dead.u"; // XK_XKB_KEYS
	case 0xfe8a: return "dead.small.schwa"; // XK_XKB_KEYS
	case 0xfe8b: return "dead.capital.schwa"; // XK_XKB_KEYS
	case 0xfe8c: return "dead.greek"; // XK_XKB_KEYS
	case 0xfed0: return "first.virtual.screen"; // XK_XKB_KEYS
	case 0xfed1: return "prev.virtual.screen"; // XK_XKB_KEYS
	case 0xfed2: return "next.virtual.screen"; // XK_XKB_KEYS
	case 0xfed4: return "last.virtual.screen"; // XK_XKB_KEYS
	case 0xfed5: return "terminate.server"; // XK_XKB_KEYS
	case 0xfe70: return "accessx.enable"; // XK_XKB_KEYS
	case 0xfe71: return "accessx.feedback.enable"; // XK_XKB_KEYS
	case 0xfe72: return "repeatkeys.enable"; // XK_XKB_KEYS
	case 0xfe73: return "slowkeys.enable"; // XK_XKB_KEYS
	case 0xfe74: return "bouncekeys.enable"; // XK_XKB_KEYS
	case 0xfe75: return "stickykeys.enable"; // XK_XKB_KEYS
	case 0xfe76: return "mousekeys.enable"; // XK_XKB_KEYS
	case 0xfe77: return "mousekeys.accel.enable"; // XK_XKB_KEYS
	case 0xfe78: return "overlay1.enable"; // XK_XKB_KEYS
	case 0xfe79: return "overlay2.enable"; // XK_XKB_KEYS
	case 0xfe7a: return "audiblebell.enable"; // XK_XKB_KEYS
	case 0xfee0: return "pointer.left"; // XK_XKB_KEYS
	case 0xfee1: return "pointer.right"; // XK_XKB_KEYS
	case 0xfee2: return "pointer.up"; // XK_XKB_KEYS
	case 0xfee3: return "pointer.down"; // XK_XKB_KEYS
	case 0xfee4: return "pointer.upleft"; // XK_XKB_KEYS
	case 0xfee5: return "pointer.upright"; // XK_XKB_KEYS
	case 0xfee6: return "pointer.downleft"; // XK_XKB_KEYS
	case 0xfee7: return "pointer.downright"; // XK_XKB_KEYS
	case 0xfee8: return "pointer.button.dflt"; // XK_XKB_KEYS
	case 0xfee9: return "pointer.button1"; // XK_XKB_KEYS
	case 0xfeea: return "pointer.button2"; // XK_XKB_KEYS
	case 0xfeeb: return "pointer.button3"; // XK_XKB_KEYS
	case 0xfeec: return "pointer.button4"; // XK_XKB_KEYS
	case 0xfeed: return "pointer.button5"; // XK_XKB_KEYS
	case 0xfeee: return "pointer.dblclick.dflt"; // XK_XKB_KEYS
	case 0xfeef: return "pointer.dblclick1"; // XK_XKB_KEYS
	case 0xfef0: return "pointer.dblclick2"; // XK_XKB_KEYS
	case 0xfef1: return "pointer.dblclick3"; // XK_XKB_KEYS
	case 0xfef2: return "pointer.dblclick4"; // XK_XKB_KEYS
	case 0xfef3: return "pointer.dblclick5"; // XK_XKB_KEYS
	case 0xfef4: return "pointer.drag.dflt"; // XK_XKB_KEYS
	case 0xfef5: return "pointer.drag1"; // XK_XKB_KEYS
	case 0xfef6: return "pointer.drag2"; // XK_XKB_KEYS
	case 0xfef7: return "pointer.drag3"; // XK_XKB_KEYS
	case 0xfef8: return "pointer.drag4"; // XK_XKB_KEYS
	case 0xfefd: return "pointer.drag5"; // XK_XKB_KEYS
	case 0xfef9: return "pointer.enablekeys"; // XK_XKB_KEYS
	case 0xfefa: return "pointer.accelerate"; // XK_XKB_KEYS
	case 0xfefb: return "pointer.dfltbtnnext"; // XK_XKB_KEYS
	case 0xfefc: return "pointer.dfltbtnprev"; // XK_XKB_KEYS
	case 0xfea0: return "ch"; // XK_XKB_KEYS
	case 0xfea1: return "ch"; // XK_XKB_KEYS
	case 0xfea2: return "ch"; // XK_XKB_KEYS
	case 0xfea3: return "c.h"; // XK_XKB_KEYS
	case 0xfea4: return "c.h"; // XK_XKB_KEYS
	case 0xfea5: return "c.h"; // XK_XKB_KEYS

	// XK_3270

	case 0xfd01: return "3270.duplicate"; // XK_3270
	case 0xfd02: return "3270.fieldmark"; // XK_3270
	case 0xfd03: return "3270.right2"; // XK_3270
	case 0xfd04: return "3270.left2"; // XK_3270
	case 0xfd05: return "3270.backtab"; // XK_3270
	case 0xfd06: return "3270.eraseeof"; // XK_3270
	case 0xfd07: return "3270.eraseinput"; // XK_3270
	case 0xfd08: return "3270.reset"; // XK_3270
	case 0xfd09: return "3270.quit"; // XK_3270
	case 0xfd0a: return "3270.pa1"; // XK_3270
	case 0xfd0b: return "3270.pa2"; // XK_3270
	case 0xfd0c: return "3270.pa3"; // XK_3270
	case 0xfd0d: return "3270.test"; // XK_3270
	case 0xfd0e: return "3270.attn"; // XK_3270
	case 0xfd0f: return "3270.cursorblink"; // XK_3270
	case 0xfd10: return "3270.altcursor"; // XK_3270
	case 0xfd11: return "3270.keyclick"; // XK_3270
	case 0xfd12: return "3270.jump"; // XK_3270
	case 0xfd13: return "3270.ident"; // XK_3270
	case 0xfd14: return "3270.rule"; // XK_3270
	case 0xfd15: return "3270.copy"; // XK_3270
	case 0xfd16: return "3270.play"; // XK_3270
	case 0xfd17: return "3270.setup"; // XK_3270
	case 0xfd18: return "3270.record"; // XK_3270
	case 0xfd19: return "3270.changescreen"; // XK_3270
	case 0xfd1a: return "3270.deleteword"; // XK_3270
	case 0xfd1b: return "3270.exselect"; // XK_3270
	case 0xfd1c: return "3270.cursorselect"; // XK_3270
	case 0xfd1d: return "3270.printscreen"; // XK_3270
	case 0xfd1e: return "3270.enter"; // XK_3270

	// XK_LATIN1

	case 0x20: return "space"; // XK_LATIN1 (U+0020,  )
	case 0x21: return "exclamation.mark"; // XK_LATIN1 (U+0021, !)
	case 0x22: return "quotation.mark"; // XK_LATIN1 (U+0022, ")
	case 0x23: return "number.sign"; // XK_LATIN1 (U+0023, #)
	case 0x24: return "dollar.sign"; // XK_LATIN1 (U+0024, $)
	case 0x25: return "percent.sign"; // XK_LATIN1 (U+0025, %)
	case 0x26: return "ampersand"; // XK_LATIN1 (U+0026, &)
	case 0x27: return "apostrophe"; // XK_LATIN1 (U+0027, ')
	case 0x28: return "left.parenthesis"; // XK_LATIN1 (U+0028, ()
	case 0x29: return "right.parenthesis"; // XK_LATIN1 (U+0029, ))
	case 0x2a: return "asterisk"; // XK_LATIN1 (U+002A, *)
	case 0x2b: return "plus.sign"; // XK_LATIN1 (U+002B, +)
	case 0x2c: return "comma"; // XK_LATIN1 (U+002C, ,)
	case 0x2d: return "hyphen_minus"; // XK_LATIN1 (U+002D, -)
	case 0x2e: return "full.stop"; // XK_LATIN1 (U+002E, .)
	case 0x2f: return "solidus"; // XK_LATIN1 (U+002F, /)
	case 0x30: return "digit.zero"; // XK_LATIN1 (U+0030, 0)
	case 0x31: return "digit.one"; // XK_LATIN1 (U+0031, 1)
	case 0x32: return "digit.two"; // XK_LATIN1 (U+0032, 2)
	case 0x33: return "digit.three"; // XK_LATIN1 (U+0033, 3)
	case 0x34: return "digit.four"; // XK_LATIN1 (U+0034, 4)
	case 0x35: return "digit.five"; // XK_LATIN1 (U+0035, 5)
	case 0x36: return "digit.six"; // XK_LATIN1 (U+0036, 6)
	case 0x37: return "digit.seven"; // XK_LATIN1 (U+0037, 7)
	case 0x38: return "digit.eight"; // XK_LATIN1 (U+0038, 8)
	case 0x39: return "digit.nine"; // XK_LATIN1 (U+0039, 9)
	case 0x3a: return "colon"; // XK_LATIN1 (U+003A, :)
	case 0x3b: return "semicolon"; // XK_LATIN1 (U+003B, ;)
	case 0x3c: return "less_than.sign"; // XK_LATIN1 (U+003C, <)
	case 0x3d: return "equals.sign"; // XK_LATIN1 (U+003D, =)
	case 0x3e: return "greater_than.sign"; // XK_LATIN1 (U+003E, >)
	case 0x3f: return "question.mark"; // XK_LATIN1 (U+003F, ?)
	case 0x40: return "commercial.at"; // XK_LATIN1 (U+0040, @)
	case 0x41: return "latin.capital.letter.a"; // XK_LATIN1 (U+0041, A)
	case 0x42: return "latin.capital.letter.b"; // XK_LATIN1 (U+0042, B)
	case 0x43: return "latin.capital.letter.c"; // XK_LATIN1 (U+0043, C)
	case 0x44: return "latin.capital.letter.d"; // XK_LATIN1 (U+0044, D)
	case 0x45: return "latin.capital.letter.e"; // XK_LATIN1 (U+0045, E)
	case 0x46: return "latin.capital.letter.f"; // XK_LATIN1 (U+0046, F)
	case 0x47: return "latin.capital.letter.g"; // XK_LATIN1 (U+0047, G)
	case 0x48: return "latin.capital.letter.h"; // XK_LATIN1 (U+0048, H)
	case 0x49: return "latin.capital.letter.i"; // XK_LATIN1 (U+0049, I)
	case 0x4a: return "latin.capital.letter.j"; // XK_LATIN1 (U+004A, J)
	case 0x4b: return "latin.capital.letter.k"; // XK_LATIN1 (U+004B, K)
	case 0x4c: return "latin.capital.letter.l"; // XK_LATIN1 (U+004C, L)
	case 0x4d: return "latin.capital.letter.m"; // XK_LATIN1 (U+004D, M)
	case 0x4e: return "latin.capital.letter.n"; // XK_LATIN1 (U+004E, N)
	case 0x4f: return "latin.capital.letter.o"; // XK_LATIN1 (U+004F, O)
	case 0x50: return "latin.capital.letter.p"; // XK_LATIN1 (U+0050, P)
	case 0x51: return "latin.capital.letter.q"; // XK_LATIN1 (U+0051, Q)
	case 0x52: return "latin.capital.letter.r"; // XK_LATIN1 (U+0052, R)
	case 0x53: return "latin.capital.letter.s"; // XK_LATIN1 (U+0053, S)
	case 0x54: return "latin.capital.letter.t"; // XK_LATIN1 (U+0054, T)
	case 0x55: return "latin.capital.letter.u"; // XK_LATIN1 (U+0055, U)
	case 0x56: return "latin.capital.letter.v"; // XK_LATIN1 (U+0056, V)
	case 0x57: return "latin.capital.letter.w"; // XK_LATIN1 (U+0057, W)
	case 0x58: return "latin.capital.letter.x"; // XK_LATIN1 (U+0058, X)
	case 0x59: return "latin.capital.letter.y"; // XK_LATIN1 (U+0059, Y)
	case 0x5a: return "latin.capital.letter.z"; // XK_LATIN1 (U+005A, Z)
	case 0x5b: return "left.square.bracket"; // XK_LATIN1 (U+005B, [)
	case 0x5c: return "reverse.solidus"; // XK_LATIN1 (U+005C, \)
	case 0x5d: return "right.square.bracket"; // XK_LATIN1 (U+005D, ])
	case 0x5e: return "circumflex.accent"; // XK_LATIN1 (U+005E, ^)
	case 0x5f: return "low.line"; // XK_LATIN1 (U+005F, _)
	case 0x60: return "grave.accent"; // XK_LATIN1 (U+0060, `)
	case 0x61: return "latin.small.letter.a"; // XK_LATIN1 (U+0061, a)
	case 0x62: return "latin.small.letter.b"; // XK_LATIN1 (U+0062, b)
	case 0x63: return "latin.small.letter.c"; // XK_LATIN1 (U+0063, c)
	case 0x64: return "latin.small.letter.d"; // XK_LATIN1 (U+0064, d)
	case 0x65: return "latin.small.letter.e"; // XK_LATIN1 (U+0065, e)
	case 0x66: return "latin.small.letter.f"; // XK_LATIN1 (U+0066, f)
	case 0x67: return "latin.small.letter.g"; // XK_LATIN1 (U+0067, g)
	case 0x68: return "latin.small.letter.h"; // XK_LATIN1 (U+0068, h)
	case 0x69: return "latin.small.letter.i"; // XK_LATIN1 (U+0069, i)
	case 0x6a: return "latin.small.letter.j"; // XK_LATIN1 (U+006A, j)
	case 0x6b: return "latin.small.letter.k"; // XK_LATIN1 (U+006B, k)
	case 0x6c: return "latin.small.letter.l"; // XK_LATIN1 (U+006C, l)
	case 0x6d: return "latin.small.letter.m"; // XK_LATIN1 (U+006D, m)
	case 0x6e: return "latin.small.letter.n"; // XK_LATIN1 (U+006E, n)
	case 0x6f: return "latin.small.letter.o"; // XK_LATIN1 (U+006F, o)
	case 0x70: return "latin.small.letter.p"; // XK_LATIN1 (U+0070, p)
	case 0x71: return "latin.small.letter.q"; // XK_LATIN1 (U+0071, q)
	case 0x72: return "latin.small.letter.r"; // XK_LATIN1 (U+0072, r)
	case 0x73: return "latin.small.letter.s"; // XK_LATIN1 (U+0073, s)
	case 0x74: return "latin.small.letter.t"; // XK_LATIN1 (U+0074, t)
	case 0x75: return "latin.small.letter.u"; // XK_LATIN1 (U+0075, u)
	case 0x76: return "latin.small.letter.v"; // XK_LATIN1 (U+0076, v)
	case 0x77: return "latin.small.letter.w"; // XK_LATIN1 (U+0077, w)
	case 0x78: return "latin.small.letter.x"; // XK_LATIN1 (U+0078, x)
	case 0x79: return "latin.small.letter.y"; // XK_LATIN1 (U+0079, y)
	case 0x7a: return "latin.small.letter.z"; // XK_LATIN1 (U+007A, z)
	case 0x7b: return "left.curly.bracket"; // XK_LATIN1 (U+007B, {)
	case 0x7c: return "vertical.line"; // XK_LATIN1 (U+007C, |)
	case 0x7d: return "right.curly.bracket"; // XK_LATIN1 (U+007D, })
	case 0x7e: return "tilde"; // XK_LATIN1 (U+007E, ~)
	case 0xa0: return "no_break.space"; // XK_LATIN1 (U+00A0,  )
	case 0xa1: return "inverted.exclamation.mark"; // XK_LATIN1 (U+00A1, ¡)
	case 0xa2: return "cent.sign"; // XK_LATIN1 (U+00A2, ¢)
	case 0xa3: return "pound.sign"; // XK_LATIN1 (U+00A3, £)
	case 0xa4: return "currency.sign"; // XK_LATIN1 (U+00A4, ¤)
	case 0xa5: return "yen.sign"; // XK_LATIN1 (U+00A5, ¥)
	case 0xa6: return "broken.bar"; // XK_LATIN1 (U+00A6, ¦)
	case 0xa7: return "section.sign"; // XK_LATIN1 (U+00A7, §)
	case 0xa8: return "diaeresis"; // XK_LATIN1 (U+00A8, ¨)
	case 0xa9: return "copyright.sign"; // XK_LATIN1 (U+00A9, ©)
	case 0xaa: return "feminine.ordinal.indicator"; // XK_LATIN1 (U+00AA, ª)
	case 0xab: return "left_pointing.double.angle.quotation.mark"; // XK_LATIN1 (U+00AB, «)
	case 0xac: return "not.sign"; // XK_LATIN1 (U+00AC, ¬)
	case 0xad: return "soft.hyphen"; // XK_LATIN1 (U+00AD, ­)
	case 0xae: return "registered.sign"; // XK_LATIN1 (U+00AE, ®)
	case 0xaf: return "macron"; // XK_LATIN1 (U+00AF, ¯)
	case 0xb0: return "degree.sign"; // XK_LATIN1 (U+00B0, °)
	case 0xb1: return "plus_minus.sign"; // XK_LATIN1 (U+00B1, ±)
	case 0xb2: return "superscript.two"; // XK_LATIN1 (U+00B2, ²)
	case 0xb3: return "superscript.three"; // XK_LATIN1 (U+00B3, ³)
	case 0xb4: return "acute.accent"; // XK_LATIN1 (U+00B4, ´)
	case 0xb5: return "micro.sign"; // XK_LATIN1 (U+00B5, µ)
	case 0xb6: return "pilcrow.sign"; // XK_LATIN1 (U+00B6, ¶)
	case 0xb7: return "middle.dot"; // XK_LATIN1 (U+00B7, ·)
	case 0xb8: return "cedilla"; // XK_LATIN1 (U+00B8, ¸)
	case 0xb9: return "superscript.one"; // XK_LATIN1 (U+00B9, ¹)
	case 0xba: return "masculine.ordinal.indicator"; // XK_LATIN1 (U+00BA, º)
	case 0xbb: return "right_pointing.double.angle.quotation.mark"; // XK_LATIN1 (U+00BB, »)
	case 0xbc: return "vulgar.fraction.one.quarter"; // XK_LATIN1 (U+00BC, ¼)
	case 0xbd: return "vulgar.fraction.one.half"; // XK_LATIN1 (U+00BD, ½)
	case 0xbe: return "vulgar.fraction.three.quarters"; // XK_LATIN1 (U+00BE, ¾)
	case 0xbf: return "inverted.question.mark"; // XK_LATIN1 (U+00BF, ¿)
	case 0xc0: return "latin.capital.letter.a.with.grave"; // XK_LATIN1 (U+00C0, À)
	case 0xc1: return "latin.capital.letter.a.with.acute"; // XK_LATIN1 (U+00C1, Á)
	case 0xc2: return "latin.capital.letter.a.with.circumflex"; // XK_LATIN1 (U+00C2, Â)
	case 0xc3: return "latin.capital.letter.a.with.tilde"; // XK_LATIN1 (U+00C3, Ã)
	case 0xc4: return "latin.capital.letter.a.with.diaeresis"; // XK_LATIN1 (U+00C4, Ä)
	case 0xc5: return "latin.capital.letter.a.with.ring.above"; // XK_LATIN1 (U+00C5, Å)
	case 0xc6: return "latin.capital.letter.ae"; // XK_LATIN1 (U+00C6, Æ)
	case 0xc7: return "latin.capital.letter.c.with.cedilla"; // XK_LATIN1 (U+00C7, Ç)
	case 0xc8: return "latin.capital.letter.e.with.grave"; // XK_LATIN1 (U+00C8, È)
	case 0xc9: return "latin.capital.letter.e.with.acute"; // XK_LATIN1 (U+00C9, É)
	case 0xca: return "latin.capital.letter.e.with.circumflex"; // XK_LATIN1 (U+00CA, Ê)
	case 0xcb: return "latin.capital.letter.e.with.diaeresis"; // XK_LATIN1 (U+00CB, Ë)
	case 0xcc: return "latin.capital.letter.i.with.grave"; // XK_LATIN1 (U+00CC, Ì)
	case 0xcd: return "latin.capital.letter.i.with.acute"; // XK_LATIN1 (U+00CD, Í)
	case 0xce: return "latin.capital.letter.i.with.circumflex"; // XK_LATIN1 (U+00CE, Î)
	case 0xcf: return "latin.capital.letter.i.with.diaeresis"; // XK_LATIN1 (U+00CF, Ï)
	case 0xd0: return "latin.capital.letter.eth"; // XK_LATIN1 (U+00D0, Ð)
	case 0xd1: return "latin.capital.letter.n.with.tilde"; // XK_LATIN1 (U+00D1, Ñ)
	case 0xd2: return "latin.capital.letter.o.with.grave"; // XK_LATIN1 (U+00D2, Ò)
	case 0xd3: return "latin.capital.letter.o.with.acute"; // XK_LATIN1 (U+00D3, Ó)
	case 0xd4: return "latin.capital.letter.o.with.circumflex"; // XK_LATIN1 (U+00D4, Ô)
	case 0xd5: return "latin.capital.letter.o.with.tilde"; // XK_LATIN1 (U+00D5, Õ)
	case 0xd6: return "latin.capital.letter.o.with.diaeresis"; // XK_LATIN1 (U+00D6, Ö)
	case 0xd7: return "multiplication.sign"; // XK_LATIN1 (U+00D7, ×)
	case 0xd8: return "latin.capital.letter.o.with.stroke"; // XK_LATIN1 (U+00D8, Ø)
	case 0xd9: return "latin.capital.letter.u.with.grave"; // XK_LATIN1 (U+00D9, Ù)
	case 0xda: return "latin.capital.letter.u.with.acute"; // XK_LATIN1 (U+00DA, Ú)
	case 0xdb: return "latin.capital.letter.u.with.circumflex"; // XK_LATIN1 (U+00DB, Û)
	case 0xdc: return "latin.capital.letter.u.with.diaeresis"; // XK_LATIN1 (U+00DC, Ü)
	case 0xdd: return "latin.capital.letter.y.with.acute"; // XK_LATIN1 (U+00DD, Ý)
	case 0xde: return "latin.capital.letter.thorn"; // XK_LATIN1 (U+00DE, Þ)
	case 0xdf: return "latin.small.letter.sharp.s"; // XK_LATIN1 (U+00DF, ß)
	case 0xe0: return "latin.small.letter.a.with.grave"; // XK_LATIN1 (U+00E0, à)
	case 0xe1: return "latin.small.letter.a.with.acute"; // XK_LATIN1 (U+00E1, á)
	case 0xe2: return "latin.small.letter.a.with.circumflex"; // XK_LATIN1 (U+00E2, â)
	case 0xe3: return "latin.small.letter.a.with.tilde"; // XK_LATIN1 (U+00E3, ã)
	case 0xe4: return "latin.small.letter.a.with.diaeresis"; // XK_LATIN1 (U+00E4, ä)
	case 0xe5: return "latin.small.letter.a.with.ring.above"; // XK_LATIN1 (U+00E5, å)
	case 0xe6: return "latin.small.letter.ae"; // XK_LATIN1 (U+00E6, æ)
	case 0xe7: return "latin.small.letter.c.with.cedilla"; // XK_LATIN1 (U+00E7, ç)
	case 0xe8: return "latin.small.letter.e.with.grave"; // XK_LATIN1 (U+00E8, è)
	case 0xe9: return "latin.small.letter.e.with.acute"; // XK_LATIN1 (U+00E9, é)
	case 0xea: return "latin.small.letter.e.with.circumflex"; // XK_LATIN1 (U+00EA, ê)
	case 0xeb: return "latin.small.letter.e.with.diaeresis"; // XK_LATIN1 (U+00EB, ë)
	case 0xec: return "latin.small.letter.i.with.grave"; // XK_LATIN1 (U+00EC, ì)
	case 0xed: return "latin.small.letter.i.with.acute"; // XK_LATIN1 (U+00ED, í)
	case 0xee: return "latin.small.letter.i.with.circumflex"; // XK_LATIN1 (U+00EE, î)
	case 0xef: return "latin.small.letter.i.with.diaeresis"; // XK_LATIN1 (U+00EF, ï)
	case 0xf0: return "latin.small.letter.eth"; // XK_LATIN1 (U+00F0, ð)
	case 0xf1: return "latin.small.letter.n.with.tilde"; // XK_LATIN1 (U+00F1, ñ)
	case 0xf2: return "latin.small.letter.o.with.grave"; // XK_LATIN1 (U+00F2, ò)
	case 0xf3: return "latin.small.letter.o.with.acute"; // XK_LATIN1 (U+00F3, ó)
	case 0xf4: return "latin.small.letter.o.with.circumflex"; // XK_LATIN1 (U+00F4, ô)
	case 0xf5: return "latin.small.letter.o.with.tilde"; // XK_LATIN1 (U+00F5, õ)
	case 0xf6: return "latin.small.letter.o.with.diaeresis"; // XK_LATIN1 (U+00F6, ö)
	case 0xf7: return "division.sign"; // XK_LATIN1 (U+00F7, ÷)
	case 0xf8: return "latin.small.letter.o.with.stroke"; // XK_LATIN1 (U+00F8, ø)
	case 0xf9: return "latin.small.letter.u.with.grave"; // XK_LATIN1 (U+00F9, ù)
	case 0xfa: return "latin.small.letter.u.with.acute"; // XK_LATIN1 (U+00FA, ú)
	case 0xfb: return "latin.small.letter.u.with.circumflex"; // XK_LATIN1 (U+00FB, û)
	case 0xfc: return "latin.small.letter.u.with.diaeresis"; // XK_LATIN1 (U+00FC, ü)
	case 0xfd: return "latin.small.letter.y.with.acute"; // XK_LATIN1 (U+00FD, ý)
	case 0xfe: return "latin.small.letter.thorn"; // XK_LATIN1 (U+00FE, þ)
	case 0xff: return "latin.small.letter.y.with.diaeresis"; // XK_LATIN1 (U+00FF, ÿ)

	// XK_LATIN2

	case 0x1a1: return "latin.capital.letter.a.with.ogonek"; // XK_LATIN2 (U+0104, Ą)
	case 0x1a2: return "breve"; // XK_LATIN2 (U+02D8, ˘)
	case 0x1a3: return "latin.capital.letter.l.with.stroke"; // XK_LATIN2 (U+0141, Ł)
	case 0x1a5: return "latin.capital.letter.l.with.caron"; // XK_LATIN2 (U+013D, Ľ)
	case 0x1a6: return "latin.capital.letter.s.with.acute"; // XK_LATIN2 (U+015A, Ś)
	case 0x1a9: return "latin.capital.letter.s.with.caron"; // XK_LATIN2 (U+0160, Š)
	case 0x1aa: return "latin.capital.letter.s.with.cedilla"; // XK_LATIN2 (U+015E, Ş)
	case 0x1ab: return "latin.capital.letter.t.with.caron"; // XK_LATIN2 (U+0164, Ť)
	case 0x1ac: return "latin.capital.letter.z.with.acute"; // XK_LATIN2 (U+0179, Ź)
	case 0x1ae: return "latin.capital.letter.z.with.caron"; // XK_LATIN2 (U+017D, Ž)
	case 0x1af: return "latin.capital.letter.z.with.dot.above"; // XK_LATIN2 (U+017B, Ż)
	case 0x1b1: return "latin.small.letter.a.with.ogonek"; // XK_LATIN2 (U+0105, ą)
	case 0x1b2: return "ogonek"; // XK_LATIN2 (U+02DB, ˛)
	case 0x1b3: return "latin.small.letter.l.with.stroke"; // XK_LATIN2 (U+0142, ł)
	case 0x1b5: return "latin.small.letter.l.with.caron"; // XK_LATIN2 (U+013E, ľ)
	case 0x1b6: return "latin.small.letter.s.with.acute"; // XK_LATIN2 (U+015B, ś)
	case 0x1b7: return "caron"; // XK_LATIN2 (U+02C7, ˇ)
	case 0x1b9: return "latin.small.letter.s.with.caron"; // XK_LATIN2 (U+0161, š)
	case 0x1ba: return "latin.small.letter.s.with.cedilla"; // XK_LATIN2 (U+015F, ş)
	case 0x1bb: return "latin.small.letter.t.with.caron"; // XK_LATIN2 (U+0165, ť)
	case 0x1bc: return "latin.small.letter.z.with.acute"; // XK_LATIN2 (U+017A, ź)
	case 0x1bd: return "double.acute.accent"; // XK_LATIN2 (U+02DD, ˝)
	case 0x1be: return "latin.small.letter.z.with.caron"; // XK_LATIN2 (U+017E, ž)
	case 0x1bf: return "latin.small.letter.z.with.dot.above"; // XK_LATIN2 (U+017C, ż)
	case 0x1c0: return "latin.capital.letter.r.with.acute"; // XK_LATIN2 (U+0154, Ŕ)
	case 0x1c3: return "latin.capital.letter.a.with.breve"; // XK_LATIN2 (U+0102, Ă)
	case 0x1c5: return "latin.capital.letter.l.with.acute"; // XK_LATIN2 (U+0139, Ĺ)
	case 0x1c6: return "latin.capital.letter.c.with.acute"; // XK_LATIN2 (U+0106, Ć)
	case 0x1c8: return "latin.capital.letter.c.with.caron"; // XK_LATIN2 (U+010C, Č)
	case 0x1ca: return "latin.capital.letter.e.with.ogonek"; // XK_LATIN2 (U+0118, Ę)
	case 0x1cc: return "latin.capital.letter.e.with.caron"; // XK_LATIN2 (U+011A, Ě)
	case 0x1cf: return "latin.capital.letter.d.with.caron"; // XK_LATIN2 (U+010E, Ď)
	case 0x1d0: return "latin.capital.letter.d.with.stroke"; // XK_LATIN2 (U+0110, Đ)
	case 0x1d1: return "latin.capital.letter.n.with.acute"; // XK_LATIN2 (U+0143, Ń)
	case 0x1d2: return "latin.capital.letter.n.with.caron"; // XK_LATIN2 (U+0147, Ň)
	case 0x1d5: return "latin.capital.letter.o.with.double.acute"; // XK_LATIN2 (U+0150, Ő)
	case 0x1d8: return "latin.capital.letter.r.with.caron"; // XK_LATIN2 (U+0158, Ř)
	case 0x1d9: return "latin.capital.letter.u.with.ring.above"; // XK_LATIN2 (U+016E, Ů)
	case 0x1db: return "latin.capital.letter.u.with.double.acute"; // XK_LATIN2 (U+0170, Ű)
	case 0x1de: return "latin.capital.letter.t.with.cedilla"; // XK_LATIN2 (U+0162, Ţ)
	case 0x1e0: return "latin.small.letter.r.with.acute"; // XK_LATIN2 (U+0155, ŕ)
	case 0x1e3: return "latin.small.letter.a.with.breve"; // XK_LATIN2 (U+0103, ă)
	case 0x1e5: return "latin.small.letter.l.with.acute"; // XK_LATIN2 (U+013A, ĺ)
	case 0x1e6: return "latin.small.letter.c.with.acute"; // XK_LATIN2 (U+0107, ć)
	case 0x1e8: return "latin.small.letter.c.with.caron"; // XK_LATIN2 (U+010D, č)
	case 0x1ea: return "latin.small.letter.e.with.ogonek"; // XK_LATIN2 (U+0119, ę)
	case 0x1ec: return "latin.small.letter.e.with.caron"; // XK_LATIN2 (U+011B, ě)
	case 0x1ef: return "latin.small.letter.d.with.caron"; // XK_LATIN2 (U+010F, ď)
	case 0x1f0: return "latin.small.letter.d.with.stroke"; // XK_LATIN2 (U+0111, đ)
	case 0x1f1: return "latin.small.letter.n.with.acute"; // XK_LATIN2 (U+0144, ń)
	case 0x1f2: return "latin.small.letter.n.with.caron"; // XK_LATIN2 (U+0148, ň)
	case 0x1f5: return "latin.small.letter.o.with.double.acute"; // XK_LATIN2 (U+0151, ő)
	case 0x1f8: return "latin.small.letter.r.with.caron"; // XK_LATIN2 (U+0159, ř)
	case 0x1f9: return "latin.small.letter.u.with.ring.above"; // XK_LATIN2 (U+016F, ů)
	case 0x1fb: return "latin.small.letter.u.with.double.acute"; // XK_LATIN2 (U+0171, ű)
	case 0x1fe: return "latin.small.letter.t.with.cedilla"; // XK_LATIN2 (U+0163, ţ)
	case 0x1ff: return "dot.above"; // XK_LATIN2 (U+02D9, ˙)

	// XK_LATIN3

	case 0x2a1: return "latin.capital.letter.h.with.stroke"; // XK_LATIN3 (U+0126, Ħ)
	case 0x2a6: return "latin.capital.letter.h.with.circumflex"; // XK_LATIN3 (U+0124, Ĥ)
	case 0x2a9: return "latin.capital.letter.i.with.dot.above"; // XK_LATIN3 (U+0130, İ)
	case 0x2ab: return "latin.capital.letter.g.with.breve"; // XK_LATIN3 (U+011E, Ğ)
	case 0x2ac: return "latin.capital.letter.j.with.circumflex"; // XK_LATIN3 (U+0134, Ĵ)
	case 0x2b1: return "latin.small.letter.h.with.stroke"; // XK_LATIN3 (U+0127, ħ)
	case 0x2b6: return "latin.small.letter.h.with.circumflex"; // XK_LATIN3 (U+0125, ĥ)
	case 0x2b9: return "latin.small.letter.dotless.i"; // XK_LATIN3 (U+0131, ı)
	case 0x2bb: return "latin.small.letter.g.with.breve"; // XK_LATIN3 (U+011F, ğ)
	case 0x2bc: return "latin.small.letter.j.with.circumflex"; // XK_LATIN3 (U+0135, ĵ)
	case 0x2c5: return "latin.capital.letter.c.with.dot.above"; // XK_LATIN3 (U+010A, Ċ)
	case 0x2c6: return "latin.capital.letter.c.with.circumflex"; // XK_LATIN3 (U+0108, Ĉ)
	case 0x2d5: return "latin.capital.letter.g.with.dot.above"; // XK_LATIN3 (U+0120, Ġ)
	case 0x2d8: return "latin.capital.letter.g.with.circumflex"; // XK_LATIN3 (U+011C, Ĝ)
	case 0x2dd: return "latin.capital.letter.u.with.breve"; // XK_LATIN3 (U+016C, Ŭ)
	case 0x2de: return "latin.capital.letter.s.with.circumflex"; // XK_LATIN3 (U+015C, Ŝ)
	case 0x2e5: return "latin.small.letter.c.with.dot.above"; // XK_LATIN3 (U+010B, ċ)
	case 0x2e6: return "latin.small.letter.c.with.circumflex"; // XK_LATIN3 (U+0109, ĉ)
	case 0x2f5: return "latin.small.letter.g.with.dot.above"; // XK_LATIN3 (U+0121, ġ)
	case 0x2f8: return "latin.small.letter.g.with.circumflex"; // XK_LATIN3 (U+011D, ĝ)
	case 0x2fd: return "latin.small.letter.u.with.breve"; // XK_LATIN3 (U+016D, ŭ)
	case 0x2fe: return "latin.small.letter.s.with.circumflex"; // XK_LATIN3 (U+015D, ŝ)

	// XK_LATIN4

	case 0x3a2: return "latin.small.letter.kra"; // XK_LATIN4 (U+0138, ĸ)
	case 0x3a3: return "latin.capital.letter.r.with.cedilla"; // XK_LATIN4 (U+0156, Ŗ)
	case 0x3a5: return "latin.capital.letter.i.with.tilde"; // XK_LATIN4 (U+0128, Ĩ)
	case 0x3a6: return "latin.capital.letter.l.with.cedilla"; // XK_LATIN4 (U+013B, Ļ)
	case 0x3aa: return "latin.capital.letter.e.with.macron"; // XK_LATIN4 (U+0112, Ē)
	case 0x3ab: return "latin.capital.letter.g.with.cedilla"; // XK_LATIN4 (U+0122, Ģ)
	case 0x3ac: return "latin.capital.letter.t.with.stroke"; // XK_LATIN4 (U+0166, Ŧ)
	case 0x3b3: return "latin.small.letter.r.with.cedilla"; // XK_LATIN4 (U+0157, ŗ)
	case 0x3b5: return "latin.small.letter.i.with.tilde"; // XK_LATIN4 (U+0129, ĩ)
	case 0x3b6: return "latin.small.letter.l.with.cedilla"; // XK_LATIN4 (U+013C, ļ)
	case 0x3ba: return "latin.small.letter.e.with.macron"; // XK_LATIN4 (U+0113, ē)
	case 0x3bb: return "latin.small.letter.g.with.cedilla"; // XK_LATIN4 (U+0123, ģ)
	case 0x3bc: return "latin.small.letter.t.with.stroke"; // XK_LATIN4 (U+0167, ŧ)
	case 0x3bd: return "latin.capital.letter.eng"; // XK_LATIN4 (U+014A, Ŋ)
	case 0x3bf: return "latin.small.letter.eng"; // XK_LATIN4 (U+014B, ŋ)
	case 0x3c0: return "latin.capital.letter.a.with.macron"; // XK_LATIN4 (U+0100, Ā)
	case 0x3c7: return "latin.capital.letter.i.with.ogonek"; // XK_LATIN4 (U+012E, Į)
	case 0x3cc: return "latin.capital.letter.e.with.dot.above"; // XK_LATIN4 (U+0116, Ė)
	case 0x3cf: return "latin.capital.letter.i.with.macron"; // XK_LATIN4 (U+012A, Ī)
	case 0x3d1: return "latin.capital.letter.n.with.cedilla"; // XK_LATIN4 (U+0145, Ņ)
	case 0x3d2: return "latin.capital.letter.o.with.macron"; // XK_LATIN4 (U+014C, Ō)
	case 0x3d3: return "latin.capital.letter.k.with.cedilla"; // XK_LATIN4 (U+0136, Ķ)
	case 0x3d9: return "latin.capital.letter.u.with.ogonek"; // XK_LATIN4 (U+0172, Ų)
	case 0x3dd: return "latin.capital.letter.u.with.tilde"; // XK_LATIN4 (U+0168, Ũ)
	case 0x3de: return "latin.capital.letter.u.with.macron"; // XK_LATIN4 (U+016A, Ū)
	case 0x3e0: return "latin.small.letter.a.with.macron"; // XK_LATIN4 (U+0101, ā)
	case 0x3e7: return "latin.small.letter.i.with.ogonek"; // XK_LATIN4 (U+012F, į)
	case 0x3ec: return "latin.small.letter.e.with.dot.above"; // XK_LATIN4 (U+0117, ė)
	case 0x3ef: return "latin.small.letter.i.with.macron"; // XK_LATIN4 (U+012B, ī)
	case 0x3f1: return "latin.small.letter.n.with.cedilla"; // XK_LATIN4 (U+0146, ņ)
	case 0x3f2: return "latin.small.letter.o.with.macron"; // XK_LATIN4 (U+014D, ō)
	case 0x3f3: return "latin.small.letter.k.with.cedilla"; // XK_LATIN4 (U+0137, ķ)
	case 0x3f9: return "latin.small.letter.u.with.ogonek"; // XK_LATIN4 (U+0173, ų)
	case 0x3fd: return "latin.small.letter.u.with.tilde"; // XK_LATIN4 (U+0169, ũ)
	case 0x3fe: return "latin.small.letter.u.with.macron"; // XK_LATIN4 (U+016B, ū)

	// XK_LATIN8

	case 0x1000174: return "latin.capital.letter.w.with.circumflex"; // XK_LATIN8 (U+0174, Ŵ)
	case 0x1000175: return "latin.small.letter.w.with.circumflex"; // XK_LATIN8 (U+0175, ŵ)
	case 0x1000176: return "latin.capital.letter.y.with.circumflex"; // XK_LATIN8 (U+0176, Ŷ)
	case 0x1000177: return "latin.small.letter.y.with.circumflex"; // XK_LATIN8 (U+0177, ŷ)
	case 0x1001e02: return "latin.capital.letter.b.with.dot.above"; // XK_LATIN8 (U+1E02, Ḃ)
	case 0x1001e03: return "latin.small.letter.b.with.dot.above"; // XK_LATIN8 (U+1E03, ḃ)
	case 0x1001e0a: return "latin.capital.letter.d.with.dot.above"; // XK_LATIN8 (U+1E0A, Ḋ)
	case 0x1001e0b: return "latin.small.letter.d.with.dot.above"; // XK_LATIN8 (U+1E0B, ḋ)
	case 0x1001e1e: return "latin.capital.letter.f.with.dot.above"; // XK_LATIN8 (U+1E1E, Ḟ)
	case 0x1001e1f: return "latin.small.letter.f.with.dot.above"; // XK_LATIN8 (U+1E1F, ḟ)
	case 0x1001e40: return "latin.capital.letter.m.with.dot.above"; // XK_LATIN8 (U+1E40, Ṁ)
	case 0x1001e41: return "latin.small.letter.m.with.dot.above"; // XK_LATIN8 (U+1E41, ṁ)
	case 0x1001e56: return "latin.capital.letter.p.with.dot.above"; // XK_LATIN8 (U+1E56, Ṗ)
	case 0x1001e57: return "latin.small.letter.p.with.dot.above"; // XK_LATIN8 (U+1E57, ṗ)
	case 0x1001e60: return "latin.capital.letter.s.with.dot.above"; // XK_LATIN8 (U+1E60, Ṡ)
	case 0x1001e61: return "latin.small.letter.s.with.dot.above"; // XK_LATIN8 (U+1E61, ṡ)
	case 0x1001e6a: return "latin.capital.letter.t.with.dot.above"; // XK_LATIN8 (U+1E6A, Ṫ)
	case 0x1001e6b: return "latin.small.letter.t.with.dot.above"; // XK_LATIN8 (U+1E6B, ṫ)
	case 0x1001e80: return "latin.capital.letter.w.with.grave"; // XK_LATIN8 (U+1E80, Ẁ)
	case 0x1001e81: return "latin.small.letter.w.with.grave"; // XK_LATIN8 (U+1E81, ẁ)
	case 0x1001e82: return "latin.capital.letter.w.with.acute"; // XK_LATIN8 (U+1E82, Ẃ)
	case 0x1001e83: return "latin.small.letter.w.with.acute"; // XK_LATIN8 (U+1E83, ẃ)
	case 0x1001e84: return "latin.capital.letter.w.with.diaeresis"; // XK_LATIN8 (U+1E84, Ẅ)
	case 0x1001e85: return "latin.small.letter.w.with.diaeresis"; // XK_LATIN8 (U+1E85, ẅ)
	case 0x1001ef2: return "latin.capital.letter.y.with.grave"; // XK_LATIN8 (U+1EF2, Ỳ)
	case 0x1001ef3: return "latin.small.letter.y.with.grave"; // XK_LATIN8 (U+1EF3, ỳ)

	// XK_LATIN9

	case 0x13bc: return "latin.capital.ligature.oe"; // XK_LATIN9 (U+0152, Œ)
	case 0x13bd: return "latin.small.ligature.oe"; // XK_LATIN9 (U+0153, œ)
	case 0x13be: return "latin.capital.letter.y.with.diaeresis"; // XK_LATIN9 (U+0178, Ÿ)

	// XK_KATAKANA

	case 0x47e: return "overline"; // XK_KATAKANA (U+203E, ‾)
	case 0x4a1: return "ideographic.full.stop"; // XK_KATAKANA (U+3002, 。)
	case 0x4a2: return "left.corner.bracket"; // XK_KATAKANA (U+300C, 「)
	case 0x4a3: return "right.corner.bracket"; // XK_KATAKANA (U+300D, 」)
	case 0x4a4: return "ideographic.comma"; // XK_KATAKANA (U+3001, 、)
	case 0x4a5: return "katakana.middle.dot"; // XK_KATAKANA (U+30FB, ・)
	case 0x4a6: return "katakana.letter.wo"; // XK_KATAKANA (U+30F2, ヲ)
	case 0x4a7: return "katakana.letter.small.a"; // XK_KATAKANA (U+30A1, ァ)
	case 0x4a8: return "katakana.letter.small.i"; // XK_KATAKANA (U+30A3, ィ)
	case 0x4a9: return "katakana.letter.small.u"; // XK_KATAKANA (U+30A5, ゥ)
	case 0x4aa: return "katakana.letter.small.e"; // XK_KATAKANA (U+30A7, ェ)
	case 0x4ab: return "katakana.letter.small.o"; // XK_KATAKANA (U+30A9, ォ)
	case 0x4ac: return "katakana.letter.small.ya"; // XK_KATAKANA (U+30E3, ャ)
	case 0x4ad: return "katakana.letter.small.yu"; // XK_KATAKANA (U+30E5, ュ)
	case 0x4ae: return "katakana.letter.small.yo"; // XK_KATAKANA (U+30E7, ョ)
	case 0x4af: return "katakana.letter.small.tu"; // XK_KATAKANA (U+30C3, ッ)
	case 0x4b0: return "katakana_hiragana.prolonged.sound.mark"; // XK_KATAKANA (U+30FC, ー)
	case 0x4b1: return "katakana.letter.a"; // XK_KATAKANA (U+30A2, ア)
	case 0x4b2: return "katakana.letter.i"; // XK_KATAKANA (U+30A4, イ)
	case 0x4b3: return "katakana.letter.u"; // XK_KATAKANA (U+30A6, ウ)
	case 0x4b4: return "katakana.letter.e"; // XK_KATAKANA (U+30A8, エ)
	case 0x4b5: return "katakana.letter.o"; // XK_KATAKANA (U+30AA, オ)
	case 0x4b6: return "katakana.letter.ka"; // XK_KATAKANA (U+30AB, カ)
	case 0x4b7: return "katakana.letter.ki"; // XK_KATAKANA (U+30AD, キ)
	case 0x4b8: return "katakana.letter.ku"; // XK_KATAKANA (U+30AF, ク)
	case 0x4b9: return "katakana.letter.ke"; // XK_KATAKANA (U+30B1, ケ)
	case 0x4ba: return "katakana.letter.ko"; // XK_KATAKANA (U+30B3, コ)
	case 0x4bb: return "katakana.letter.sa"; // XK_KATAKANA (U+30B5, サ)
	case 0x4bc: return "katakana.letter.si"; // XK_KATAKANA (U+30B7, シ)
	case 0x4bd: return "katakana.letter.su"; // XK_KATAKANA (U+30B9, ス)
	case 0x4be: return "katakana.letter.se"; // XK_KATAKANA (U+30BB, セ)
	case 0x4bf: return "katakana.letter.so"; // XK_KATAKANA (U+30BD, ソ)
	case 0x4c0: return "katakana.letter.ta"; // XK_KATAKANA (U+30BF, タ)
	case 0x4c1: return "katakana.letter.ti"; // XK_KATAKANA (U+30C1, チ)
	case 0x4c2: return "katakana.letter.tu"; // XK_KATAKANA (U+30C4, ツ)
	case 0x4c3: return "katakana.letter.te"; // XK_KATAKANA (U+30C6, テ)
	case 0x4c4: return "katakana.letter.to"; // XK_KATAKANA (U+30C8, ト)
	case 0x4c5: return "katakana.letter.na"; // XK_KATAKANA (U+30CA, ナ)
	case 0x4c6: return "katakana.letter.ni"; // XK_KATAKANA (U+30CB, ニ)
	case 0x4c7: return "katakana.letter.nu"; // XK_KATAKANA (U+30CC, ヌ)
	case 0x4c8: return "katakana.letter.ne"; // XK_KATAKANA (U+30CD, ネ)
	case 0x4c9: return "katakana.letter.no"; // XK_KATAKANA (U+30CE, ノ)
	case 0x4ca: return "katakana.letter.ha"; // XK_KATAKANA (U+30CF, ハ)
	case 0x4cb: return "katakana.letter.hi"; // XK_KATAKANA (U+30D2, ヒ)
	case 0x4cc: return "katakana.letter.hu"; // XK_KATAKANA (U+30D5, フ)
	case 0x4cd: return "katakana.letter.he"; // XK_KATAKANA (U+30D8, ヘ)
	case 0x4ce: return "katakana.letter.ho"; // XK_KATAKANA (U+30DB, ホ)
	case 0x4cf: return "katakana.letter.ma"; // XK_KATAKANA (U+30DE, マ)
	case 0x4d0: return "katakana.letter.mi"; // XK_KATAKANA (U+30DF, ミ)
	case 0x4d1: return "katakana.letter.mu"; // XK_KATAKANA (U+30E0, ム)
	case 0x4d2: return "katakana.letter.me"; // XK_KATAKANA (U+30E1, メ)
	case 0x4d3: return "katakana.letter.mo"; // XK_KATAKANA (U+30E2, モ)
	case 0x4d4: return "katakana.letter.ya"; // XK_KATAKANA (U+30E4, ヤ)
	case 0x4d5: return "katakana.letter.yu"; // XK_KATAKANA (U+30E6, ユ)
	case 0x4d6: return "katakana.letter.yo"; // XK_KATAKANA (U+30E8, ヨ)
	case 0x4d7: return "katakana.letter.ra"; // XK_KATAKANA (U+30E9, ラ)
	case 0x4d8: return "katakana.letter.ri"; // XK_KATAKANA (U+30EA, リ)
	case 0x4d9: return "katakana.letter.ru"; // XK_KATAKANA (U+30EB, ル)
	case 0x4da: return "katakana.letter.re"; // XK_KATAKANA (U+30EC, レ)
	case 0x4db: return "katakana.letter.ro"; // XK_KATAKANA (U+30ED, ロ)
	case 0x4dc: return "katakana.letter.wa"; // XK_KATAKANA (U+30EF, ワ)
	case 0x4dd: return "katakana.letter.n"; // XK_KATAKANA (U+30F3, ン)
	case 0x4de: return "katakana_hiragana.voiced.sound.mark"; // XK_KATAKANA (U+309B, ゛)
	case 0x4df: return "katakana_hiragana.semi_voiced.sound.mark"; // XK_KATAKANA (U+309C, ゜)

	// XK_ARABIC

	case 0x10006f0: return "extended.arabic_indic.digit.zero"; // XK_ARABIC (U+06F0, ۰)
	case 0x10006f1: return "extended.arabic_indic.digit.one"; // XK_ARABIC (U+06F1, ۱)
	case 0x10006f2: return "extended.arabic_indic.digit.two"; // XK_ARABIC (U+06F2, ۲)
	case 0x10006f3: return "extended.arabic_indic.digit.three"; // XK_ARABIC (U+06F3, ۳)
	case 0x10006f4: return "extended.arabic_indic.digit.four"; // XK_ARABIC (U+06F4, ۴)
	case 0x10006f5: return "extended.arabic_indic.digit.five"; // XK_ARABIC (U+06F5, ۵)
	case 0x10006f6: return "extended.arabic_indic.digit.six"; // XK_ARABIC (U+06F6, ۶)
	case 0x10006f7: return "extended.arabic_indic.digit.seven"; // XK_ARABIC (U+06F7, ۷)
	case 0x10006f8: return "extended.arabic_indic.digit.eight"; // XK_ARABIC (U+06F8, ۸)
	case 0x10006f9: return "extended.arabic_indic.digit.nine"; // XK_ARABIC (U+06F9, ۹)
	case 0x100066a: return "arabic.percent.sign"; // XK_ARABIC (U+066A, ٪)
	case 0x1000670: return "arabic.letter.superscript.alef"; // XK_ARABIC (U+0670, ٰ)
	case 0x1000679: return "arabic.letter.tteh"; // XK_ARABIC (U+0679, ٹ)
	case 0x100067e: return "arabic.letter.peh"; // XK_ARABIC (U+067E, پ)
	case 0x1000686: return "arabic.letter.tcheh"; // XK_ARABIC (U+0686, چ)
	case 0x1000688: return "arabic.letter.ddal"; // XK_ARABIC (U+0688, ڈ)
	case 0x1000691: return "arabic.letter.rreh"; // XK_ARABIC (U+0691, ڑ)
	case 0x5ac: return "arabic.comma"; // XK_ARABIC (U+060C, ،)
	case 0x10006d4: return "arabic.full.stop"; // XK_ARABIC (U+06D4, ۔)
	case 0x1000660: return "arabic_indic.digit.zero"; // XK_ARABIC (U+0660, ٠)
	case 0x1000661: return "arabic_indic.digit.one"; // XK_ARABIC (U+0661, ١)
	case 0x1000662: return "arabic_indic.digit.two"; // XK_ARABIC (U+0662, ٢)
	case 0x1000663: return "arabic_indic.digit.three"; // XK_ARABIC (U+0663, ٣)
	case 0x1000664: return "arabic_indic.digit.four"; // XK_ARABIC (U+0664, ٤)
	case 0x1000665: return "arabic_indic.digit.five"; // XK_ARABIC (U+0665, ٥)
	case 0x1000666: return "arabic_indic.digit.six"; // XK_ARABIC (U+0666, ٦)
	case 0x1000667: return "arabic_indic.digit.seven"; // XK_ARABIC (U+0667, ٧)
	case 0x1000668: return "arabic_indic.digit.eight"; // XK_ARABIC (U+0668, ٨)
	case 0x1000669: return "arabic_indic.digit.nine"; // XK_ARABIC (U+0669, ٩)
	case 0x5bb: return "arabic.semicolon"; // XK_ARABIC (U+061B, ؛)
	case 0x5bf: return "arabic.question.mark"; // XK_ARABIC (U+061F, ؟)
	case 0x5c1: return "arabic.letter.hamza"; // XK_ARABIC (U+0621, ء)
	case 0x5c2: return "arabic.letter.alef.with.madda.above"; // XK_ARABIC (U+0622, آ)
	case 0x5c3: return "arabic.letter.alef.with.hamza.above"; // XK_ARABIC (U+0623, أ)
	case 0x5c4: return "arabic.letter.waw.with.hamza.above"; // XK_ARABIC (U+0624, ؤ)
	case 0x5c5: return "arabic.letter.alef.with.hamza.below"; // XK_ARABIC (U+0625, إ)
	case 0x5c6: return "arabic.letter.yeh.with.hamza.above"; // XK_ARABIC (U+0626, ئ)
	case 0x5c7: return "arabic.letter.alef"; // XK_ARABIC (U+0627, ا)
	case 0x5c8: return "arabic.letter.beh"; // XK_ARABIC (U+0628, ب)
	case 0x5c9: return "arabic.letter.teh.marbuta"; // XK_ARABIC (U+0629, ة)
	case 0x5ca: return "arabic.letter.teh"; // XK_ARABIC (U+062A, ت)
	case 0x5cb: return "arabic.letter.theh"; // XK_ARABIC (U+062B, ث)
	case 0x5cc: return "arabic.letter.jeem"; // XK_ARABIC (U+062C, ج)
	case 0x5cd: return "arabic.letter.hah"; // XK_ARABIC (U+062D, ح)
	case 0x5ce: return "arabic.letter.khah"; // XK_ARABIC (U+062E, خ)
	case 0x5cf: return "arabic.letter.dal"; // XK_ARABIC (U+062F, د)
	case 0x5d0: return "arabic.letter.thal"; // XK_ARABIC (U+0630, ذ)
	case 0x5d1: return "arabic.letter.reh"; // XK_ARABIC (U+0631, ر)
	case 0x5d2: return "arabic.letter.zain"; // XK_ARABIC (U+0632, ز)
	case 0x5d3: return "arabic.letter.seen"; // XK_ARABIC (U+0633, س)
	case 0x5d4: return "arabic.letter.sheen"; // XK_ARABIC (U+0634, ش)
	case 0x5d5: return "arabic.letter.sad"; // XK_ARABIC (U+0635, ص)
	case 0x5d6: return "arabic.letter.dad"; // XK_ARABIC (U+0636, ض)
	case 0x5d7: return "arabic.letter.tah"; // XK_ARABIC (U+0637, ط)
	case 0x5d8: return "arabic.letter.zah"; // XK_ARABIC (U+0638, ظ)
	case 0x5d9: return "arabic.letter.ain"; // XK_ARABIC (U+0639, ع)
	case 0x5da: return "arabic.letter.ghain"; // XK_ARABIC (U+063A, غ)
	case 0x5e0: return "arabic.tatweel"; // XK_ARABIC (U+0640, ـ)
	case 0x5e1: return "arabic.letter.feh"; // XK_ARABIC (U+0641, ف)
	case 0x5e2: return "arabic.letter.qaf"; // XK_ARABIC (U+0642, ق)
	case 0x5e3: return "arabic.letter.kaf"; // XK_ARABIC (U+0643, ك)
	case 0x5e4: return "arabic.letter.lam"; // XK_ARABIC (U+0644, ل)
	case 0x5e5: return "arabic.letter.meem"; // XK_ARABIC (U+0645, م)
	case 0x5e6: return "arabic.letter.noon"; // XK_ARABIC (U+0646, ن)
	case 0x5e7: return "arabic.letter.heh"; // XK_ARABIC (U+0647, ه)
	case 0x5e8: return "arabic.letter.waw"; // XK_ARABIC (U+0648, و)
	case 0x5e9: return "arabic.letter.alef.maksura"; // XK_ARABIC (U+0649, ى)
	case 0x5ea: return "arabic.letter.yeh"; // XK_ARABIC (U+064A, ي)
	case 0x5eb: return "arabic.fathatan"; // XK_ARABIC (U+064B, ً)
	case 0x5ec: return "arabic.dammatan"; // XK_ARABIC (U+064C, ٌ)
	case 0x5ed: return "arabic.kasratan"; // XK_ARABIC (U+064D, ٍ)
	case 0x5ee: return "arabic.fatha"; // XK_ARABIC (U+064E, َ)
	case 0x5ef: return "arabic.damma"; // XK_ARABIC (U+064F, ُ)
	case 0x5f0: return "arabic.kasra"; // XK_ARABIC (U+0650, ِ)
	case 0x5f1: return "arabic.shadda"; // XK_ARABIC (U+0651, ّ)
	case 0x5f2: return "arabic.sukun"; // XK_ARABIC (U+0652, ْ)
	case 0x1000653: return "arabic.maddah.above"; // XK_ARABIC (U+0653, ٓ)
	case 0x1000654: return "arabic.hamza.above"; // XK_ARABIC (U+0654, ٔ)
	case 0x1000655: return "arabic.hamza.below"; // XK_ARABIC (U+0655, ٕ)
	case 0x1000698: return "arabic.letter.jeh"; // XK_ARABIC (U+0698, ژ)
	case 0x10006a4: return "arabic.letter.veh"; // XK_ARABIC (U+06A4, ڤ)
	case 0x10006a9: return "arabic.letter.keheh"; // XK_ARABIC (U+06A9, ک)
	case 0x10006af: return "arabic.letter.gaf"; // XK_ARABIC (U+06AF, گ)
	case 0x10006ba: return "arabic.letter.noon.ghunna"; // XK_ARABIC (U+06BA, ں)
	case 0x10006be: return "arabic.letter.heh.doachashmee"; // XK_ARABIC (U+06BE, ھ)
	case 0x10006cc: return "arabic.letter.farsi.yeh"; // XK_ARABIC (U+06CC, ی)
	case 0x10006d2: return "arabic.letter.yeh.barree"; // XK_ARABIC (U+06D2, ے)
	case 0x10006c1: return "arabic.letter.heh.goal"; // XK_ARABIC (U+06C1, ہ)

	// XK_CYRILLIC

	case 0x1000492: return "cyrillic.capital.letter.ghe.with.stroke"; // XK_CYRILLIC (U+0492, Ғ)
	case 0x1000493: return "cyrillic.small.letter.ghe.with.stroke"; // XK_CYRILLIC (U+0493, ғ)
	case 0x1000496: return "cyrillic.capital.letter.zhe.with.descender"; // XK_CYRILLIC (U+0496, Җ)
	case 0x1000497: return "cyrillic.small.letter.zhe.with.descender"; // XK_CYRILLIC (U+0497, җ)
	case 0x100049a: return "cyrillic.capital.letter.ka.with.descender"; // XK_CYRILLIC (U+049A, Қ)
	case 0x100049b: return "cyrillic.small.letter.ka.with.descender"; // XK_CYRILLIC (U+049B, қ)
	case 0x100049c: return "cyrillic.capital.letter.ka.with.vertical.stroke"; // XK_CYRILLIC (U+049C, Ҝ)
	case 0x100049d: return "cyrillic.small.letter.ka.with.vertical.stroke"; // XK_CYRILLIC (U+049D, ҝ)
	case 0x10004a2: return "cyrillic.capital.letter.en.with.descender"; // XK_CYRILLIC (U+04A2, Ң)
	case 0x10004a3: return "cyrillic.small.letter.en.with.descender"; // XK_CYRILLIC (U+04A3, ң)
	case 0x10004ae: return "cyrillic.capital.letter.straight.u"; // XK_CYRILLIC (U+04AE, Ү)
	case 0x10004af: return "cyrillic.small.letter.straight.u"; // XK_CYRILLIC (U+04AF, ү)
	case 0x10004b0: return "cyrillic.capital.letter.straight.u.with.stroke"; // XK_CYRILLIC (U+04B0, Ұ)
	case 0x10004b1: return "cyrillic.small.letter.straight.u.with.stroke"; // XK_CYRILLIC (U+04B1, ұ)
	case 0x10004b2: return "cyrillic.capital.letter.ha.with.descender"; // XK_CYRILLIC (U+04B2, Ҳ)
	case 0x10004b3: return "cyrillic.small.letter.ha.with.descender"; // XK_CYRILLIC (U+04B3, ҳ)
	case 0x10004b6: return "cyrillic.capital.letter.che.with.descender"; // XK_CYRILLIC (U+04B6, Ҷ)
	case 0x10004b7: return "cyrillic.small.letter.che.with.descender"; // XK_CYRILLIC (U+04B7, ҷ)
	case 0x10004b8: return "cyrillic.capital.letter.che.with.vertical.stroke"; // XK_CYRILLIC (U+04B8, Ҹ)
	case 0x10004b9: return "cyrillic.small.letter.che.with.vertical.stroke"; // XK_CYRILLIC (U+04B9, ҹ)
	case 0x10004ba: return "cyrillic.capital.letter.shha"; // XK_CYRILLIC (U+04BA, Һ)
	case 0x10004bb: return "cyrillic.small.letter.shha"; // XK_CYRILLIC (U+04BB, һ)
	case 0x10004d8: return "cyrillic.capital.letter.schwa"; // XK_CYRILLIC (U+04D8, Ә)
	case 0x10004d9: return "cyrillic.small.letter.schwa"; // XK_CYRILLIC (U+04D9, ә)
	case 0x10004e2: return "cyrillic.capital.letter.i.with.macron"; // XK_CYRILLIC (U+04E2, Ӣ)
	case 0x10004e3: return "cyrillic.small.letter.i.with.macron"; // XK_CYRILLIC (U+04E3, ӣ)
	case 0x10004e8: return "cyrillic.capital.letter.barred.o"; // XK_CYRILLIC (U+04E8, Ө)
	case 0x10004e9: return "cyrillic.small.letter.barred.o"; // XK_CYRILLIC (U+04E9, ө)
	case 0x10004ee: return "cyrillic.capital.letter.u.with.macron"; // XK_CYRILLIC (U+04EE, Ӯ)
	case 0x10004ef: return "cyrillic.small.letter.u.with.macron"; // XK_CYRILLIC (U+04EF, ӯ)
	case 0x6a1: return "cyrillic.small.letter.dje"; // XK_CYRILLIC (U+0452, ђ)
	case 0x6a2: return "cyrillic.small.letter.gje"; // XK_CYRILLIC (U+0453, ѓ)
	case 0x6a3: return "cyrillic.small.letter.io"; // XK_CYRILLIC (U+0451, ё)
	case 0x6a4: return "cyrillic.small.letter.ukrainian.ie"; // XK_CYRILLIC (U+0454, є)
	case 0x6a5: return "cyrillic.small.letter.dze"; // XK_CYRILLIC (U+0455, ѕ)
	case 0x6a6: return "cyrillic.small.letter.byelorussian_ukrainian.i"; // XK_CYRILLIC (U+0456, і)
	case 0x6a7: return "cyrillic.small.letter.yi"; // XK_CYRILLIC (U+0457, ї)
	case 0x6a8: return "cyrillic.small.letter.je"; // XK_CYRILLIC (U+0458, ј)
	case 0x6a9: return "cyrillic.small.letter.lje"; // XK_CYRILLIC (U+0459, љ)
	case 0x6aa: return "cyrillic.small.letter.nje"; // XK_CYRILLIC (U+045A, њ)
	case 0x6ab: return "cyrillic.small.letter.tshe"; // XK_CYRILLIC (U+045B, ћ)
	case 0x6ac: return "cyrillic.small.letter.kje"; // XK_CYRILLIC (U+045C, ќ)
	case 0x6ad: return "cyrillic.small.letter.ghe.with.upturn"; // XK_CYRILLIC (U+0491, ґ)
	case 0x6ae: return "cyrillic.small.letter.short.u"; // XK_CYRILLIC (U+045E, ў)
	case 0x6af: return "cyrillic.small.letter.dzhe"; // XK_CYRILLIC (U+045F, џ)
	case 0x6b0: return "numero.sign"; // XK_CYRILLIC (U+2116, №)
	case 0x6b1: return "cyrillic.capital.letter.dje"; // XK_CYRILLIC (U+0402, Ђ)
	case 0x6b2: return "cyrillic.capital.letter.gje"; // XK_CYRILLIC (U+0403, Ѓ)
	case 0x6b3: return "cyrillic.capital.letter.io"; // XK_CYRILLIC (U+0401, Ё)
	case 0x6b4: return "cyrillic.capital.letter.ukrainian.ie"; // XK_CYRILLIC (U+0404, Є)
	case 0x6b5: return "cyrillic.capital.letter.dze"; // XK_CYRILLIC (U+0405, Ѕ)
	case 0x6b6: return "cyrillic.capital.letter.byelorussian_ukrainian.i"; // XK_CYRILLIC (U+0406, І)
	case 0x6b7: return "cyrillic.capital.letter.yi"; // XK_CYRILLIC (U+0407, Ї)
	case 0x6b8: return "cyrillic.capital.letter.je"; // XK_CYRILLIC (U+0408, Ј)
	case 0x6b9: return "cyrillic.capital.letter.lje"; // XK_CYRILLIC (U+0409, Љ)
	case 0x6ba: return "cyrillic.capital.letter.nje"; // XK_CYRILLIC (U+040A, Њ)
	case 0x6bb: return "cyrillic.capital.letter.tshe"; // XK_CYRILLIC (U+040B, Ћ)
	case 0x6bc: return "cyrillic.capital.letter.kje"; // XK_CYRILLIC (U+040C, Ќ)
	case 0x6bd: return "cyrillic.capital.letter.ghe.with.upturn"; // XK_CYRILLIC (U+0490, Ґ)
	case 0x6be: return "cyrillic.capital.letter.short.u"; // XK_CYRILLIC (U+040E, Ў)
	case 0x6bf: return "cyrillic.capital.letter.dzhe"; // XK_CYRILLIC (U+040F, Џ)
	case 0x6c0: return "cyrillic.small.letter.yu"; // XK_CYRILLIC (U+044E, ю)
	case 0x6c1: return "cyrillic.small.letter.a"; // XK_CYRILLIC (U+0430, а)
	case 0x6c2: return "cyrillic.small.letter.be"; // XK_CYRILLIC (U+0431, б)
	case 0x6c3: return "cyrillic.small.letter.tse"; // XK_CYRILLIC (U+0446, ц)
	case 0x6c4: return "cyrillic.small.letter.de"; // XK_CYRILLIC (U+0434, д)
	case 0x6c5: return "cyrillic.small.letter.ie"; // XK_CYRILLIC (U+0435, е)
	case 0x6c6: return "cyrillic.small.letter.ef"; // XK_CYRILLIC (U+0444, ф)
	case 0x6c7: return "cyrillic.small.letter.ghe"; // XK_CYRILLIC (U+0433, г)
	case 0x6c8: return "cyrillic.small.letter.ha"; // XK_CYRILLIC (U+0445, х)
	case 0x6c9: return "cyrillic.small.letter.i"; // XK_CYRILLIC (U+0438, и)
	case 0x6ca: return "cyrillic.small.letter.short.i"; // XK_CYRILLIC (U+0439, й)
	case 0x6cb: return "cyrillic.small.letter.ka"; // XK_CYRILLIC (U+043A, к)
	case 0x6cc: return "cyrillic.small.letter.el"; // XK_CYRILLIC (U+043B, л)
	case 0x6cd: return "cyrillic.small.letter.em"; // XK_CYRILLIC (U+043C, м)
	case 0x6ce: return "cyrillic.small.letter.en"; // XK_CYRILLIC (U+043D, н)
	case 0x6cf: return "cyrillic.small.letter.o"; // XK_CYRILLIC (U+043E, о)
	case 0x6d0: return "cyrillic.small.letter.pe"; // XK_CYRILLIC (U+043F, п)
	case 0x6d1: return "cyrillic.small.letter.ya"; // XK_CYRILLIC (U+044F, я)
	case 0x6d2: return "cyrillic.small.letter.er"; // XK_CYRILLIC (U+0440, р)
	case 0x6d3: return "cyrillic.small.letter.es"; // XK_CYRILLIC (U+0441, с)
	case 0x6d4: return "cyrillic.small.letter.te"; // XK_CYRILLIC (U+0442, т)
	case 0x6d5: return "cyrillic.small.letter.u"; // XK_CYRILLIC (U+0443, у)
	case 0x6d6: return "cyrillic.small.letter.zhe"; // XK_CYRILLIC (U+0436, ж)
	case 0x6d7: return "cyrillic.small.letter.ve"; // XK_CYRILLIC (U+0432, в)
	case 0x6d8: return "cyrillic.small.letter.soft.sign"; // XK_CYRILLIC (U+044C, ь)
	case 0x6d9: return "cyrillic.small.letter.yeru"; // XK_CYRILLIC (U+044B, ы)
	case 0x6da: return "cyrillic.small.letter.ze"; // XK_CYRILLIC (U+0437, з)
	case 0x6db: return "cyrillic.small.letter.sha"; // XK_CYRILLIC (U+0448, ш)
	case 0x6dc: return "cyrillic.small.letter.e"; // XK_CYRILLIC (U+044D, э)
	case 0x6dd: return "cyrillic.small.letter.shcha"; // XK_CYRILLIC (U+0449, щ)
	case 0x6de: return "cyrillic.small.letter.che"; // XK_CYRILLIC (U+0447, ч)
	case 0x6df: return "cyrillic.small.letter.hard.sign"; // XK_CYRILLIC (U+044A, ъ)
	case 0x6e0: return "cyrillic.capital.letter.yu"; // XK_CYRILLIC (U+042E, Ю)
	case 0x6e1: return "cyrillic.capital.letter.a"; // XK_CYRILLIC (U+0410, А)
	case 0x6e2: return "cyrillic.capital.letter.be"; // XK_CYRILLIC (U+0411, Б)
	case 0x6e3: return "cyrillic.capital.letter.tse"; // XK_CYRILLIC (U+0426, Ц)
	case 0x6e4: return "cyrillic.capital.letter.de"; // XK_CYRILLIC (U+0414, Д)
	case 0x6e5: return "cyrillic.capital.letter.ie"; // XK_CYRILLIC (U+0415, Е)
	case 0x6e6: return "cyrillic.capital.letter.ef"; // XK_CYRILLIC (U+0424, Ф)
	case 0x6e7: return "cyrillic.capital.letter.ghe"; // XK_CYRILLIC (U+0413, Г)
	case 0x6e8: return "cyrillic.capital.letter.ha"; // XK_CYRILLIC (U+0425, Х)
	case 0x6e9: return "cyrillic.capital.letter.i"; // XK_CYRILLIC (U+0418, И)
	case 0x6ea: return "cyrillic.capital.letter.short.i"; // XK_CYRILLIC (U+0419, Й)
	case 0x6eb: return "cyrillic.capital.letter.ka"; // XK_CYRILLIC (U+041A, К)
	case 0x6ec: return "cyrillic.capital.letter.el"; // XK_CYRILLIC (U+041B, Л)
	case 0x6ed: return "cyrillic.capital.letter.em"; // XK_CYRILLIC (U+041C, М)
	case 0x6ee: return "cyrillic.capital.letter.en"; // XK_CYRILLIC (U+041D, Н)
	case 0x6ef: return "cyrillic.capital.letter.o"; // XK_CYRILLIC (U+041E, О)
	case 0x6f0: return "cyrillic.capital.letter.pe"; // XK_CYRILLIC (U+041F, П)
	case 0x6f1: return "cyrillic.capital.letter.ya"; // XK_CYRILLIC (U+042F, Я)
	case 0x6f2: return "cyrillic.capital.letter.er"; // XK_CYRILLIC (U+0420, Р)
	case 0x6f3: return "cyrillic.capital.letter.es"; // XK_CYRILLIC (U+0421, С)
	case 0x6f4: return "cyrillic.capital.letter.te"; // XK_CYRILLIC (U+0422, Т)
	case 0x6f5: return "cyrillic.capital.letter.u"; // XK_CYRILLIC (U+0423, У)
	case 0x6f6: return "cyrillic.capital.letter.zhe"; // XK_CYRILLIC (U+0416, Ж)
	case 0x6f7: return "cyrillic.capital.letter.ve"; // XK_CYRILLIC (U+0412, В)
	case 0x6f8: return "cyrillic.capital.letter.soft.sign"; // XK_CYRILLIC (U+042C, Ь)
	case 0x6f9: return "cyrillic.capital.letter.yeru"; // XK_CYRILLIC (U+042B, Ы)
	case 0x6fa: return "cyrillic.capital.letter.ze"; // XK_CYRILLIC (U+0417, З)
	case 0x6fb: return "cyrillic.capital.letter.sha"; // XK_CYRILLIC (U+0428, Ш)
	case 0x6fc: return "cyrillic.capital.letter.e"; // XK_CYRILLIC (U+042D, Э)
	case 0x6fd: return "cyrillic.capital.letter.shcha"; // XK_CYRILLIC (U+0429, Щ)
	case 0x6fe: return "cyrillic.capital.letter.che"; // XK_CYRILLIC (U+0427, Ч)
	case 0x6ff: return "cyrillic.capital.letter.hard.sign"; // XK_CYRILLIC (U+042A, Ъ)

	// XK_GREEK

	case 0x7a1: return "greek.capital.letter.alpha.with.tonos"; // XK_GREEK (U+0386, Ά)
	case 0x7a2: return "greek.capital.letter.epsilon.with.tonos"; // XK_GREEK (U+0388, Έ)
	case 0x7a3: return "greek.capital.letter.eta.with.tonos"; // XK_GREEK (U+0389, Ή)
	case 0x7a4: return "greek.capital.letter.iota.with.tonos"; // XK_GREEK (U+038A, Ί)
	case 0x7a5: return "greek.capital.letter.iota.with.dialytika"; // XK_GREEK (U+03AA, Ϊ)
	case 0x7a7: return "greek.capital.letter.omicron.with.tonos"; // XK_GREEK (U+038C, Ό)
	case 0x7a8: return "greek.capital.letter.upsilon.with.tonos"; // XK_GREEK (U+038E, Ύ)
	case 0x7a9: return "greek.capital.letter.upsilon.with.dialytika"; // XK_GREEK (U+03AB, Ϋ)
	case 0x7ab: return "greek.capital.letter.omega.with.tonos"; // XK_GREEK (U+038F, Ώ)
	case 0x7ae: return "greek.dialytika.tonos"; // XK_GREEK (U+0385, ΅)
	case 0x7af: return "horizontal.bar"; // XK_GREEK (U+2015, ―)
	case 0x7b1: return "greek.small.letter.alpha.with.tonos"; // XK_GREEK (U+03AC, ά)
	case 0x7b2: return "greek.small.letter.epsilon.with.tonos"; // XK_GREEK (U+03AD, έ)
	case 0x7b3: return "greek.small.letter.eta.with.tonos"; // XK_GREEK (U+03AE, ή)
	case 0x7b4: return "greek.small.letter.iota.with.tonos"; // XK_GREEK (U+03AF, ί)
	case 0x7b5: return "greek.small.letter.iota.with.dialytika"; // XK_GREEK (U+03CA, ϊ)
	case 0x7b6: return "greek.small.letter.iota.with.dialytika.and.tonos"; // XK_GREEK (U+0390, ΐ)
	case 0x7b7: return "greek.small.letter.omicron.with.tonos"; // XK_GREEK (U+03CC, ό)
	case 0x7b8: return "greek.small.letter.upsilon.with.tonos"; // XK_GREEK (U+03CD, ύ)
	case 0x7b9: return "greek.small.letter.upsilon.with.dialytika"; // XK_GREEK (U+03CB, ϋ)
	case 0x7ba: return "greek.small.letter.upsilon.with.dialytika.and.tonos"; // XK_GREEK (U+03B0, ΰ)
	case 0x7bb: return "greek.small.letter.omega.with.tonos"; // XK_GREEK (U+03CE, ώ)
	case 0x7c1: return "greek.capital.letter.alpha"; // XK_GREEK (U+0391, Α)
	case 0x7c2: return "greek.capital.letter.beta"; // XK_GREEK (U+0392, Β)
	case 0x7c3: return "greek.capital.letter.gamma"; // XK_GREEK (U+0393, Γ)
	case 0x7c4: return "greek.capital.letter.delta"; // XK_GREEK (U+0394, Δ)
	case 0x7c5: return "greek.capital.letter.epsilon"; // XK_GREEK (U+0395, Ε)
	case 0x7c6: return "greek.capital.letter.zeta"; // XK_GREEK (U+0396, Ζ)
	case 0x7c7: return "greek.capital.letter.eta"; // XK_GREEK (U+0397, Η)
	case 0x7c8: return "greek.capital.letter.theta"; // XK_GREEK (U+0398, Θ)
	case 0x7c9: return "greek.capital.letter.iota"; // XK_GREEK (U+0399, Ι)
	case 0x7ca: return "greek.capital.letter.kappa"; // XK_GREEK (U+039A, Κ)
	case 0x7cb: return "greek.capital.letter.lamda"; // XK_GREEK (U+039B, Λ)
	case 0x7cc: return "greek.capital.letter.mu"; // XK_GREEK (U+039C, Μ)
	case 0x7cd: return "greek.capital.letter.nu"; // XK_GREEK (U+039D, Ν)
	case 0x7ce: return "greek.capital.letter.xi"; // XK_GREEK (U+039E, Ξ)
	case 0x7cf: return "greek.capital.letter.omicron"; // XK_GREEK (U+039F, Ο)
	case 0x7d0: return "greek.capital.letter.pi"; // XK_GREEK (U+03A0, Π)
	case 0x7d1: return "greek.capital.letter.rho"; // XK_GREEK (U+03A1, Ρ)
	case 0x7d2: return "greek.capital.letter.sigma"; // XK_GREEK (U+03A3, Σ)
	case 0x7d4: return "greek.capital.letter.tau"; // XK_GREEK (U+03A4, Τ)
	case 0x7d5: return "greek.capital.letter.upsilon"; // XK_GREEK (U+03A5, Υ)
	case 0x7d6: return "greek.capital.letter.phi"; // XK_GREEK (U+03A6, Φ)
	case 0x7d7: return "greek.capital.letter.chi"; // XK_GREEK (U+03A7, Χ)
	case 0x7d8: return "greek.capital.letter.psi"; // XK_GREEK (U+03A8, Ψ)
	case 0x7d9: return "greek.capital.letter.omega"; // XK_GREEK (U+03A9, Ω)
	case 0x7e1: return "greek.small.letter.alpha"; // XK_GREEK (U+03B1, α)
	case 0x7e2: return "greek.small.letter.beta"; // XK_GREEK (U+03B2, β)
	case 0x7e3: return "greek.small.letter.gamma"; // XK_GREEK (U+03B3, γ)
	case 0x7e4: return "greek.small.letter.delta"; // XK_GREEK (U+03B4, δ)
	case 0x7e5: return "greek.small.letter.epsilon"; // XK_GREEK (U+03B5, ε)
	case 0x7e6: return "greek.small.letter.zeta"; // XK_GREEK (U+03B6, ζ)
	case 0x7e7: return "greek.small.letter.eta"; // XK_GREEK (U+03B7, η)
	case 0x7e8: return "greek.small.letter.theta"; // XK_GREEK (U+03B8, θ)
	case 0x7e9: return "greek.small.letter.iota"; // XK_GREEK (U+03B9, ι)
	case 0x7ea: return "greek.small.letter.kappa"; // XK_GREEK (U+03BA, κ)
	case 0x7eb: return "greek.small.letter.lamda"; // XK_GREEK (U+03BB, λ)
	case 0x7ec: return "greek.small.letter.mu"; // XK_GREEK (U+03BC, μ)
	case 0x7ed: return "greek.small.letter.nu"; // XK_GREEK (U+03BD, ν)
	case 0x7ee: return "greek.small.letter.xi"; // XK_GREEK (U+03BE, ξ)
	case 0x7ef: return "greek.small.letter.omicron"; // XK_GREEK (U+03BF, ο)
	case 0x7f0: return "greek.small.letter.pi"; // XK_GREEK (U+03C0, π)
	case 0x7f1: return "greek.small.letter.rho"; // XK_GREEK (U+03C1, ρ)
	case 0x7f2: return "greek.small.letter.sigma"; // XK_GREEK (U+03C3, σ)
	case 0x7f3: return "greek.small.letter.final.sigma"; // XK_GREEK (U+03C2, ς)
	case 0x7f4: return "greek.small.letter.tau"; // XK_GREEK (U+03C4, τ)
	case 0x7f5: return "greek.small.letter.upsilon"; // XK_GREEK (U+03C5, υ)
	case 0x7f6: return "greek.small.letter.phi"; // XK_GREEK (U+03C6, φ)
	case 0x7f7: return "greek.small.letter.chi"; // XK_GREEK (U+03C7, χ)
	case 0x7f8: return "greek.small.letter.psi"; // XK_GREEK (U+03C8, ψ)
	case 0x7f9: return "greek.small.letter.omega"; // XK_GREEK (U+03C9, ω)

	// XK_TECHNICAL

	case 0x8a1: return "radical.symbol.bottom"; // XK_TECHNICAL (U+23B7, ⎷)
	case 0x8a2: return "topleftradical"; // XK_TECHNICAL
	case 0x8a3: return "horizconnector"; // XK_TECHNICAL
	case 0x8a4: return "top.half.integral"; // XK_TECHNICAL (U+2320, ⌠)
	case 0x8a5: return "bottom.half.integral"; // XK_TECHNICAL (U+2321, ⌡)
	case 0x8a6: return "vertconnector"; // XK_TECHNICAL
	case 0x8a7: return "left.square.bracket.upper.corner"; // XK_TECHNICAL (U+23A1, ⎡)
	case 0x8a8: return "left.square.bracket.lower.corner"; // XK_TECHNICAL (U+23A3, ⎣)
	case 0x8a9: return "right.square.bracket.upper.corner"; // XK_TECHNICAL (U+23A4, ⎤)
	case 0x8aa: return "right.square.bracket.lower.corner"; // XK_TECHNICAL (U+23A6, ⎦)
	case 0x8ab: return "left.parenthesis.upper.hook"; // XK_TECHNICAL (U+239B, ⎛)
	case 0x8ac: return "left.parenthesis.lower.hook"; // XK_TECHNICAL (U+239D, ⎝)
	case 0x8ad: return "right.parenthesis.upper.hook"; // XK_TECHNICAL (U+239E, ⎞)
	case 0x8ae: return "right.parenthesis.lower.hook"; // XK_TECHNICAL (U+23A0, ⎠)
	case 0x8af: return "left.curly.bracket.middle.piece"; // XK_TECHNICAL (U+23A8, ⎨)
	case 0x8b0: return "right.curly.bracket.middle.piece"; // XK_TECHNICAL (U+23AC, ⎬)
	case 0x8b1: return "topleftsummation"; // XK_TECHNICAL
	case 0x8b2: return "botleftsummation"; // XK_TECHNICAL
	case 0x8b3: return "topvertsummationconnector"; // XK_TECHNICAL
	case 0x8b4: return "botvertsummationconnector"; // XK_TECHNICAL
	case 0x8b5: return "toprightsummation"; // XK_TECHNICAL
	case 0x8b6: return "botrightsummation"; // XK_TECHNICAL
	case 0x8b7: return "rightmiddlesummation"; // XK_TECHNICAL
	case 0x8bc: return "less_than.or.equal.to"; // XK_TECHNICAL (U+2264, ≤)
	case 0x8bd: return "not.equal.to"; // XK_TECHNICAL (U+2260, ≠)
	case 0x8be: return "greater_than.or.equal.to"; // XK_TECHNICAL (U+2265, ≥)
	case 0x8bf: return "integral"; // XK_TECHNICAL (U+222B, ∫)
	case 0x8c0: return "therefore"; // XK_TECHNICAL (U+2234, ∴)
	case 0x8c1: return "proportional.to"; // XK_TECHNICAL (U+221D, ∝)
	case 0x8c2: return "infinity"; // XK_TECHNICAL (U+221E, ∞)
	case 0x8c5: return "nabla"; // XK_TECHNICAL (U+2207, ∇)
	case 0x8c8: return "tilde.operator"; // XK_TECHNICAL (U+223C, ∼)
	case 0x8c9: return "asymptotically.equal.to"; // XK_TECHNICAL (U+2243, ≃)
	case 0x8cd: return "left.right.double.arrow"; // XK_TECHNICAL (U+21D4, ⇔)
	case 0x8ce: return "rightwards.double.arrow"; // XK_TECHNICAL (U+21D2, ⇒)
	case 0x8cf: return "identical.to"; // XK_TECHNICAL (U+2261, ≡)
	case 0x8d6: return "square.root"; // XK_TECHNICAL (U+221A, √)
	case 0x8da: return "subset.of"; // XK_TECHNICAL (U+2282, ⊂)
	case 0x8db: return "superset.of"; // XK_TECHNICAL (U+2283, ⊃)
	case 0x8dc: return "intersection"; // XK_TECHNICAL (U+2229, ∩)
	case 0x8dd: return "union"; // XK_TECHNICAL (U+222A, ∪)
	case 0x8de: return "logical.and"; // XK_TECHNICAL (U+2227, ∧)
	case 0x8df: return "logical.or"; // XK_TECHNICAL (U+2228, ∨)
	case 0x8ef: return "partial.differential"; // XK_TECHNICAL (U+2202, ∂)
	case 0x8f6: return "latin.small.letter.f.with.hook"; // XK_TECHNICAL (U+0192, ƒ)
	case 0x8fb: return "leftwards.arrow"; // XK_TECHNICAL (U+2190, ←)
	case 0x8fc: return "upwards.arrow"; // XK_TECHNICAL (U+2191, ↑)
	case 0x8fd: return "rightwards.arrow"; // XK_TECHNICAL (U+2192, →)
	case 0x8fe: return "downwards.arrow"; // XK_TECHNICAL (U+2193, ↓)

	// XK_SPECIAL

	case 0x9df: return "blank"; // XK_SPECIAL
	case 0x9e0: return "black.diamond"; // XK_SPECIAL (U+25C6, ◆)
	case 0x9e1: return "medium.shade"; // XK_SPECIAL (U+2592, ▒)
	case 0x9e2: return "symbol.for.horizontal.tabulation"; // XK_SPECIAL (U+2409, ␉)
	case 0x9e3: return "symbol.for.form.feed"; // XK_SPECIAL (U+240C, ␌)
	case 0x9e4: return "symbol.for.carriage.return"; // XK_SPECIAL (U+240D, ␍)
	case 0x9e5: return "symbol.for.line.feed"; // XK_SPECIAL (U+240A, ␊)
	case 0x9e8: return "symbol.for.newline"; // XK_SPECIAL (U+2424, ␤)
	case 0x9e9: return "symbol.for.vertical.tabulation"; // XK_SPECIAL (U+240B, ␋)
	case 0x9ea: return "box.drawings.light.up.and.left"; // XK_SPECIAL (U+2518, ┘)
	case 0x9eb: return "box.drawings.light.down.and.left"; // XK_SPECIAL (U+2510, ┐)
	case 0x9ec: return "box.drawings.light.down.and.right"; // XK_SPECIAL (U+250C, ┌)
	case 0x9ed: return "box.drawings.light.up.and.right"; // XK_SPECIAL (U+2514, └)
	case 0x9ee: return "box.drawings.light.vertical.and.horizontal"; // XK_SPECIAL (U+253C, ┼)
	case 0x9ef: return "horizontal.scan.line_1"; // XK_SPECIAL (U+23BA, ⎺)
	case 0x9f0: return "horizontal.scan.line_3"; // XK_SPECIAL (U+23BB, ⎻)
	case 0x9f1: return "box.drawings.light.horizontal"; // XK_SPECIAL (U+2500, ─)
	case 0x9f2: return "horizontal.scan.line_7"; // XK_SPECIAL (U+23BC, ⎼)
	case 0x9f3: return "horizontal.scan.line_9"; // XK_SPECIAL (U+23BD, ⎽)
	case 0x9f4: return "box.drawings.light.vertical.and.right"; // XK_SPECIAL (U+251C, ├)
	case 0x9f5: return "box.drawings.light.vertical.and.left"; // XK_SPECIAL (U+2524, ┤)
	case 0x9f6: return "box.drawings.light.up.and.horizontal"; // XK_SPECIAL (U+2534, ┴)
	case 0x9f7: return "box.drawings.light.down.and.horizontal"; // XK_SPECIAL (U+252C, ┬)
	case 0x9f8: return "box.drawings.light.vertical"; // XK_SPECIAL (U+2502, │)

	// XK_PUBLISHING

	case 0xaa1: return "em.space"; // XK_PUBLISHING (U+2003,  )
	case 0xaa2: return "en.space"; // XK_PUBLISHING (U+2002,  )
	case 0xaa3: return "three_per_em.space"; // XK_PUBLISHING (U+2004,  )
	case 0xaa4: return "four_per_em.space"; // XK_PUBLISHING (U+2005,  )
	case 0xaa5: return "figure.space"; // XK_PUBLISHING (U+2007,  )
	case 0xaa6: return "punctuation.space"; // XK_PUBLISHING (U+2008,  )
	case 0xaa7: return "thin.space"; // XK_PUBLISHING (U+2009,  )
	case 0xaa8: return "hair.space"; // XK_PUBLISHING (U+200A,  )
	case 0xaa9: return "em.dash"; // XK_PUBLISHING (U+2014, —)
	case 0xaaa: return "en.dash"; // XK_PUBLISHING (U+2013, –)
	case 0xaac: return "signifblank"; // XK_PUBLISHING
	case 0xaae: return "horizontal.ellipsis"; // XK_PUBLISHING (U+2026, …)
	case 0xaaf: return "two.dot.leader"; // XK_PUBLISHING (U+2025, ‥)
	case 0xab0: return "vulgar.fraction.one.third"; // XK_PUBLISHING (U+2153, ⅓)
	case 0xab1: return "vulgar.fraction.two.thirds"; // XK_PUBLISHING (U+2154, ⅔)
	case 0xab2: return "vulgar.fraction.one.fifth"; // XK_PUBLISHING (U+2155, ⅕)
	case 0xab3: return "vulgar.fraction.two.fifths"; // XK_PUBLISHING (U+2156, ⅖)
	case 0xab4: return "vulgar.fraction.three.fifths"; // XK_PUBLISHING (U+2157, ⅗)
	case 0xab5: return "vulgar.fraction.four.fifths"; // XK_PUBLISHING (U+2158, ⅘)
	case 0xab6: return "vulgar.fraction.one.sixth"; // XK_PUBLISHING (U+2159, ⅙)
	case 0xab7: return "vulgar.fraction.five.sixths"; // XK_PUBLISHING (U+215A, ⅚)
	case 0xab8: return "care.of"; // XK_PUBLISHING (U+2105, ℅)
	case 0xabb: return "figure.dash"; // XK_PUBLISHING (U+2012, ‒)
	case 0xabc: return "leftanglebracket"; // XK_PUBLISHING
	case 0xabd: return "decimalpoint"; // XK_PUBLISHING
	case 0xabe: return "rightanglebracket"; // XK_PUBLISHING
	case 0xabf: return "marker"; // XK_PUBLISHING
	case 0xac3: return "vulgar.fraction.one.eighth"; // XK_PUBLISHING (U+215B, ⅛)
	case 0xac4: return "vulgar.fraction.three.eighths"; // XK_PUBLISHING (U+215C, ⅜)
	case 0xac5: return "vulgar.fraction.five.eighths"; // XK_PUBLISHING (U+215D, ⅝)
	case 0xac6: return "vulgar.fraction.seven.eighths"; // XK_PUBLISHING (U+215E, ⅞)
	case 0xac9: return "trade.mark.sign"; // XK_PUBLISHING (U+2122, ™)
	case 0xaca: return "signaturemark"; // XK_PUBLISHING
	case 0xacb: return "trademarkincircle"; // XK_PUBLISHING
	case 0xacc: return "leftopentriangle"; // XK_PUBLISHING
	case 0xacd: return "rightopentriangle"; // XK_PUBLISHING
	case 0xace: return "emopencircle"; // XK_PUBLISHING
	case 0xacf: return "emopenrectangle"; // XK_PUBLISHING
	case 0xad0: return "left.single.quotation.mark"; // XK_PUBLISHING (U+2018, ‘)
	case 0xad1: return "right.single.quotation.mark"; // XK_PUBLISHING (U+2019, ’)
	case 0xad2: return "left.double.quotation.mark"; // XK_PUBLISHING (U+201C, “)
	case 0xad3: return "right.double.quotation.mark"; // XK_PUBLISHING (U+201D, ”)
	case 0xad4: return "prescription.take"; // XK_PUBLISHING (U+211E, ℞)
	case 0xad5: return "per.mille.sign"; // XK_PUBLISHING (U+2030, ‰)
	case 0xad6: return "prime"; // XK_PUBLISHING (U+2032, ′)
	case 0xad7: return "double.prime"; // XK_PUBLISHING (U+2033, ″)
	case 0xad9: return "latin.cross"; // XK_PUBLISHING (U+271D, ✝)
	case 0xada: return "hexagram"; // XK_PUBLISHING
	case 0xadb: return "filledrectbullet"; // XK_PUBLISHING
	case 0xadc: return "filledlefttribullet"; // XK_PUBLISHING
	case 0xadd: return "filledrighttribullet"; // XK_PUBLISHING
	case 0xade: return "emfilledcircle"; // XK_PUBLISHING
	case 0xadf: return "emfilledrect"; // XK_PUBLISHING
	case 0xae0: return "enopencircbullet"; // XK_PUBLISHING
	case 0xae1: return "enopensquarebullet"; // XK_PUBLISHING
	case 0xae2: return "openrectbullet"; // XK_PUBLISHING
	case 0xae3: return "opentribulletup"; // XK_PUBLISHING
	case 0xae4: return "opentribulletdown"; // XK_PUBLISHING
	case 0xae5: return "openstar"; // XK_PUBLISHING
	case 0xae6: return "enfilledcircbullet"; // XK_PUBLISHING
	case 0xae7: return "enfilledsqbullet"; // XK_PUBLISHING
	case 0xae8: return "filledtribulletup"; // XK_PUBLISHING
	case 0xae9: return "filledtribulletdown"; // XK_PUBLISHING
	case 0xaea: return "leftpointer"; // XK_PUBLISHING
	case 0xaeb: return "rightpointer"; // XK_PUBLISHING
	case 0xaec: return "black.club.suit"; // XK_PUBLISHING (U+2663, ♣)
	case 0xaed: return "black.diamond.suit"; // XK_PUBLISHING (U+2666, ♦)
	case 0xaee: return "black.heart.suit"; // XK_PUBLISHING (U+2665, ♥)
	case 0xaf0: return "maltese.cross"; // XK_PUBLISHING (U+2720, ✠)
	case 0xaf1: return "dagger"; // XK_PUBLISHING (U+2020, †)
	case 0xaf2: return "double.dagger"; // XK_PUBLISHING (U+2021, ‡)
	case 0xaf3: return "check.mark"; // XK_PUBLISHING (U+2713, ✓)
	case 0xaf4: return "ballot.x"; // XK_PUBLISHING (U+2717, ✗)
	case 0xaf5: return "music.sharp.sign"; // XK_PUBLISHING (U+266F, ♯)
	case 0xaf6: return "music.flat.sign"; // XK_PUBLISHING (U+266D, ♭)
	case 0xaf7: return "male.sign"; // XK_PUBLISHING (U+2642, ♂)
	case 0xaf8: return "female.sign"; // XK_PUBLISHING (U+2640, ♀)
	case 0xaf9: return "black.telephone"; // XK_PUBLISHING (U+260E, ☎)
	case 0xafa: return "telephone.recorder"; // XK_PUBLISHING (U+2315, ⌕)
	case 0xafb: return "sound.recording.copyright"; // XK_PUBLISHING (U+2117, ℗)
	case 0xafc: return "caret"; // XK_PUBLISHING (U+2038, ‸)
	case 0xafd: return "single.low_9.quotation.mark"; // XK_PUBLISHING (U+201A, ‚)
	case 0xafe: return "double.low_9.quotation.mark"; // XK_PUBLISHING (U+201E, „)
	case 0xaff: return "cursor"; // XK_PUBLISHING

	// XK_APL

	case 0xba3: return "leftcaret"; // XK_APL
	case 0xba6: return "rightcaret"; // XK_APL
	case 0xba8: return "downcaret"; // XK_APL
	case 0xba9: return "upcaret"; // XK_APL
	case 0xbc0: return "overbar"; // XK_APL
	case 0xbc2: return "down.tack"; // XK_APL (U+22A4, ⊤)
	case 0xbc3: return "upshoe"; // XK_APL
	case 0xbc4: return "left.floor"; // XK_APL (U+230A, ⌊)
	case 0xbc6: return "underbar"; // XK_APL
	case 0xbca: return "ring.operator"; // XK_APL (U+2218, ∘)
	case 0xbcc: return "apl.functional.symbol.quad"; // XK_APL (U+2395, ⎕)
	case 0xbce: return "up.tack"; // XK_APL (U+22A5, ⊥)
	case 0xbcf: return "white.circle"; // XK_APL (U+25CB, ○)
	case 0xbd3: return "left.ceiling"; // XK_APL (U+2308, ⌈)
	case 0xbd6: return "downshoe"; // XK_APL
	case 0xbd8: return "rightshoe"; // XK_APL
	case 0xbda: return "leftshoe"; // XK_APL
	case 0xbdc: return "left.tack"; // XK_APL (U+22A3, ⊣)
	case 0xbfc: return "right.tack"; // XK_APL (U+22A2, ⊢)

	// XK_HEBREW

	case 0xcdf: return "double.low.line"; // XK_HEBREW (U+2017, ‗)
	case 0xce0: return "hebrew.letter.alef"; // XK_HEBREW (U+05D0, א)
	case 0xce1: return "hebrew.letter.bet"; // XK_HEBREW (U+05D1, ב)
	case 0xce2: return "hebrew.letter.gimel"; // XK_HEBREW (U+05D2, ג)
	case 0xce3: return "hebrew.letter.dalet"; // XK_HEBREW (U+05D3, ד)
	case 0xce4: return "hebrew.letter.he"; // XK_HEBREW (U+05D4, ה)
	case 0xce5: return "hebrew.letter.vav"; // XK_HEBREW (U+05D5, ו)
	case 0xce6: return "hebrew.letter.zayin"; // XK_HEBREW (U+05D6, ז)
	case 0xce7: return "hebrew.letter.het"; // XK_HEBREW (U+05D7, ח)
	case 0xce8: return "hebrew.letter.tet"; // XK_HEBREW (U+05D8, ט)
	case 0xce9: return "hebrew.letter.yod"; // XK_HEBREW (U+05D9, י)
	case 0xcea: return "hebrew.letter.final.kaf"; // XK_HEBREW (U+05DA, ך)
	case 0xceb: return "hebrew.letter.kaf"; // XK_HEBREW (U+05DB, כ)
	case 0xcec: return "hebrew.letter.lamed"; // XK_HEBREW (U+05DC, ל)
	case 0xced: return "hebrew.letter.final.mem"; // XK_HEBREW (U+05DD, ם)
	case 0xcee: return "hebrew.letter.mem"; // XK_HEBREW (U+05DE, מ)
	case 0xcef: return "hebrew.letter.final.nun"; // XK_HEBREW (U+05DF, ן)
	case 0xcf0: return "hebrew.letter.nun"; // XK_HEBREW (U+05E0, נ)
	case 0xcf1: return "hebrew.letter.samekh"; // XK_HEBREW (U+05E1, ס)
	case 0xcf2: return "hebrew.letter.ayin"; // XK_HEBREW (U+05E2, ע)
	case 0xcf3: return "hebrew.letter.final.pe"; // XK_HEBREW (U+05E3, ף)
	case 0xcf4: return "hebrew.letter.pe"; // XK_HEBREW (U+05E4, פ)
	case 0xcf5: return "hebrew.letter.final.tsadi"; // XK_HEBREW (U+05E5, ץ)
	case 0xcf6: return "hebrew.letter.tsadi"; // XK_HEBREW (U+05E6, צ)
	case 0xcf7: return "hebrew.letter.qof"; // XK_HEBREW (U+05E7, ק)
	case 0xcf8: return "hebrew.letter.resh"; // XK_HEBREW (U+05E8, ר)
	case 0xcf9: return "hebrew.letter.shin"; // XK_HEBREW (U+05E9, ש)
	case 0xcfa: return "hebrew.letter.tav"; // XK_HEBREW (U+05EA, ת)

	// XK_THAI

	case 0xda1: return "thai.character.ko.kai"; // XK_THAI (U+0E01, ก)
	case 0xda2: return "thai.character.kho.khai"; // XK_THAI (U+0E02, ข)
	case 0xda3: return "thai.character.kho.khuat"; // XK_THAI (U+0E03, ฃ)
	case 0xda4: return "thai.character.kho.khwai"; // XK_THAI (U+0E04, ค)
	case 0xda5: return "thai.character.kho.khon"; // XK_THAI (U+0E05, ฅ)
	case 0xda6: return "thai.character.kho.rakhang"; // XK_THAI (U+0E06, ฆ)
	case 0xda7: return "thai.character.ngo.ngu"; // XK_THAI (U+0E07, ง)
	case 0xda8: return "thai.character.cho.chan"; // XK_THAI (U+0E08, จ)
	case 0xda9: return "thai.character.cho.ching"; // XK_THAI (U+0E09, ฉ)
	case 0xdaa: return "thai.character.cho.chang"; // XK_THAI (U+0E0A, ช)
	case 0xdab: return "thai.character.so.so"; // XK_THAI (U+0E0B, ซ)
	case 0xdac: return "thai.character.cho.choe"; // XK_THAI (U+0E0C, ฌ)
	case 0xdad: return "thai.character.yo.ying"; // XK_THAI (U+0E0D, ญ)
	case 0xdae: return "thai.character.do.chada"; // XK_THAI (U+0E0E, ฎ)
	case 0xdaf: return "thai.character.to.patak"; // XK_THAI (U+0E0F, ฏ)
	case 0xdb0: return "thai.character.tho.than"; // XK_THAI (U+0E10, ฐ)
	case 0xdb1: return "thai.character.tho.nangmontho"; // XK_THAI (U+0E11, ฑ)
	case 0xdb2: return "thai.character.tho.phuthao"; // XK_THAI (U+0E12, ฒ)
	case 0xdb3: return "thai.character.no.nen"; // XK_THAI (U+0E13, ณ)
	case 0xdb4: return "thai.character.do.dek"; // XK_THAI (U+0E14, ด)
	case 0xdb5: return "thai.character.to.tao"; // XK_THAI (U+0E15, ต)
	case 0xdb6: return "thai.character.tho.thung"; // XK_THAI (U+0E16, ถ)
	case 0xdb7: return "thai.character.tho.thahan"; // XK_THAI (U+0E17, ท)
	case 0xdb8: return "thai.character.tho.thong"; // XK_THAI (U+0E18, ธ)
	case 0xdb9: return "thai.character.no.nu"; // XK_THAI (U+0E19, น)
	case 0xdba: return "thai.character.bo.baimai"; // XK_THAI (U+0E1A, บ)
	case 0xdbb: return "thai.character.po.pla"; // XK_THAI (U+0E1B, ป)
	case 0xdbc: return "thai.character.pho.phung"; // XK_THAI (U+0E1C, ผ)
	case 0xdbd: return "thai.character.fo.fa"; // XK_THAI (U+0E1D, ฝ)
	case 0xdbe: return "thai.character.pho.phan"; // XK_THAI (U+0E1E, พ)
	case 0xdbf: return "thai.character.fo.fan"; // XK_THAI (U+0E1F, ฟ)
	case 0xdc0: return "thai.character.pho.samphao"; // XK_THAI (U+0E20, ภ)
	case 0xdc1: return "thai.character.mo.ma"; // XK_THAI (U+0E21, ม)
	case 0xdc2: return "thai.character.yo.yak"; // XK_THAI (U+0E22, ย)
	case 0xdc3: return "thai.character.ro.rua"; // XK_THAI (U+0E23, ร)
	case 0xdc4: return "thai.character.ru"; // XK_THAI (U+0E24, ฤ)
	case 0xdc5: return "thai.character.lo.ling"; // XK_THAI (U+0E25, ล)
	case 0xdc6: return "thai.character.lu"; // XK_THAI (U+0E26, ฦ)
	case 0xdc7: return "thai.character.wo.waen"; // XK_THAI (U+0E27, ว)
	case 0xdc8: return "thai.character.so.sala"; // XK_THAI (U+0E28, ศ)
	case 0xdc9: return "thai.character.so.rusi"; // XK_THAI (U+0E29, ษ)
	case 0xdca: return "thai.character.so.sua"; // XK_THAI (U+0E2A, ส)
	case 0xdcb: return "thai.character.ho.hip"; // XK_THAI (U+0E2B, ห)
	case 0xdcc: return "thai.character.lo.chula"; // XK_THAI (U+0E2C, ฬ)
	case 0xdcd: return "thai.character.o.ang"; // XK_THAI (U+0E2D, อ)
	case 0xdce: return "thai.character.ho.nokhuk"; // XK_THAI (U+0E2E, ฮ)
	case 0xdcf: return "thai.character.paiyannoi"; // XK_THAI (U+0E2F, ฯ)
	case 0xdd0: return "thai.character.sara.a"; // XK_THAI (U+0E30, ะ)
	case 0xdd1: return "thai.character.mai.han_akat"; // XK_THAI (U+0E31, ั)
	case 0xdd2: return "thai.character.sara.aa"; // XK_THAI (U+0E32, า)
	case 0xdd3: return "thai.character.sara.am"; // XK_THAI (U+0E33, ำ)
	case 0xdd4: return "thai.character.sara.i"; // XK_THAI (U+0E34, ิ)
	case 0xdd5: return "thai.character.sara.ii"; // XK_THAI (U+0E35, ี)
	case 0xdd6: return "thai.character.sara.ue"; // XK_THAI (U+0E36, ึ)
	case 0xdd7: return "thai.character.sara.uee"; // XK_THAI (U+0E37, ื)
	case 0xdd8: return "thai.character.sara.u"; // XK_THAI (U+0E38, ุ)
	case 0xdd9: return "thai.character.sara.uu"; // XK_THAI (U+0E39, ู)
	case 0xdda: return "thai.character.phinthu"; // XK_THAI (U+0E3A, ฺ)
	case 0xdde: return "thai.maihanakat.maitho"; // XK_THAI
	case 0xddf: return "thai.currency.symbol.baht"; // XK_THAI (U+0E3F, ฿)
	case 0xde0: return "thai.character.sara.e"; // XK_THAI (U+0E40, เ)
	case 0xde1: return "thai.character.sara.ae"; // XK_THAI (U+0E41, แ)
	case 0xde2: return "thai.character.sara.o"; // XK_THAI (U+0E42, โ)
	case 0xde3: return "thai.character.sara.ai.maimuan"; // XK_THAI (U+0E43, ใ)
	case 0xde4: return "thai.character.sara.ai.maimalai"; // XK_THAI (U+0E44, ไ)
	case 0xde5: return "thai.character.lakkhangyao"; // XK_THAI (U+0E45, ๅ)
	case 0xde6: return "thai.character.maiyamok"; // XK_THAI (U+0E46, ๆ)
	case 0xde7: return "thai.character.maitaikhu"; // XK_THAI (U+0E47, ็)
	case 0xde8: return "thai.character.mai.ek"; // XK_THAI (U+0E48, ่)
	case 0xde9: return "thai.character.mai.tho"; // XK_THAI (U+0E49, ้)
	case 0xdea: return "thai.character.mai.tri"; // XK_THAI (U+0E4A, ๊)
	case 0xdeb: return "thai.character.mai.chattawa"; // XK_THAI (U+0E4B, ๋)
	case 0xdec: return "thai.character.thanthakhat"; // XK_THAI (U+0E4C, ์)
	case 0xded: return "thai.character.nikhahit"; // XK_THAI (U+0E4D, ํ)
	case 0xdf0: return "thai.digit.zero"; // XK_THAI (U+0E50, ๐)
	case 0xdf1: return "thai.digit.one"; // XK_THAI (U+0E51, ๑)
	case 0xdf2: return "thai.digit.two"; // XK_THAI (U+0E52, ๒)
	case 0xdf3: return "thai.digit.three"; // XK_THAI (U+0E53, ๓)
	case 0xdf4: return "thai.digit.four"; // XK_THAI (U+0E54, ๔)
	case 0xdf5: return "thai.digit.five"; // XK_THAI (U+0E55, ๕)
	case 0xdf6: return "thai.digit.six"; // XK_THAI (U+0E56, ๖)
	case 0xdf7: return "thai.digit.seven"; // XK_THAI (U+0E57, ๗)
	case 0xdf8: return "thai.digit.eight"; // XK_THAI (U+0E58, ๘)
	case 0xdf9: return "thai.digit.nine"; // XK_THAI (U+0E59, ๙)

	// XK_KOREAN

	case 0xff31: return "hangul"; // XK_KOREAN
	case 0xff32: return "hangul.start"; // XK_KOREAN
	case 0xff33: return "hangul.end"; // XK_KOREAN
	case 0xff34: return "hangul.hanja"; // XK_KOREAN
	case 0xff35: return "hangul.jamo"; // XK_KOREAN
	case 0xff36: return "hangul.romaja"; // XK_KOREAN
	case 0xff38: return "hangul.jeonja"; // XK_KOREAN
	case 0xff39: return "hangul.banja"; // XK_KOREAN
	case 0xff3a: return "hangul.prehanja"; // XK_KOREAN
	case 0xff3b: return "hangul.posthanja"; // XK_KOREAN
	case 0xff3f: return "hangul.special"; // XK_KOREAN
	case 0xea1: return "hangul.kiyeog"; // XK_KOREAN
	case 0xea2: return "hangul.ssangkiyeog"; // XK_KOREAN
	case 0xea3: return "hangul.kiyeogsios"; // XK_KOREAN
	case 0xea4: return "hangul.nieun"; // XK_KOREAN
	case 0xea5: return "hangul.nieunjieuj"; // XK_KOREAN
	case 0xea6: return "hangul.nieunhieuh"; // XK_KOREAN
	case 0xea7: return "hangul.dikeud"; // XK_KOREAN
	case 0xea8: return "hangul.ssangdikeud"; // XK_KOREAN
	case 0xea9: return "hangul.rieul"; // XK_KOREAN
	case 0xeaa: return "hangul.rieulkiyeog"; // XK_KOREAN
	case 0xeab: return "hangul.rieulmieum"; // XK_KOREAN
	case 0xeac: return "hangul.rieulpieub"; // XK_KOREAN
	case 0xead: return "hangul.rieulsios"; // XK_KOREAN
	case 0xeae: return "hangul.rieultieut"; // XK_KOREAN
	case 0xeaf: return "hangul.rieulphieuf"; // XK_KOREAN
	case 0xeb0: return "hangul.rieulhieuh"; // XK_KOREAN
	case 0xeb1: return "hangul.mieum"; // XK_KOREAN
	case 0xeb2: return "hangul.pieub"; // XK_KOREAN
	case 0xeb3: return "hangul.ssangpieub"; // XK_KOREAN
	case 0xeb4: return "hangul.pieubsios"; // XK_KOREAN
	case 0xeb5: return "hangul.sios"; // XK_KOREAN
	case 0xeb6: return "hangul.ssangsios"; // XK_KOREAN
	case 0xeb7: return "hangul.ieung"; // XK_KOREAN
	case 0xeb8: return "hangul.jieuj"; // XK_KOREAN
	case 0xeb9: return "hangul.ssangjieuj"; // XK_KOREAN
	case 0xeba: return "hangul.cieuc"; // XK_KOREAN
	case 0xebb: return "hangul.khieuq"; // XK_KOREAN
	case 0xebc: return "hangul.tieut"; // XK_KOREAN
	case 0xebd: return "hangul.phieuf"; // XK_KOREAN
	case 0xebe: return "hangul.hieuh"; // XK_KOREAN
	case 0xebf: return "hangul.a"; // XK_KOREAN
	case 0xec0: return "hangul.ae"; // XK_KOREAN
	case 0xec1: return "hangul.ya"; // XK_KOREAN
	case 0xec2: return "hangul.yae"; // XK_KOREAN
	case 0xec3: return "hangul.eo"; // XK_KOREAN
	case 0xec4: return "hangul.e"; // XK_KOREAN
	case 0xec5: return "hangul.yeo"; // XK_KOREAN
	case 0xec6: return "hangul.ye"; // XK_KOREAN
	case 0xec7: return "hangul.o"; // XK_KOREAN
	case 0xec8: return "hangul.wa"; // XK_KOREAN
	case 0xec9: return "hangul.wae"; // XK_KOREAN
	case 0xeca: return "hangul.oe"; // XK_KOREAN
	case 0xecb: return "hangul.yo"; // XK_KOREAN
	case 0xecc: return "hangul.u"; // XK_KOREAN
	case 0xecd: return "hangul.weo"; // XK_KOREAN
	case 0xece: return "hangul.we"; // XK_KOREAN
	case 0xecf: return "hangul.wi"; // XK_KOREAN
	case 0xed0: return "hangul.yu"; // XK_KOREAN
	case 0xed1: return "hangul.eu"; // XK_KOREAN
	case 0xed2: return "hangul.yi"; // XK_KOREAN
	case 0xed3: return "hangul.i"; // XK_KOREAN
	case 0xed4: return "hangul.j.kiyeog"; // XK_KOREAN
	case 0xed5: return "hangul.j.ssangkiyeog"; // XK_KOREAN
	case 0xed6: return "hangul.j.kiyeogsios"; // XK_KOREAN
	case 0xed7: return "hangul.j.nieun"; // XK_KOREAN
	case 0xed8: return "hangul.j.nieunjieuj"; // XK_KOREAN
	case 0xed9: return "hangul.j.nieunhieuh"; // XK_KOREAN
	case 0xeda: return "hangul.j.dikeud"; // XK_KOREAN
	case 0xedb: return "hangul.j.rieul"; // XK_KOREAN
	case 0xedc: return "hangul.j.rieulkiyeog"; // XK_KOREAN
	case 0xedd: return "hangul.j.rieulmieum"; // XK_KOREAN
	case 0xede: return "hangul.j.rieulpieub"; // XK_KOREAN
	case 0xedf: return "hangul.j.rieulsios"; // XK_KOREAN
	case 0xee0: return "hangul.j.rieultieut"; // XK_KOREAN
	case 0xee1: return "hangul.j.rieulphieuf"; // XK_KOREAN
	case 0xee2: return "hangul.j.rieulhieuh"; // XK_KOREAN
	case 0xee3: return "hangul.j.mieum"; // XK_KOREAN
	case 0xee4: return "hangul.j.pieub"; // XK_KOREAN
	case 0xee5: return "hangul.j.pieubsios"; // XK_KOREAN
	case 0xee6: return "hangul.j.sios"; // XK_KOREAN
	case 0xee7: return "hangul.j.ssangsios"; // XK_KOREAN
	case 0xee8: return "hangul.j.ieung"; // XK_KOREAN
	case 0xee9: return "hangul.j.jieuj"; // XK_KOREAN
	case 0xeea: return "hangul.j.cieuc"; // XK_KOREAN
	case 0xeeb: return "hangul.j.khieuq"; // XK_KOREAN
	case 0xeec: return "hangul.j.tieut"; // XK_KOREAN
	case 0xeed: return "hangul.j.phieuf"; // XK_KOREAN
	case 0xeee: return "hangul.j.hieuh"; // XK_KOREAN
	case 0xeef: return "hangul.rieulyeorinhieuh"; // XK_KOREAN
	case 0xef0: return "hangul.sunkyeongeummieum"; // XK_KOREAN
	case 0xef1: return "hangul.sunkyeongeumpieub"; // XK_KOREAN
	case 0xef2: return "hangul.pansios"; // XK_KOREAN
	case 0xef3: return "hangul.kkogjidalrinieung"; // XK_KOREAN
	case 0xef4: return "hangul.sunkyeongeumphieuf"; // XK_KOREAN
	case 0xef5: return "hangul.yeorinhieuh"; // XK_KOREAN
	case 0xef6: return "hangul.araea"; // XK_KOREAN
	case 0xef7: return "hangul.araeae"; // XK_KOREAN
	case 0xef8: return "hangul.j.pansios"; // XK_KOREAN
	case 0xef9: return "hangul.j.kkogjidalrinieung"; // XK_KOREAN
	case 0xefa: return "hangul.j.yeorinhieuh"; // XK_KOREAN
	case 0xeff: return "korean.won"; // XK_KOREAN

	// XK_ARMENIAN

	case 0x1000587: return "armenian.small.ligature.ech.yiwn"; // XK_ARMENIAN (U+0587, և)
	case 0x1000589: return "armenian.full.stop"; // XK_ARMENIAN (U+0589, ։)
	case 0x100055d: return "armenian.comma"; // XK_ARMENIAN (U+055D, ՝)
	case 0x100058a: return "armenian.hyphen"; // XK_ARMENIAN (U+058A, ֊)
	case 0x100055c: return "armenian.exclamation.mark"; // XK_ARMENIAN (U+055C, ՜)
	case 0x100055b: return "armenian.emphasis.mark"; // XK_ARMENIAN (U+055B, ՛)
	case 0x100055e: return "armenian.question.mark"; // XK_ARMENIAN (U+055E, ՞)
	case 0x1000531: return "armenian.capital.letter.ayb"; // XK_ARMENIAN (U+0531, Ա)
	case 0x1000561: return "armenian.small.letter.ayb"; // XK_ARMENIAN (U+0561, ա)
	case 0x1000532: return "armenian.capital.letter.ben"; // XK_ARMENIAN (U+0532, Բ)
	case 0x1000562: return "armenian.small.letter.ben"; // XK_ARMENIAN (U+0562, բ)
	case 0x1000533: return "armenian.capital.letter.gim"; // XK_ARMENIAN (U+0533, Գ)
	case 0x1000563: return "armenian.small.letter.gim"; // XK_ARMENIAN (U+0563, գ)
	case 0x1000534: return "armenian.capital.letter.da"; // XK_ARMENIAN (U+0534, Դ)
	case 0x1000564: return "armenian.small.letter.da"; // XK_ARMENIAN (U+0564, դ)
	case 0x1000535: return "armenian.capital.letter.ech"; // XK_ARMENIAN (U+0535, Ե)
	case 0x1000565: return "armenian.small.letter.ech"; // XK_ARMENIAN (U+0565, ե)
	case 0x1000536: return "armenian.capital.letter.za"; // XK_ARMENIAN (U+0536, Զ)
	case 0x1000566: return "armenian.small.letter.za"; // XK_ARMENIAN (U+0566, զ)
	case 0x1000537: return "armenian.capital.letter.eh"; // XK_ARMENIAN (U+0537, Է)
	case 0x1000567: return "armenian.small.letter.eh"; // XK_ARMENIAN (U+0567, է)
	case 0x1000538: return "armenian.capital.letter.et"; // XK_ARMENIAN (U+0538, Ը)
	case 0x1000568: return "armenian.small.letter.et"; // XK_ARMENIAN (U+0568, ը)
	case 0x1000539: return "armenian.capital.letter.to"; // XK_ARMENIAN (U+0539, Թ)
	case 0x1000569: return "armenian.small.letter.to"; // XK_ARMENIAN (U+0569, թ)
	case 0x100053a: return "armenian.capital.letter.zhe"; // XK_ARMENIAN (U+053A, Ժ)
	case 0x100056a: return "armenian.small.letter.zhe"; // XK_ARMENIAN (U+056A, ժ)
	case 0x100053b: return "armenian.capital.letter.ini"; // XK_ARMENIAN (U+053B, Ի)
	case 0x100056b: return "armenian.small.letter.ini"; // XK_ARMENIAN (U+056B, ի)
	case 0x100053c: return "armenian.capital.letter.liwn"; // XK_ARMENIAN (U+053C, Լ)
	case 0x100056c: return "armenian.small.letter.liwn"; // XK_ARMENIAN (U+056C, լ)
	case 0x100053d: return "armenian.capital.letter.xeh"; // XK_ARMENIAN (U+053D, Խ)
	case 0x100056d: return "armenian.small.letter.xeh"; // XK_ARMENIAN (U+056D, խ)
	case 0x100053e: return "armenian.capital.letter.ca"; // XK_ARMENIAN (U+053E, Ծ)
	case 0x100056e: return "armenian.small.letter.ca"; // XK_ARMENIAN (U+056E, ծ)
	case 0x100053f: return "armenian.capital.letter.ken"; // XK_ARMENIAN (U+053F, Կ)
	case 0x100056f: return "armenian.small.letter.ken"; // XK_ARMENIAN (U+056F, կ)
	case 0x1000540: return "armenian.capital.letter.ho"; // XK_ARMENIAN (U+0540, Հ)
	case 0x1000570: return "armenian.small.letter.ho"; // XK_ARMENIAN (U+0570, հ)
	case 0x1000541: return "armenian.capital.letter.ja"; // XK_ARMENIAN (U+0541, Ձ)
	case 0x1000571: return "armenian.small.letter.ja"; // XK_ARMENIAN (U+0571, ձ)
	case 0x1000542: return "armenian.capital.letter.ghad"; // XK_ARMENIAN (U+0542, Ղ)
	case 0x1000572: return "armenian.small.letter.ghad"; // XK_ARMENIAN (U+0572, ղ)
	case 0x1000543: return "armenian.capital.letter.cheh"; // XK_ARMENIAN (U+0543, Ճ)
	case 0x1000573: return "armenian.small.letter.cheh"; // XK_ARMENIAN (U+0573, ճ)
	case 0x1000544: return "armenian.capital.letter.men"; // XK_ARMENIAN (U+0544, Մ)
	case 0x1000574: return "armenian.small.letter.men"; // XK_ARMENIAN (U+0574, մ)
	case 0x1000545: return "armenian.capital.letter.yi"; // XK_ARMENIAN (U+0545, Յ)
	case 0x1000575: return "armenian.small.letter.yi"; // XK_ARMENIAN (U+0575, յ)
	case 0x1000546: return "armenian.capital.letter.now"; // XK_ARMENIAN (U+0546, Ն)
	case 0x1000576: return "armenian.small.letter.now"; // XK_ARMENIAN (U+0576, ն)
	case 0x1000547: return "armenian.capital.letter.sha"; // XK_ARMENIAN (U+0547, Շ)
	case 0x1000577: return "armenian.small.letter.sha"; // XK_ARMENIAN (U+0577, շ)
	case 0x1000548: return "armenian.capital.letter.vo"; // XK_ARMENIAN (U+0548, Ո)
	case 0x1000578: return "armenian.small.letter.vo"; // XK_ARMENIAN (U+0578, ո)
	case 0x1000549: return "armenian.capital.letter.cha"; // XK_ARMENIAN (U+0549, Չ)
	case 0x1000579: return "armenian.small.letter.cha"; // XK_ARMENIAN (U+0579, չ)
	case 0x100054a: return "armenian.capital.letter.peh"; // XK_ARMENIAN (U+054A, Պ)
	case 0x100057a: return "armenian.small.letter.peh"; // XK_ARMENIAN (U+057A, պ)
	case 0x100054b: return "armenian.capital.letter.jheh"; // XK_ARMENIAN (U+054B, Ջ)
	case 0x100057b: return "armenian.small.letter.jheh"; // XK_ARMENIAN (U+057B, ջ)
	case 0x100054c: return "armenian.capital.letter.ra"; // XK_ARMENIAN (U+054C, Ռ)
	case 0x100057c: return "armenian.small.letter.ra"; // XK_ARMENIAN (U+057C, ռ)
	case 0x100054d: return "armenian.capital.letter.seh"; // XK_ARMENIAN (U+054D, Ս)
	case 0x100057d: return "armenian.small.letter.seh"; // XK_ARMENIAN (U+057D, ս)
	case 0x100054e: return "armenian.capital.letter.vew"; // XK_ARMENIAN (U+054E, Վ)
	case 0x100057e: return "armenian.small.letter.vew"; // XK_ARMENIAN (U+057E, վ)
	case 0x100054f: return "armenian.capital.letter.tiwn"; // XK_ARMENIAN (U+054F, Տ)
	case 0x100057f: return "armenian.small.letter.tiwn"; // XK_ARMENIAN (U+057F, տ)
	case 0x1000550: return "armenian.capital.letter.reh"; // XK_ARMENIAN (U+0550, Ր)
	case 0x1000580: return "armenian.small.letter.reh"; // XK_ARMENIAN (U+0580, ր)
	case 0x1000551: return "armenian.capital.letter.co"; // XK_ARMENIAN (U+0551, Ց)
	case 0x1000581: return "armenian.small.letter.co"; // XK_ARMENIAN (U+0581, ց)
	case 0x1000552: return "armenian.capital.letter.yiwn"; // XK_ARMENIAN (U+0552, Ւ)
	case 0x1000582: return "armenian.small.letter.yiwn"; // XK_ARMENIAN (U+0582, ւ)
	case 0x1000553: return "armenian.capital.letter.piwr"; // XK_ARMENIAN (U+0553, Փ)
	case 0x1000583: return "armenian.small.letter.piwr"; // XK_ARMENIAN (U+0583, փ)
	case 0x1000554: return "armenian.capital.letter.keh"; // XK_ARMENIAN (U+0554, Ք)
	case 0x1000584: return "armenian.small.letter.keh"; // XK_ARMENIAN (U+0584, ք)
	case 0x1000555: return "armenian.capital.letter.oh"; // XK_ARMENIAN (U+0555, Օ)
	case 0x1000585: return "armenian.small.letter.oh"; // XK_ARMENIAN (U+0585, օ)
	case 0x1000556: return "armenian.capital.letter.feh"; // XK_ARMENIAN (U+0556, Ֆ)
	case 0x1000586: return "armenian.small.letter.feh"; // XK_ARMENIAN (U+0586, ֆ)
	case 0x100055a: return "armenian.apostrophe"; // XK_ARMENIAN (U+055A, ՚)

	// XK_GEORGIAN

	case 0x10010d0: return "georgian.letter.an"; // XK_GEORGIAN (U+10D0, ა)
	case 0x10010d1: return "georgian.letter.ban"; // XK_GEORGIAN (U+10D1, ბ)
	case 0x10010d2: return "georgian.letter.gan"; // XK_GEORGIAN (U+10D2, გ)
	case 0x10010d3: return "georgian.letter.don"; // XK_GEORGIAN (U+10D3, დ)
	case 0x10010d4: return "georgian.letter.en"; // XK_GEORGIAN (U+10D4, ე)
	case 0x10010d5: return "georgian.letter.vin"; // XK_GEORGIAN (U+10D5, ვ)
	case 0x10010d6: return "georgian.letter.zen"; // XK_GEORGIAN (U+10D6, ზ)
	case 0x10010d7: return "georgian.letter.tan"; // XK_GEORGIAN (U+10D7, თ)
	case 0x10010d8: return "georgian.letter.in"; // XK_GEORGIAN (U+10D8, ი)
	case 0x10010d9: return "georgian.letter.kan"; // XK_GEORGIAN (U+10D9, კ)
	case 0x10010da: return "georgian.letter.las"; // XK_GEORGIAN (U+10DA, ლ)
	case 0x10010db: return "georgian.letter.man"; // XK_GEORGIAN (U+10DB, მ)
	case 0x10010dc: return "georgian.letter.nar"; // XK_GEORGIAN (U+10DC, ნ)
	case 0x10010dd: return "georgian.letter.on"; // XK_GEORGIAN (U+10DD, ო)
	case 0x10010de: return "georgian.letter.par"; // XK_GEORGIAN (U+10DE, პ)
	case 0x10010df: return "georgian.letter.zhar"; // XK_GEORGIAN (U+10DF, ჟ)
	case 0x10010e0: return "georgian.letter.rae"; // XK_GEORGIAN (U+10E0, რ)
	case 0x10010e1: return "georgian.letter.san"; // XK_GEORGIAN (U+10E1, ს)
	case 0x10010e2: return "georgian.letter.tar"; // XK_GEORGIAN (U+10E2, ტ)
	case 0x10010e3: return "georgian.letter.un"; // XK_GEORGIAN (U+10E3, უ)
	case 0x10010e4: return "georgian.letter.phar"; // XK_GEORGIAN (U+10E4, ფ)
	case 0x10010e5: return "georgian.letter.khar"; // XK_GEORGIAN (U+10E5, ქ)
	case 0x10010e6: return "georgian.letter.ghan"; // XK_GEORGIAN (U+10E6, ღ)
	case 0x10010e7: return "georgian.letter.qar"; // XK_GEORGIAN (U+10E7, ყ)
	case 0x10010e8: return "georgian.letter.shin"; // XK_GEORGIAN (U+10E8, შ)
	case 0x10010e9: return "georgian.letter.chin"; // XK_GEORGIAN (U+10E9, ჩ)
	case 0x10010ea: return "georgian.letter.can"; // XK_GEORGIAN (U+10EA, ც)
	case 0x10010eb: return "georgian.letter.jil"; // XK_GEORGIAN (U+10EB, ძ)
	case 0x10010ec: return "georgian.letter.cil"; // XK_GEORGIAN (U+10EC, წ)
	case 0x10010ed: return "georgian.letter.char"; // XK_GEORGIAN (U+10ED, ჭ)
	case 0x10010ee: return "georgian.letter.xan"; // XK_GEORGIAN (U+10EE, ხ)
	case 0x10010ef: return "georgian.letter.jhan"; // XK_GEORGIAN (U+10EF, ჯ)
	case 0x10010f0: return "georgian.letter.hae"; // XK_GEORGIAN (U+10F0, ჰ)
	case 0x10010f1: return "georgian.letter.he"; // XK_GEORGIAN (U+10F1, ჱ)
	case 0x10010f2: return "georgian.letter.hie"; // XK_GEORGIAN (U+10F2, ჲ)
	case 0x10010f3: return "georgian.letter.we"; // XK_GEORGIAN (U+10F3, ჳ)
	case 0x10010f4: return "georgian.letter.har"; // XK_GEORGIAN (U+10F4, ჴ)
	case 0x10010f5: return "georgian.letter.hoe"; // XK_GEORGIAN (U+10F5, ჵ)
	case 0x10010f6: return "georgian.letter.fi"; // XK_GEORGIAN (U+10F6, ჶ)

	// XK_CAUCASUS

	case 0x1001e8a: return "latin.capital.letter.x.with.dot.above"; // XK_CAUCASUS (U+1E8A, Ẋ)
	case 0x100012c: return "latin.capital.letter.i.with.breve"; // XK_CAUCASUS (U+012C, Ĭ)
	case 0x10001b5: return "latin.capital.letter.z.with.stroke"; // XK_CAUCASUS (U+01B5, Ƶ)
	case 0x10001e6: return "latin.capital.letter.g.with.caron"; // XK_CAUCASUS (U+01E6, Ǧ)
	case 0x10001d1: return "latin.capital.letter.o.with.caron"; // XK_CAUCASUS (U+01D2, ǒ)
	case 0x100019f: return "latin.capital.letter.o.with.middle.tilde"; // XK_CAUCASUS (U+019F, Ɵ)
	case 0x1001e8b: return "latin.small.letter.x.with.dot.above"; // XK_CAUCASUS (U+1E8B, ẋ)
	case 0x100012d: return "latin.small.letter.i.with.breve"; // XK_CAUCASUS (U+012D, ĭ)
	case 0x10001b6: return "latin.small.letter.z.with.stroke"; // XK_CAUCASUS (U+01B6, ƶ)
	case 0x10001e7: return "latin.small.letter.g.with.caron"; // XK_CAUCASUS (U+01E7, ǧ)
	case 0x10001d2: return "latin.small.letter.o.with.caron"; // XK_CAUCASUS (U+01D2, ǒ)
	case 0x1000275: return "latin.small.letter.barred.o"; // XK_CAUCASUS (U+0275, ɵ)
	case 0x100018f: return "latin.capital.letter.schwa"; // XK_CAUCASUS (U+018F, Ə)
	case 0x1000259: return "latin.small.letter.schwa"; // XK_CAUCASUS (U+0259, ə)
	case 0x10001b7: return "latin.capital.letter.ezh"; // XK_CAUCASUS (U+01B7, Ʒ)
	case 0x1000292: return "latin.small.letter.ezh"; // XK_CAUCASUS (U+0292, ʒ)
	case 0x1001e36: return "latin.capital.letter.l.with.dot.below"; // XK_CAUCASUS (U+1E36, Ḷ)
	case 0x1001e37: return "latin.small.letter.l.with.dot.below"; // XK_CAUCASUS (U+1E37, ḷ)

	// XK_VIETNAMESE

	case 0x1001ea0: return "latin.capital.letter.a.with.dot.below"; // XK_VIETNAMESE (U+1EA0, Ạ)
	case 0x1001ea1: return "latin.small.letter.a.with.dot.below"; // XK_VIETNAMESE (U+1EA1, ạ)
	case 0x1001ea2: return "latin.capital.letter.a.with.hook.above"; // XK_VIETNAMESE (U+1EA2, Ả)
	case 0x1001ea3: return "latin.small.letter.a.with.hook.above"; // XK_VIETNAMESE (U+1EA3, ả)
	case 0x1001ea4: return "latin.capital.letter.a.with.circumflex.and.acute"; // XK_VIETNAMESE (U+1EA4, Ấ)
	case 0x1001ea5: return "latin.small.letter.a.with.circumflex.and.acute"; // XK_VIETNAMESE (U+1EA5, ấ)
	case 0x1001ea6: return "latin.capital.letter.a.with.circumflex.and.grave"; // XK_VIETNAMESE (U+1EA6, Ầ)
	case 0x1001ea7: return "latin.small.letter.a.with.circumflex.and.grave"; // XK_VIETNAMESE (U+1EA7, ầ)
	case 0x1001ea8: return "latin.capital.letter.a.with.circumflex.and.hook.above"; // XK_VIETNAMESE (U+1EA8, Ẩ)
	case 0x1001ea9: return "latin.small.letter.a.with.circumflex.and.hook.above"; // XK_VIETNAMESE (U+1EA9, ẩ)
	case 0x1001eaa: return "latin.capital.letter.a.with.circumflex.and.tilde"; // XK_VIETNAMESE (U+1EAA, Ẫ)
	case 0x1001eab: return "latin.small.letter.a.with.circumflex.and.tilde"; // XK_VIETNAMESE (U+1EAB, ẫ)
	case 0x1001eac: return "latin.capital.letter.a.with.circumflex.and.dot.below"; // XK_VIETNAMESE (U+1EAC, Ậ)
	case 0x1001ead: return "latin.small.letter.a.with.circumflex.and.dot.below"; // XK_VIETNAMESE (U+1EAD, ậ)
	case 0x1001eae: return "latin.capital.letter.a.with.breve.and.acute"; // XK_VIETNAMESE (U+1EAE, Ắ)
	case 0x1001eaf: return "latin.small.letter.a.with.breve.and.acute"; // XK_VIETNAMESE (U+1EAF, ắ)
	case 0x1001eb0: return "latin.capital.letter.a.with.breve.and.grave"; // XK_VIETNAMESE (U+1EB0, Ằ)
	case 0x1001eb1: return "latin.small.letter.a.with.breve.and.grave"; // XK_VIETNAMESE (U+1EB1, ằ)
	case 0x1001eb2: return "latin.capital.letter.a.with.breve.and.hook.above"; // XK_VIETNAMESE (U+1EB2, Ẳ)
	case 0x1001eb3: return "latin.small.letter.a.with.breve.and.hook.above"; // XK_VIETNAMESE (U+1EB3, ẳ)
	case 0x1001eb4: return "latin.capital.letter.a.with.breve.and.tilde"; // XK_VIETNAMESE (U+1EB4, Ẵ)
	case 0x1001eb5: return "latin.small.letter.a.with.breve.and.tilde"; // XK_VIETNAMESE (U+1EB5, ẵ)
	case 0x1001eb6: return "latin.capital.letter.a.with.breve.and.dot.below"; // XK_VIETNAMESE (U+1EB6, Ặ)
	case 0x1001eb7: return "latin.small.letter.a.with.breve.and.dot.below"; // XK_VIETNAMESE (U+1EB7, ặ)
	case 0x1001eb8: return "latin.capital.letter.e.with.dot.below"; // XK_VIETNAMESE (U+1EB8, Ẹ)
	case 0x1001eb9: return "latin.small.letter.e.with.dot.below"; // XK_VIETNAMESE (U+1EB9, ẹ)
	case 0x1001eba: return "latin.capital.letter.e.with.hook.above"; // XK_VIETNAMESE (U+1EBA, Ẻ)
	case 0x1001ebb: return "latin.small.letter.e.with.hook.above"; // XK_VIETNAMESE (U+1EBB, ẻ)
	case 0x1001ebc: return "latin.capital.letter.e.with.tilde"; // XK_VIETNAMESE (U+1EBC, Ẽ)
	case 0x1001ebd: return "latin.small.letter.e.with.tilde"; // XK_VIETNAMESE (U+1EBD, ẽ)
	case 0x1001ebe: return "latin.capital.letter.e.with.circumflex.and.acute"; // XK_VIETNAMESE (U+1EBE, Ế)
	case 0x1001ebf: return "latin.small.letter.e.with.circumflex.and.acute"; // XK_VIETNAMESE (U+1EBF, ế)
	case 0x1001ec0: return "latin.capital.letter.e.with.circumflex.and.grave"; // XK_VIETNAMESE (U+1EC0, Ề)
	case 0x1001ec1: return "latin.small.letter.e.with.circumflex.and.grave"; // XK_VIETNAMESE (U+1EC1, ề)
	case 0x1001ec2: return "latin.capital.letter.e.with.circumflex.and.hook.above"; // XK_VIETNAMESE (U+1EC2, Ể)
	case 0x1001ec3: return "latin.small.letter.e.with.circumflex.and.hook.above"; // XK_VIETNAMESE (U+1EC3, ể)
	case 0x1001ec4: return "latin.capital.letter.e.with.circumflex.and.tilde"; // XK_VIETNAMESE (U+1EC4, Ễ)
	case 0x1001ec5: return "latin.small.letter.e.with.circumflex.and.tilde"; // XK_VIETNAMESE (U+1EC5, ễ)
	case 0x1001ec6: return "latin.capital.letter.e.with.circumflex.and.dot.below"; // XK_VIETNAMESE (U+1EC6, Ệ)
	case 0x1001ec7: return "latin.small.letter.e.with.circumflex.and.dot.below"; // XK_VIETNAMESE (U+1EC7, ệ)
	case 0x1001ec8: return "latin.capital.letter.i.with.hook.above"; // XK_VIETNAMESE (U+1EC8, Ỉ)
	case 0x1001ec9: return "latin.small.letter.i.with.hook.above"; // XK_VIETNAMESE (U+1EC9, ỉ)
	case 0x1001eca: return "latin.capital.letter.i.with.dot.below"; // XK_VIETNAMESE (U+1ECA, Ị)
	case 0x1001ecb: return "latin.small.letter.i.with.dot.below"; // XK_VIETNAMESE (U+1ECB, ị)
	case 0x1001ecc: return "latin.capital.letter.o.with.dot.below"; // XK_VIETNAMESE (U+1ECC, Ọ)
	case 0x1001ecd: return "latin.small.letter.o.with.dot.below"; // XK_VIETNAMESE (U+1ECD, ọ)
	case 0x1001ece: return "latin.capital.letter.o.with.hook.above"; // XK_VIETNAMESE (U+1ECE, Ỏ)
	case 0x1001ecf: return "latin.small.letter.o.with.hook.above"; // XK_VIETNAMESE (U+1ECF, ỏ)
	case 0x1001ed0: return "latin.capital.letter.o.with.circumflex.and.acute"; // XK_VIETNAMESE (U+1ED0, Ố)
	case 0x1001ed1: return "latin.small.letter.o.with.circumflex.and.acute"; // XK_VIETNAMESE (U+1ED1, ố)
	case 0x1001ed2: return "latin.capital.letter.o.with.circumflex.and.grave"; // XK_VIETNAMESE (U+1ED2, Ồ)
	case 0x1001ed3: return "latin.small.letter.o.with.circumflex.and.grave"; // XK_VIETNAMESE (U+1ED3, ồ)
	case 0x1001ed4: return "latin.capital.letter.o.with.circumflex.and.hook.above"; // XK_VIETNAMESE (U+1ED4, Ổ)
	case 0x1001ed5: return "latin.small.letter.o.with.circumflex.and.hook.above"; // XK_VIETNAMESE (U+1ED5, ổ)
	case 0x1001ed6: return "latin.capital.letter.o.with.circumflex.and.tilde"; // XK_VIETNAMESE (U+1ED6, Ỗ)
	case 0x1001ed7: return "latin.small.letter.o.with.circumflex.and.tilde"; // XK_VIETNAMESE (U+1ED7, ỗ)
	case 0x1001ed8: return "latin.capital.letter.o.with.circumflex.and.dot.below"; // XK_VIETNAMESE (U+1ED8, Ộ)
	case 0x1001ed9: return "latin.small.letter.o.with.circumflex.and.dot.below"; // XK_VIETNAMESE (U+1ED9, ộ)
	case 0x1001eda: return "latin.capital.letter.o.with.horn.and.acute"; // XK_VIETNAMESE (U+1EDA, Ớ)
	case 0x1001edb: return "latin.small.letter.o.with.horn.and.acute"; // XK_VIETNAMESE (U+1EDB, ớ)
	case 0x1001edc: return "latin.capital.letter.o.with.horn.and.grave"; // XK_VIETNAMESE (U+1EDC, Ờ)
	case 0x1001edd: return "latin.small.letter.o.with.horn.and.grave"; // XK_VIETNAMESE (U+1EDD, ờ)
	case 0x1001ede: return "latin.capital.letter.o.with.horn.and.hook.above"; // XK_VIETNAMESE (U+1EDE, Ở)
	case 0x1001edf: return "latin.small.letter.o.with.horn.and.hook.above"; // XK_VIETNAMESE (U+1EDF, ở)
	case 0x1001ee0: return "latin.capital.letter.o.with.horn.and.tilde"; // XK_VIETNAMESE (U+1EE0, Ỡ)
	case 0x1001ee1: return "latin.small.letter.o.with.horn.and.tilde"; // XK_VIETNAMESE (U+1EE1, ỡ)
	case 0x1001ee2: return "latin.capital.letter.o.with.horn.and.dot.below"; // XK_VIETNAMESE (U+1EE2, Ợ)
	case 0x1001ee3: return "latin.small.letter.o.with.horn.and.dot.below"; // XK_VIETNAMESE (U+1EE3, ợ)
	case 0x1001ee4: return "latin.capital.letter.u.with.dot.below"; // XK_VIETNAMESE (U+1EE4, Ụ)
	case 0x1001ee5: return "latin.small.letter.u.with.dot.below"; // XK_VIETNAMESE (U+1EE5, ụ)
	case 0x1001ee6: return "latin.capital.letter.u.with.hook.above"; // XK_VIETNAMESE (U+1EE6, Ủ)
	case 0x1001ee7: return "latin.small.letter.u.with.hook.above"; // XK_VIETNAMESE (U+1EE7, ủ)
	case 0x1001ee8: return "latin.capital.letter.u.with.horn.and.acute"; // XK_VIETNAMESE (U+1EE8, Ứ)
	case 0x1001ee9: return "latin.small.letter.u.with.horn.and.acute"; // XK_VIETNAMESE (U+1EE9, ứ)
	case 0x1001eea: return "latin.capital.letter.u.with.horn.and.grave"; // XK_VIETNAMESE (U+1EEA, Ừ)
	case 0x1001eeb: return "latin.small.letter.u.with.horn.and.grave"; // XK_VIETNAMESE (U+1EEB, ừ)
	case 0x1001eec: return "latin.capital.letter.u.with.horn.and.hook.above"; // XK_VIETNAMESE (U+1EEC, Ử)
	case 0x1001eed: return "latin.small.letter.u.with.horn.and.hook.above"; // XK_VIETNAMESE (U+1EED, ử)
	case 0x1001eee: return "latin.capital.letter.u.with.horn.and.tilde"; // XK_VIETNAMESE (U+1EEE, Ữ)
	case 0x1001eef: return "latin.small.letter.u.with.horn.and.tilde"; // XK_VIETNAMESE (U+1EEF, ữ)
	case 0x1001ef0: return "latin.capital.letter.u.with.horn.and.dot.below"; // XK_VIETNAMESE (U+1EF0, Ự)
	case 0x1001ef1: return "latin.small.letter.u.with.horn.and.dot.below"; // XK_VIETNAMESE (U+1EF1, ự)
	case 0x1001ef4: return "latin.capital.letter.y.with.dot.below"; // XK_VIETNAMESE (U+1EF4, Ỵ)
	case 0x1001ef5: return "latin.small.letter.y.with.dot.below"; // XK_VIETNAMESE (U+1EF5, ỵ)
	case 0x1001ef6: return "latin.capital.letter.y.with.hook.above"; // XK_VIETNAMESE (U+1EF6, Ỷ)
	case 0x1001ef7: return "latin.small.letter.y.with.hook.above"; // XK_VIETNAMESE (U+1EF7, ỷ)
	case 0x1001ef8: return "latin.capital.letter.y.with.tilde"; // XK_VIETNAMESE (U+1EF8, Ỹ)
	case 0x1001ef9: return "latin.small.letter.y.with.tilde"; // XK_VIETNAMESE (U+1EF9, ỹ)
	case 0x10001a0: return "latin.capital.letter.o.with.horn"; // XK_VIETNAMESE (U+01A0, Ơ)
	case 0x10001a1: return "latin.small.letter.o.with.horn"; // XK_VIETNAMESE (U+01A1, ơ)
	case 0x10001af: return "latin.capital.letter.u.with.horn"; // XK_VIETNAMESE (U+01AF, Ư)
	case 0x10001b0: return "latin.small.letter.u.with.horn"; // XK_VIETNAMESE (U+01B0, ư)

	// XK_CURRENCY

	case 0x10020a0: return "euro_currency.sign"; // XK_CURRENCY (U+20A0, ₠)
	case 0x10020a1: return "colon.sign"; // XK_CURRENCY (U+20A1, ₡)
	case 0x10020a2: return "cruzeiro.sign"; // XK_CURRENCY (U+20A2, ₢)
	case 0x10020a3: return "french.franc.sign"; // XK_CURRENCY (U+20A3, ₣)
	case 0x10020a4: return "lira.sign"; // XK_CURRENCY (U+20A4, ₤)
	case 0x10020a5: return "mill.sign"; // XK_CURRENCY (U+20A5, ₥)
	case 0x10020a6: return "naira.sign"; // XK_CURRENCY (U+20A6, ₦)
	case 0x10020a7: return "peseta.sign"; // XK_CURRENCY (U+20A7, ₧)
	case 0x10020a8: return "rupee.sign"; // XK_CURRENCY (U+20A8, ₨)
	case 0x10020a9: return "won.sign"; // XK_CURRENCY (U+20A9, ₩)
	case 0x10020aa: return "new.sheqel.sign"; // XK_CURRENCY (U+20AA, ₪)
	case 0x10020ab: return "dong.sign"; // XK_CURRENCY (U+20AB, ₫)
	case 0x20ac: return "euro.sign"; // XK_CURRENCY (U+20AC, €)

	// XK_MATHEMATICAL

	case 0x1002070: return "superscript.zero"; // XK_MATHEMATICAL (U+2070, ⁰)
	case 0x1002074: return "superscript.four"; // XK_MATHEMATICAL (U+2074, ⁴)
	case 0x1002075: return "superscript.five"; // XK_MATHEMATICAL (U+2075, ⁵)
	case 0x1002076: return "superscript.six"; // XK_MATHEMATICAL (U+2076, ⁶)
	case 0x1002077: return "superscript.seven"; // XK_MATHEMATICAL (U+2077, ⁷)
	case 0x1002078: return "superscript.eight"; // XK_MATHEMATICAL (U+2078, ⁸)
	case 0x1002079: return "superscript.nine"; // XK_MATHEMATICAL (U+2079, ⁹)
	case 0x1002080: return "subscript.zero"; // XK_MATHEMATICAL (U+2080, ₀)
	case 0x1002081: return "subscript.one"; // XK_MATHEMATICAL (U+2081, ₁)
	case 0x1002082: return "subscript.two"; // XK_MATHEMATICAL (U+2082, ₂)
	case 0x1002083: return "subscript.three"; // XK_MATHEMATICAL (U+2083, ₃)
	case 0x1002084: return "subscript.four"; // XK_MATHEMATICAL (U+2084, ₄)
	case 0x1002085: return "subscript.five"; // XK_MATHEMATICAL (U+2085, ₅)
	case 0x1002086: return "subscript.six"; // XK_MATHEMATICAL (U+2086, ₆)
	case 0x1002087: return "subscript.seven"; // XK_MATHEMATICAL (U+2087, ₇)
	case 0x1002088: return "subscript.eight"; // XK_MATHEMATICAL (U+2088, ₈)
	case 0x1002089: return "subscript.nine"; // XK_MATHEMATICAL (U+2089, ₉)
	case 0x1002202: return "partial.differential"; // XK_MATHEMATICAL (U+2202, ∂)
	case 0x1002205: return "null.set"; // XK_MATHEMATICAL (U+2205, ∅)
	case 0x1002208: return "element.of"; // XK_MATHEMATICAL (U+2208, ∈)
	case 0x1002209: return "not.an.element.of"; // XK_MATHEMATICAL (U+2209, ∉)
	case 0x100220b: return "contains.as.member"; // XK_MATHEMATICAL (U+220B, ∋)
	case 0x100221a: return "square.root"; // XK_MATHEMATICAL (U+221A, √)
	case 0x100221b: return "cube.root"; // XK_MATHEMATICAL (U+221B, ∛)
	case 0x100221c: return "fourth.root"; // XK_MATHEMATICAL (U+221C, ∜)
	case 0x100222c: return "double.integral"; // XK_MATHEMATICAL (U+222C, ∬)
	case 0x100222d: return "triple.integral"; // XK_MATHEMATICAL (U+222D, ∭)
	case 0x1002235: return "because"; // XK_MATHEMATICAL (U+2235, ∵)
	case 0x1002248: return "almost.equal.to"; // XK_MATHEMATICAL (U+2245, ≅)
	case 0x1002247: return "not.almost.equal.to"; // XK_MATHEMATICAL (U+2247, ≇)
	case 0x1002262: return "not.identical.to"; // XK_MATHEMATICAL (U+2262, ≢)
	case 0x1002263: return "strictly.equivalent.to"; // XK_MATHEMATICAL (U+2263, ≣)

	// XK_BRAILLE

	case 0xfff1: return "braille.dot.1"; // XK_BRAILLE
	case 0xfff2: return "braille.dot.2"; // XK_BRAILLE
	case 0xfff3: return "braille.dot.3"; // XK_BRAILLE
	case 0xfff4: return "braille.dot.4"; // XK_BRAILLE
	case 0xfff5: return "braille.dot.5"; // XK_BRAILLE
	case 0xfff6: return "braille.dot.6"; // XK_BRAILLE
	case 0xfff7: return "braille.dot.7"; // XK_BRAILLE
	case 0xfff8: return "braille.dot.8"; // XK_BRAILLE
	case 0xfff9: return "braille.dot.9"; // XK_BRAILLE
	case 0xfffa: return "braille.dot.10"; // XK_BRAILLE
	case 0x1002800: return "braille.pattern.blank"; // XK_BRAILLE (U+2800, ⠀)
	case 0x1002801: return "braille.pattern.dots_1"; // XK_BRAILLE (U+2801, ⠁)
	case 0x1002802: return "braille.pattern.dots_2"; // XK_BRAILLE (U+2802, ⠂)
	case 0x1002803: return "braille.pattern.dots_12"; // XK_BRAILLE (U+2803, ⠃)
	case 0x1002804: return "braille.pattern.dots_3"; // XK_BRAILLE (U+2804, ⠄)
	case 0x1002805: return "braille.pattern.dots_13"; // XK_BRAILLE (U+2805, ⠅)
	case 0x1002806: return "braille.pattern.dots_23"; // XK_BRAILLE (U+2806, ⠆)
	case 0x1002807: return "braille.pattern.dots_123"; // XK_BRAILLE (U+2807, ⠇)
	case 0x1002808: return "braille.pattern.dots_4"; // XK_BRAILLE (U+2808, ⠈)
	case 0x1002809: return "braille.pattern.dots_14"; // XK_BRAILLE (U+2809, ⠉)
	case 0x100280a: return "braille.pattern.dots_24"; // XK_BRAILLE (U+280a, ⠊)
	case 0x100280b: return "braille.pattern.dots_124"; // XK_BRAILLE (U+280b, ⠋)
	case 0x100280c: return "braille.pattern.dots_34"; // XK_BRAILLE (U+280c, ⠌)
	case 0x100280d: return "braille.pattern.dots_134"; // XK_BRAILLE (U+280d, ⠍)
	case 0x100280e: return "braille.pattern.dots_234"; // XK_BRAILLE (U+280e, ⠎)
	case 0x100280f: return "braille.pattern.dots_1234"; // XK_BRAILLE (U+280f, ⠏)
	case 0x1002810: return "braille.pattern.dots_5"; // XK_BRAILLE (U+2810, ⠐)
	case 0x1002811: return "braille.pattern.dots_15"; // XK_BRAILLE (U+2811, ⠑)
	case 0x1002812: return "braille.pattern.dots_25"; // XK_BRAILLE (U+2812, ⠒)
	case 0x1002813: return "braille.pattern.dots_125"; // XK_BRAILLE (U+2813, ⠓)
	case 0x1002814: return "braille.pattern.dots_35"; // XK_BRAILLE (U+2814, ⠔)
	case 0x1002815: return "braille.pattern.dots_135"; // XK_BRAILLE (U+2815, ⠕)
	case 0x1002816: return "braille.pattern.dots_235"; // XK_BRAILLE (U+2816, ⠖)
	case 0x1002817: return "braille.pattern.dots_1235"; // XK_BRAILLE (U+2817, ⠗)
	case 0x1002818: return "braille.pattern.dots_45"; // XK_BRAILLE (U+2818, ⠘)
	case 0x1002819: return "braille.pattern.dots_145"; // XK_BRAILLE (U+2819, ⠙)
	case 0x100281a: return "braille.pattern.dots_245"; // XK_BRAILLE (U+281a, ⠚)
	case 0x100281b: return "braille.pattern.dots_1245"; // XK_BRAILLE (U+281b, ⠛)
	case 0x100281c: return "braille.pattern.dots_345"; // XK_BRAILLE (U+281c, ⠜)
	case 0x100281d: return "braille.pattern.dots_1345"; // XK_BRAILLE (U+281d, ⠝)
	case 0x100281e: return "braille.pattern.dots_2345"; // XK_BRAILLE (U+281e, ⠞)
	case 0x100281f: return "braille.pattern.dots_12345"; // XK_BRAILLE (U+281f, ⠟)
	case 0x1002820: return "braille.pattern.dots_6"; // XK_BRAILLE (U+2820, ⠠)
	case 0x1002821: return "braille.pattern.dots_16"; // XK_BRAILLE (U+2821, ⠡)
	case 0x1002822: return "braille.pattern.dots_26"; // XK_BRAILLE (U+2822, ⠢)
	case 0x1002823: return "braille.pattern.dots_126"; // XK_BRAILLE (U+2823, ⠣)
	case 0x1002824: return "braille.pattern.dots_36"; // XK_BRAILLE (U+2824, ⠤)
	case 0x1002825: return "braille.pattern.dots_136"; // XK_BRAILLE (U+2825, ⠥)
	case 0x1002826: return "braille.pattern.dots_236"; // XK_BRAILLE (U+2826, ⠦)
	case 0x1002827: return "braille.pattern.dots_1236"; // XK_BRAILLE (U+2827, ⠧)
	case 0x1002828: return "braille.pattern.dots_46"; // XK_BRAILLE (U+2828, ⠨)
	case 0x1002829: return "braille.pattern.dots_146"; // XK_BRAILLE (U+2829, ⠩)
	case 0x100282a: return "braille.pattern.dots_246"; // XK_BRAILLE (U+282a, ⠪)
	case 0x100282b: return "braille.pattern.dots_1246"; // XK_BRAILLE (U+282b, ⠫)
	case 0x100282c: return "braille.pattern.dots_346"; // XK_BRAILLE (U+282c, ⠬)
	case 0x100282d: return "braille.pattern.dots_1346"; // XK_BRAILLE (U+282d, ⠭)
	case 0x100282e: return "braille.pattern.dots_2346"; // XK_BRAILLE (U+282e, ⠮)
	case 0x100282f: return "braille.pattern.dots_12346"; // XK_BRAILLE (U+282f, ⠯)
	case 0x1002830: return "braille.pattern.dots_56"; // XK_BRAILLE (U+2830, ⠰)
	case 0x1002831: return "braille.pattern.dots_156"; // XK_BRAILLE (U+2831, ⠱)
	case 0x1002832: return "braille.pattern.dots_256"; // XK_BRAILLE (U+2832, ⠲)
	case 0x1002833: return "braille.pattern.dots_1256"; // XK_BRAILLE (U+2833, ⠳)
	case 0x1002834: return "braille.pattern.dots_356"; // XK_BRAILLE (U+2834, ⠴)
	case 0x1002835: return "braille.pattern.dots_1356"; // XK_BRAILLE (U+2835, ⠵)
	case 0x1002836: return "braille.pattern.dots_2356"; // XK_BRAILLE (U+2836, ⠶)
	case 0x1002837: return "braille.pattern.dots_12356"; // XK_BRAILLE (U+2837, ⠷)
	case 0x1002838: return "braille.pattern.dots_456"; // XK_BRAILLE (U+2838, ⠸)
	case 0x1002839: return "braille.pattern.dots_1456"; // XK_BRAILLE (U+2839, ⠹)
	case 0x100283a: return "braille.pattern.dots_2456"; // XK_BRAILLE (U+283a, ⠺)
	case 0x100283b: return "braille.pattern.dots_12456"; // XK_BRAILLE (U+283b, ⠻)
	case 0x100283c: return "braille.pattern.dots_3456"; // XK_BRAILLE (U+283c, ⠼)
	case 0x100283d: return "braille.pattern.dots_13456"; // XK_BRAILLE (U+283d, ⠽)
	case 0x100283e: return "braille.pattern.dots_23456"; // XK_BRAILLE (U+283e, ⠾)
	case 0x100283f: return "braille.pattern.dots_123456"; // XK_BRAILLE (U+283f, ⠿)
	case 0x1002840: return "braille.pattern.dots_7"; // XK_BRAILLE (U+2840, ⡀)
	case 0x1002841: return "braille.pattern.dots_17"; // XK_BRAILLE (U+2841, ⡁)
	case 0x1002842: return "braille.pattern.dots_27"; // XK_BRAILLE (U+2842, ⡂)
	case 0x1002843: return "braille.pattern.dots_127"; // XK_BRAILLE (U+2843, ⡃)
	case 0x1002844: return "braille.pattern.dots_37"; // XK_BRAILLE (U+2844, ⡄)
	case 0x1002845: return "braille.pattern.dots_137"; // XK_BRAILLE (U+2845, ⡅)
	case 0x1002846: return "braille.pattern.dots_237"; // XK_BRAILLE (U+2846, ⡆)
	case 0x1002847: return "braille.pattern.dots_1237"; // XK_BRAILLE (U+2847, ⡇)
	case 0x1002848: return "braille.pattern.dots_47"; // XK_BRAILLE (U+2848, ⡈)
	case 0x1002849: return "braille.pattern.dots_147"; // XK_BRAILLE (U+2849, ⡉)
	case 0x100284a: return "braille.pattern.dots_247"; // XK_BRAILLE (U+284a, ⡊)
	case 0x100284b: return "braille.pattern.dots_1247"; // XK_BRAILLE (U+284b, ⡋)
	case 0x100284c: return "braille.pattern.dots_347"; // XK_BRAILLE (U+284c, ⡌)
	case 0x100284d: return "braille.pattern.dots_1347"; // XK_BRAILLE (U+284d, ⡍)
	case 0x100284e: return "braille.pattern.dots_2347"; // XK_BRAILLE (U+284e, ⡎)
	case 0x100284f: return "braille.pattern.dots_12347"; // XK_BRAILLE (U+284f, ⡏)
	case 0x1002850: return "braille.pattern.dots_57"; // XK_BRAILLE (U+2850, ⡐)
	case 0x1002851: return "braille.pattern.dots_157"; // XK_BRAILLE (U+2851, ⡑)
	case 0x1002852: return "braille.pattern.dots_257"; // XK_BRAILLE (U+2852, ⡒)
	case 0x1002853: return "braille.pattern.dots_1257"; // XK_BRAILLE (U+2853, ⡓)
	case 0x1002854: return "braille.pattern.dots_357"; // XK_BRAILLE (U+2854, ⡔)
	case 0x1002855: return "braille.pattern.dots_1357"; // XK_BRAILLE (U+2855, ⡕)
	case 0x1002856: return "braille.pattern.dots_2357"; // XK_BRAILLE (U+2856, ⡖)
	case 0x1002857: return "braille.pattern.dots_12357"; // XK_BRAILLE (U+2857, ⡗)
	case 0x1002858: return "braille.pattern.dots_457"; // XK_BRAILLE (U+2858, ⡘)
	case 0x1002859: return "braille.pattern.dots_1457"; // XK_BRAILLE (U+2859, ⡙)
	case 0x100285a: return "braille.pattern.dots_2457"; // XK_BRAILLE (U+285a, ⡚)
	case 0x100285b: return "braille.pattern.dots_12457"; // XK_BRAILLE (U+285b, ⡛)
	case 0x100285c: return "braille.pattern.dots_3457"; // XK_BRAILLE (U+285c, ⡜)
	case 0x100285d: return "braille.pattern.dots_13457"; // XK_BRAILLE (U+285d, ⡝)
	case 0x100285e: return "braille.pattern.dots_23457"; // XK_BRAILLE (U+285e, ⡞)
	case 0x100285f: return "braille.pattern.dots_123457"; // XK_BRAILLE (U+285f, ⡟)
	case 0x1002860: return "braille.pattern.dots_67"; // XK_BRAILLE (U+2860, ⡠)
	case 0x1002861: return "braille.pattern.dots_167"; // XK_BRAILLE (U+2861, ⡡)
	case 0x1002862: return "braille.pattern.dots_267"; // XK_BRAILLE (U+2862, ⡢)
	case 0x1002863: return "braille.pattern.dots_1267"; // XK_BRAILLE (U+2863, ⡣)
	case 0x1002864: return "braille.pattern.dots_367"; // XK_BRAILLE (U+2864, ⡤)
	case 0x1002865: return "braille.pattern.dots_1367"; // XK_BRAILLE (U+2865, ⡥)
	case 0x1002866: return "braille.pattern.dots_2367"; // XK_BRAILLE (U+2866, ⡦)
	case 0x1002867: return "braille.pattern.dots_12367"; // XK_BRAILLE (U+2867, ⡧)
	case 0x1002868: return "braille.pattern.dots_467"; // XK_BRAILLE (U+2868, ⡨)
	case 0x1002869: return "braille.pattern.dots_1467"; // XK_BRAILLE (U+2869, ⡩)
	case 0x100286a: return "braille.pattern.dots_2467"; // XK_BRAILLE (U+286a, ⡪)
	case 0x100286b: return "braille.pattern.dots_12467"; // XK_BRAILLE (U+286b, ⡫)
	case 0x100286c: return "braille.pattern.dots_3467"; // XK_BRAILLE (U+286c, ⡬)
	case 0x100286d: return "braille.pattern.dots_13467"; // XK_BRAILLE (U+286d, ⡭)
	case 0x100286e: return "braille.pattern.dots_23467"; // XK_BRAILLE (U+286e, ⡮)
	case 0x100286f: return "braille.pattern.dots_123467"; // XK_BRAILLE (U+286f, ⡯)
	case 0x1002870: return "braille.pattern.dots_567"; // XK_BRAILLE (U+2870, ⡰)
	case 0x1002871: return "braille.pattern.dots_1567"; // XK_BRAILLE (U+2871, ⡱)
	case 0x1002872: return "braille.pattern.dots_2567"; // XK_BRAILLE (U+2872, ⡲)
	case 0x1002873: return "braille.pattern.dots_12567"; // XK_BRAILLE (U+2873, ⡳)
	case 0x1002874: return "braille.pattern.dots_3567"; // XK_BRAILLE (U+2874, ⡴)
	case 0x1002875: return "braille.pattern.dots_13567"; // XK_BRAILLE (U+2875, ⡵)
	case 0x1002876: return "braille.pattern.dots_23567"; // XK_BRAILLE (U+2876, ⡶)
	case 0x1002877: return "braille.pattern.dots_123567"; // XK_BRAILLE (U+2877, ⡷)
	case 0x1002878: return "braille.pattern.dots_4567"; // XK_BRAILLE (U+2878, ⡸)
	case 0x1002879: return "braille.pattern.dots_14567"; // XK_BRAILLE (U+2879, ⡹)
	case 0x100287a: return "braille.pattern.dots_24567"; // XK_BRAILLE (U+287a, ⡺)
	case 0x100287b: return "braille.pattern.dots_124567"; // XK_BRAILLE (U+287b, ⡻)
	case 0x100287c: return "braille.pattern.dots_34567"; // XK_BRAILLE (U+287c, ⡼)
	case 0x100287d: return "braille.pattern.dots_134567"; // XK_BRAILLE (U+287d, ⡽)
	case 0x100287e: return "braille.pattern.dots_234567"; // XK_BRAILLE (U+287e, ⡾)
	case 0x100287f: return "braille.pattern.dots_1234567"; // XK_BRAILLE (U+287f, ⡿)
	case 0x1002880: return "braille.pattern.dots_8"; // XK_BRAILLE (U+2880, ⢀)
	case 0x1002881: return "braille.pattern.dots_18"; // XK_BRAILLE (U+2881, ⢁)
	case 0x1002882: return "braille.pattern.dots_28"; // XK_BRAILLE (U+2882, ⢂)
	case 0x1002883: return "braille.pattern.dots_128"; // XK_BRAILLE (U+2883, ⢃)
	case 0x1002884: return "braille.pattern.dots_38"; // XK_BRAILLE (U+2884, ⢄)
	case 0x1002885: return "braille.pattern.dots_138"; // XK_BRAILLE (U+2885, ⢅)
	case 0x1002886: return "braille.pattern.dots_238"; // XK_BRAILLE (U+2886, ⢆)
	case 0x1002887: return "braille.pattern.dots_1238"; // XK_BRAILLE (U+2887, ⢇)
	case 0x1002888: return "braille.pattern.dots_48"; // XK_BRAILLE (U+2888, ⢈)
	case 0x1002889: return "braille.pattern.dots_148"; // XK_BRAILLE (U+2889, ⢉)
	case 0x100288a: return "braille.pattern.dots_248"; // XK_BRAILLE (U+288a, ⢊)
	case 0x100288b: return "braille.pattern.dots_1248"; // XK_BRAILLE (U+288b, ⢋)
	case 0x100288c: return "braille.pattern.dots_348"; // XK_BRAILLE (U+288c, ⢌)
	case 0x100288d: return "braille.pattern.dots_1348"; // XK_BRAILLE (U+288d, ⢍)
	case 0x100288e: return "braille.pattern.dots_2348"; // XK_BRAILLE (U+288e, ⢎)
	case 0x100288f: return "braille.pattern.dots_12348"; // XK_BRAILLE (U+288f, ⢏)
	case 0x1002890: return "braille.pattern.dots_58"; // XK_BRAILLE (U+2890, ⢐)
	case 0x1002891: return "braille.pattern.dots_158"; // XK_BRAILLE (U+2891, ⢑)
	case 0x1002892: return "braille.pattern.dots_258"; // XK_BRAILLE (U+2892, ⢒)
	case 0x1002893: return "braille.pattern.dots_1258"; // XK_BRAILLE (U+2893, ⢓)
	case 0x1002894: return "braille.pattern.dots_358"; // XK_BRAILLE (U+2894, ⢔)
	case 0x1002895: return "braille.pattern.dots_1358"; // XK_BRAILLE (U+2895, ⢕)
	case 0x1002896: return "braille.pattern.dots_2358"; // XK_BRAILLE (U+2896, ⢖)
	case 0x1002897: return "braille.pattern.dots_12358"; // XK_BRAILLE (U+2897, ⢗)
	case 0x1002898: return "braille.pattern.dots_458"; // XK_BRAILLE (U+2898, ⢘)
	case 0x1002899: return "braille.pattern.dots_1458"; // XK_BRAILLE (U+2899, ⢙)
	case 0x100289a: return "braille.pattern.dots_2458"; // XK_BRAILLE (U+289a, ⢚)
	case 0x100289b: return "braille.pattern.dots_12458"; // XK_BRAILLE (U+289b, ⢛)
	case 0x100289c: return "braille.pattern.dots_3458"; // XK_BRAILLE (U+289c, ⢜)
	case 0x100289d: return "braille.pattern.dots_13458"; // XK_BRAILLE (U+289d, ⢝)
	case 0x100289e: return "braille.pattern.dots_23458"; // XK_BRAILLE (U+289e, ⢞)
	case 0x100289f: return "braille.pattern.dots_123458"; // XK_BRAILLE (U+289f, ⢟)
	case 0x10028a0: return "braille.pattern.dots_68"; // XK_BRAILLE (U+28a0, ⢠)
	case 0x10028a1: return "braille.pattern.dots_168"; // XK_BRAILLE (U+28a1, ⢡)
	case 0x10028a2: return "braille.pattern.dots_268"; // XK_BRAILLE (U+28a2, ⢢)
	case 0x10028a3: return "braille.pattern.dots_1268"; // XK_BRAILLE (U+28a3, ⢣)
	case 0x10028a4: return "braille.pattern.dots_368"; // XK_BRAILLE (U+28a4, ⢤)
	case 0x10028a5: return "braille.pattern.dots_1368"; // XK_BRAILLE (U+28a5, ⢥)
	case 0x10028a6: return "braille.pattern.dots_2368"; // XK_BRAILLE (U+28a6, ⢦)
	case 0x10028a7: return "braille.pattern.dots_12368"; // XK_BRAILLE (U+28a7, ⢧)
	case 0x10028a8: return "braille.pattern.dots_468"; // XK_BRAILLE (U+28a8, ⢨)
	case 0x10028a9: return "braille.pattern.dots_1468"; // XK_BRAILLE (U+28a9, ⢩)
	case 0x10028aa: return "braille.pattern.dots_2468"; // XK_BRAILLE (U+28aa, ⢪)
	case 0x10028ab: return "braille.pattern.dots_12468"; // XK_BRAILLE (U+28ab, ⢫)
	case 0x10028ac: return "braille.pattern.dots_3468"; // XK_BRAILLE (U+28ac, ⢬)
	case 0x10028ad: return "braille.pattern.dots_13468"; // XK_BRAILLE (U+28ad, ⢭)
	case 0x10028ae: return "braille.pattern.dots_23468"; // XK_BRAILLE (U+28ae, ⢮)
	case 0x10028af: return "braille.pattern.dots_123468"; // XK_BRAILLE (U+28af, ⢯)
	case 0x10028b0: return "braille.pattern.dots_568"; // XK_BRAILLE (U+28b0, ⢰)
	case 0x10028b1: return "braille.pattern.dots_1568"; // XK_BRAILLE (U+28b1, ⢱)
	case 0x10028b2: return "braille.pattern.dots_2568"; // XK_BRAILLE (U+28b2, ⢲)
	case 0x10028b3: return "braille.pattern.dots_12568"; // XK_BRAILLE (U+28b3, ⢳)
	case 0x10028b4: return "braille.pattern.dots_3568"; // XK_BRAILLE (U+28b4, ⢴)
	case 0x10028b5: return "braille.pattern.dots_13568"; // XK_BRAILLE (U+28b5, ⢵)
	case 0x10028b6: return "braille.pattern.dots_23568"; // XK_BRAILLE (U+28b6, ⢶)
	case 0x10028b7: return "braille.pattern.dots_123568"; // XK_BRAILLE (U+28b7, ⢷)
	case 0x10028b8: return "braille.pattern.dots_4568"; // XK_BRAILLE (U+28b8, ⢸)
	case 0x10028b9: return "braille.pattern.dots_14568"; // XK_BRAILLE (U+28b9, ⢹)
	case 0x10028ba: return "braille.pattern.dots_24568"; // XK_BRAILLE (U+28ba, ⢺)
	case 0x10028bb: return "braille.pattern.dots_124568"; // XK_BRAILLE (U+28bb, ⢻)
	case 0x10028bc: return "braille.pattern.dots_34568"; // XK_BRAILLE (U+28bc, ⢼)
	case 0x10028bd: return "braille.pattern.dots_134568"; // XK_BRAILLE (U+28bd, ⢽)
	case 0x10028be: return "braille.pattern.dots_234568"; // XK_BRAILLE (U+28be, ⢾)
	case 0x10028bf: return "braille.pattern.dots_1234568"; // XK_BRAILLE (U+28bf, ⢿)
	case 0x10028c0: return "braille.pattern.dots_78"; // XK_BRAILLE (U+28c0, ⣀)
	case 0x10028c1: return "braille.pattern.dots_178"; // XK_BRAILLE (U+28c1, ⣁)
	case 0x10028c2: return "braille.pattern.dots_278"; // XK_BRAILLE (U+28c2, ⣂)
	case 0x10028c3: return "braille.pattern.dots_1278"; // XK_BRAILLE (U+28c3, ⣃)
	case 0x10028c4: return "braille.pattern.dots_378"; // XK_BRAILLE (U+28c4, ⣄)
	case 0x10028c5: return "braille.pattern.dots_1378"; // XK_BRAILLE (U+28c5, ⣅)
	case 0x10028c6: return "braille.pattern.dots_2378"; // XK_BRAILLE (U+28c6, ⣆)
	case 0x10028c7: return "braille.pattern.dots_12378"; // XK_BRAILLE (U+28c7, ⣇)
	case 0x10028c8: return "braille.pattern.dots_478"; // XK_BRAILLE (U+28c8, ⣈)
	case 0x10028c9: return "braille.pattern.dots_1478"; // XK_BRAILLE (U+28c9, ⣉)
	case 0x10028ca: return "braille.pattern.dots_2478"; // XK_BRAILLE (U+28ca, ⣊)
	case 0x10028cb: return "braille.pattern.dots_12478"; // XK_BRAILLE (U+28cb, ⣋)
	case 0x10028cc: return "braille.pattern.dots_3478"; // XK_BRAILLE (U+28cc, ⣌)
	case 0x10028cd: return "braille.pattern.dots_13478"; // XK_BRAILLE (U+28cd, ⣍)
	case 0x10028ce: return "braille.pattern.dots_23478"; // XK_BRAILLE (U+28ce, ⣎)
	case 0x10028cf: return "braille.pattern.dots_123478"; // XK_BRAILLE (U+28cf, ⣏)
	case 0x10028d0: return "braille.pattern.dots_578"; // XK_BRAILLE (U+28d0, ⣐)
	case 0x10028d1: return "braille.pattern.dots_1578"; // XK_BRAILLE (U+28d1, ⣑)
	case 0x10028d2: return "braille.pattern.dots_2578"; // XK_BRAILLE (U+28d2, ⣒)
	case 0x10028d3: return "braille.pattern.dots_12578"; // XK_BRAILLE (U+28d3, ⣓)
	case 0x10028d4: return "braille.pattern.dots_3578"; // XK_BRAILLE (U+28d4, ⣔)
	case 0x10028d5: return "braille.pattern.dots_13578"; // XK_BRAILLE (U+28d5, ⣕)
	case 0x10028d6: return "braille.pattern.dots_23578"; // XK_BRAILLE (U+28d6, ⣖)
	case 0x10028d7: return "braille.pattern.dots_123578"; // XK_BRAILLE (U+28d7, ⣗)
	case 0x10028d8: return "braille.pattern.dots_4578"; // XK_BRAILLE (U+28d8, ⣘)
	case 0x10028d9: return "braille.pattern.dots_14578"; // XK_BRAILLE (U+28d9, ⣙)
	case 0x10028da: return "braille.pattern.dots_24578"; // XK_BRAILLE (U+28da, ⣚)
	case 0x10028db: return "braille.pattern.dots_124578"; // XK_BRAILLE (U+28db, ⣛)
	case 0x10028dc: return "braille.pattern.dots_34578"; // XK_BRAILLE (U+28dc, ⣜)
	case 0x10028dd: return "braille.pattern.dots_134578"; // XK_BRAILLE (U+28dd, ⣝)
	case 0x10028de: return "braille.pattern.dots_234578"; // XK_BRAILLE (U+28de, ⣞)
	case 0x10028df: return "braille.pattern.dots_1234578"; // XK_BRAILLE (U+28df, ⣟)
	case 0x10028e0: return "braille.pattern.dots_678"; // XK_BRAILLE (U+28e0, ⣠)
	case 0x10028e1: return "braille.pattern.dots_1678"; // XK_BRAILLE (U+28e1, ⣡)
	case 0x10028e2: return "braille.pattern.dots_2678"; // XK_BRAILLE (U+28e2, ⣢)
	case 0x10028e3: return "braille.pattern.dots_12678"; // XK_BRAILLE (U+28e3, ⣣)
	case 0x10028e4: return "braille.pattern.dots_3678"; // XK_BRAILLE (U+28e4, ⣤)
	case 0x10028e5: return "braille.pattern.dots_13678"; // XK_BRAILLE (U+28e5, ⣥)
	case 0x10028e6: return "braille.pattern.dots_23678"; // XK_BRAILLE (U+28e6, ⣦)
	case 0x10028e7: return "braille.pattern.dots_123678"; // XK_BRAILLE (U+28e7, ⣧)
	case 0x10028e8: return "braille.pattern.dots_4678"; // XK_BRAILLE (U+28e8, ⣨)
	case 0x10028e9: return "braille.pattern.dots_14678"; // XK_BRAILLE (U+28e9, ⣩)
	case 0x10028ea: return "braille.pattern.dots_24678"; // XK_BRAILLE (U+28ea, ⣪)
	case 0x10028eb: return "braille.pattern.dots_124678"; // XK_BRAILLE (U+28eb, ⣫)
	case 0x10028ec: return "braille.pattern.dots_34678"; // XK_BRAILLE (U+28ec, ⣬)
	case 0x10028ed: return "braille.pattern.dots_134678"; // XK_BRAILLE (U+28ed, ⣭)
	case 0x10028ee: return "braille.pattern.dots_234678"; // XK_BRAILLE (U+28ee, ⣮)
	case 0x10028ef: return "braille.pattern.dots_1234678"; // XK_BRAILLE (U+28ef, ⣯)
	case 0x10028f0: return "braille.pattern.dots_5678"; // XK_BRAILLE (U+28f0, ⣰)
	case 0x10028f1: return "braille.pattern.dots_15678"; // XK_BRAILLE (U+28f1, ⣱)
	case 0x10028f2: return "braille.pattern.dots_25678"; // XK_BRAILLE (U+28f2, ⣲)
	case 0x10028f3: return "braille.pattern.dots_125678"; // XK_BRAILLE (U+28f3, ⣳)
	case 0x10028f4: return "braille.pattern.dots_35678"; // XK_BRAILLE (U+28f4, ⣴)
	case 0x10028f5: return "braille.pattern.dots_135678"; // XK_BRAILLE (U+28f5, ⣵)
	case 0x10028f6: return "braille.pattern.dots_235678"; // XK_BRAILLE (U+28f6, ⣶)
	case 0x10028f7: return "braille.pattern.dots_1235678"; // XK_BRAILLE (U+28f7, ⣷)
	case 0x10028f8: return "braille.pattern.dots_45678"; // XK_BRAILLE (U+28f8, ⣸)
	case 0x10028f9: return "braille.pattern.dots_145678"; // XK_BRAILLE (U+28f9, ⣹)
	case 0x10028fa: return "braille.pattern.dots_245678"; // XK_BRAILLE (U+28fa, ⣺)
	case 0x10028fb: return "braille.pattern.dots_1245678"; // XK_BRAILLE (U+28fb, ⣻)
	case 0x10028fc: return "braille.pattern.dots_345678"; // XK_BRAILLE (U+28fc, ⣼)
	case 0x10028fd: return "braille.pattern.dots_1345678"; // XK_BRAILLE (U+28fd, ⣽)
	case 0x10028fe: return "braille.pattern.dots_2345678"; // XK_BRAILLE (U+28fe, ⣾)
	case 0x10028ff: return "braille.pattern.dots_12345678"; // XK_BRAILLE (U+28ff, ⣿)

	// XK_SINHALA

	case 0x1000d82: return "sinhala.anusvaraya"; // XK_SINHALA (U+0D82, ං)
	case 0x1000d83: return "sinhala.visargaya"; // XK_SINHALA (U+0D83, ඃ)
	case 0x1000d85: return "sinhala.ayanna"; // XK_SINHALA (U+0D85, අ)
	case 0x1000d86: return "sinhala.aayanna"; // XK_SINHALA (U+0D86, ආ)
	case 0x1000d87: return "sinhala.aeyanna"; // XK_SINHALA (U+0D87, ඇ)
	case 0x1000d88: return "sinhala.aeeyanna"; // XK_SINHALA (U+0D88, ඈ)
	case 0x1000d89: return "sinhala.iyanna"; // XK_SINHALA (U+0D89, ඉ)
	case 0x1000d8a: return "sinhala.iiyanna"; // XK_SINHALA (U+0D8A, ඊ)
	case 0x1000d8b: return "sinhala.uyanna"; // XK_SINHALA (U+0D8B, උ)
	case 0x1000d8c: return "sinhala.uuyanna"; // XK_SINHALA (U+0D8C, ඌ)
	case 0x1000d8d: return "sinhala.iruyanna"; // XK_SINHALA (U+0D8D, ඍ)
	case 0x1000d8e: return "sinhala.iruuyanna"; // XK_SINHALA (U+0D8E, ඎ)
	case 0x1000d8f: return "sinhala.iluyanna"; // XK_SINHALA (U+0D8F, ඏ)
	case 0x1000d90: return "sinhala.iluuyanna"; // XK_SINHALA (U+0D90, ඐ)
	case 0x1000d91: return "sinhala.eyanna"; // XK_SINHALA (U+0D91, එ)
	case 0x1000d92: return "sinhala.eeyanna"; // XK_SINHALA (U+0D92, ඒ)
	case 0x1000d93: return "sinhala.aiyanna"; // XK_SINHALA (U+0D93, ඓ)
	case 0x1000d94: return "sinhala.oyanna"; // XK_SINHALA (U+0D94, ඔ)
	case 0x1000d95: return "sinhala.ooyanna"; // XK_SINHALA (U+0D95, ඕ)
	case 0x1000d96: return "sinhala.auyanna"; // XK_SINHALA (U+0D96, ඖ)
	case 0x1000d9a: return "sinhala.kayanna"; // XK_SINHALA (U+0D9A, ක)
	case 0x1000d9b: return "sinhala.maha.kayanna"; // XK_SINHALA (U+0D9B, ඛ)
	case 0x1000d9c: return "sinhala.gayanna"; // XK_SINHALA (U+0D9C, ග)
	case 0x1000d9d: return "sinhala.maha.gayanna"; // XK_SINHALA (U+0D9D, ඝ)
	case 0x1000d9e: return "sinhala.kantaja.naasikyaya"; // XK_SINHALA (U+0D9E, ඞ)
	case 0x1000d9f: return "sinhala.sanyaka.gayanna"; // XK_SINHALA (U+0D9F, ඟ)
	case 0x1000da0: return "sinhala.cayanna"; // XK_SINHALA (U+0DA0, ච)
	case 0x1000da1: return "sinhala.maha.cayanna"; // XK_SINHALA (U+0DA1, ඡ)
	case 0x1000da2: return "sinhala.jayanna"; // XK_SINHALA (U+0DA2, ජ)
	case 0x1000da3: return "sinhala.maha.jayanna"; // XK_SINHALA (U+0DA3, ඣ)
	case 0x1000da4: return "sinhala.taaluja.naasikyaya"; // XK_SINHALA (U+0DA4, ඤ)
	case 0x1000da5: return "sinhala.taaluja.sanyooga.naasikyaya"; // XK_SINHALA (U+0DA5, ඥ)
	case 0x1000da6: return "sinhala.sanyaka.jayanna"; // XK_SINHALA (U+0DA6, ඦ)
	case 0x1000da7: return "sinhala.ttayanna"; // XK_SINHALA (U+0DA7, ට)
	case 0x1000da8: return "sinhala.maha.ttayanna"; // XK_SINHALA (U+0DA8, ඨ)
	case 0x1000da9: return "sinhala.ddayanna"; // XK_SINHALA (U+0DA9, ඩ)
	case 0x1000daa: return "sinhala.maha.ddayanna"; // XK_SINHALA (U+0DAA, ඪ)
	case 0x1000dab: return "sinhala.muurdhaja.nayanna"; // XK_SINHALA (U+0DAB, ණ)
	case 0x1000dac: return "sinhala.sanyaka.ddayanna"; // XK_SINHALA (U+0DAC, ඬ)
	case 0x1000dad: return "sinhala.tayanna"; // XK_SINHALA (U+0DAD, ත)
	case 0x1000dae: return "sinhala.maha.tayanna"; // XK_SINHALA (U+0DAE, ථ)
	case 0x1000daf: return "sinhala.dayanna"; // XK_SINHALA (U+0DAF, ද)
	case 0x1000db0: return "sinhala.maha.dayanna"; // XK_SINHALA (U+0DB0, ධ)
	case 0x1000db1: return "sinhala.dantaja.nayanna"; // XK_SINHALA (U+0DB1, න)
	case 0x1000db3: return "sinhala.sanyaka.dayanna"; // XK_SINHALA (U+0DB3, ඳ)
	case 0x1000db4: return "sinhala.payanna"; // XK_SINHALA (U+0DB4, ප)
	case 0x1000db5: return "sinhala.maha.payanna"; // XK_SINHALA (U+0DB5, ඵ)
	case 0x1000db6: return "sinhala.bayanna"; // XK_SINHALA (U+0DB6, බ)
	case 0x1000db7: return "sinhala.maha.bayanna"; // XK_SINHALA (U+0DB7, භ)
	case 0x1000db8: return "sinhala.mayanna"; // XK_SINHALA (U+0DB8, ම)
	case 0x1000db9: return "sinhala.amba.bayanna"; // XK_SINHALA (U+0DB9, ඹ)
	case 0x1000dba: return "sinhala.yayanna"; // XK_SINHALA (U+0DBA, ය)
	case 0x1000dbb: return "sinhala.rayanna"; // XK_SINHALA (U+0DBB, ර)
	case 0x1000dbd: return "sinhala.dantaja.layanna"; // XK_SINHALA (U+0DBD, ල)
	case 0x1000dc0: return "sinhala.vayanna"; // XK_SINHALA (U+0DC0, ව)
	case 0x1000dc1: return "sinhala.taaluja.sayanna"; // XK_SINHALA (U+0DC1, ශ)
	case 0x1000dc2: return "sinhala.muurdhaja.sayanna"; // XK_SINHALA (U+0DC2, ෂ)
	case 0x1000dc3: return "sinhala.dantaja.sayanna"; // XK_SINHALA (U+0DC3, ස)
	case 0x1000dc4: return "sinhala.hayanna"; // XK_SINHALA (U+0DC4, හ)
	case 0x1000dc5: return "sinhala.muurdhaja.layanna"; // XK_SINHALA (U+0DC5, ළ)
	case 0x1000dc6: return "sinhala.fayanna"; // XK_SINHALA (U+0DC6, ෆ)
	case 0x1000dca: return "sinhala.al_lakuna"; // XK_SINHALA (U+0DCA, ්)
	case 0x1000dcf: return "sinhala.aela_pilla"; // XK_SINHALA (U+0DCF, ා)
	case 0x1000dd0: return "sinhala.aeda_pilla"; // XK_SINHALA (U+0DD0, ැ)
	case 0x1000dd1: return "sinhala.diga.aeda_pilla"; // XK_SINHALA (U+0DD1, ෑ)
	case 0x1000dd2: return "sinhala.is_pilla"; // XK_SINHALA (U+0DD2, ි)
	case 0x1000dd3: return "sinhala.diga.is_pilla"; // XK_SINHALA (U+0DD3, ී)
	case 0x1000dd4: return "sinhala.paa_pilla"; // XK_SINHALA (U+0DD4, ු)
	case 0x1000dd6: return "sinhala.diga.paa_pilla"; // XK_SINHALA (U+0DD6, ූ)
	case 0x1000dd8: return "sinhala.gaetta_pilla"; // XK_SINHALA (U+0DD8, ෘ)
	case 0x1000dd9: return "sinhala.kombuva"; // XK_SINHALA (U+0DD9, ෙ)
	case 0x1000dda: return "sinhala.diga.kombuva"; // XK_SINHALA (U+0DDA, ේ)
	case 0x1000ddb: return "sinhala.kombu.deka"; // XK_SINHALA (U+0DDB, ෛ)
	case 0x1000ddc: return "sinhala.kombuva.haa"; // XK_SINHALA (U+0DDC, ො)
	case 0x1000ddd: return "sinhala.kombuva.haa.diga"; // XK_SINHALA (U+0DDD, ෝ)
	case 0x1000dde: return "sinhala.kombuva.haa.gayanukitta"; // XK_SINHALA (U+0DDE, ෞ)
	case 0x1000ddf: return "sinhala.gayanukitta"; // XK_SINHALA (U+0DDF, ෟ)
	case 0x1000df2: return "sinhala.diga.gaetta_pilla"; // XK_SINHALA (U+0DF2, ෲ)
	case 0x1000df3: return "sinhala.diga.gayanukitta"; // XK_SINHALA (U+0DF3, ෳ)
	case 0x1000df4: return "sinhala.kunddaliya"; // XK_SINHALA (U+0DF4, ෴)

	default: return "void";
	}
}
