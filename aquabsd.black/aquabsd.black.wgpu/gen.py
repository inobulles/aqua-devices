# This Source Form is subject to the terms of the AQUA Software License, v. 1.0.
# Copyright (c) 2023 Aymeric Wibo

with open("webgpu.h") as f:
	lines = map(str.strip, f.readlines())

prototypes = filter(lambda line: line.startswith("WGPU_EXPORT "), lines)

count = 0x1000 # offset to leave space for non-WebGPU commands
cmds = ""
impls = ""

for prototype in prototypes:
	type_and_name, args = prototype.split('(')
	_, *return_type, name = type_and_name.split()
	return_type = ' '.join(return_type)

	args = args.split(')')[0].split(", ")
	arg_names = []

	for arg in args:
		*type_, arg_name = arg.split()
		arg_names.append(arg_name)

	cmds += f"\tCMD_{name} = 0x{count:04x},\n"
	ret = "" if return_type == "void" else f"return (uint64_t) "

	args_struct = ";\n\t\t\t".join(args)
	args_call = ", ".join(map(lambda name: f"args->{name}", arg_names))

	impls += f"""
	else if (cmd == CMD_{name}) {{
		struct {{
			{args_struct};
		}} __attribute__((packed))* const args = data;

		{ret}{name}({args_call});
	}}
"""

	count += 1

WIN_DEVICE = "aquabsd.alps.win"

out = f"""// This Source Form is subject to the terms of the AQUA Software License, v. 1.0.
// Copyright (c) 2023 Aymeric Wibo

// this file is automatically generated by 'aqua-devices/aquabsd.black/wgpu/gen.py'
// if you need to update this, read the 'aqua-devices/aquabsd.black/wgpu/README.md' document

#include <stdint.h>
#include "webgpu.h"

#include <{WIN_DEVICE}/public.h>

typedef enum {{
	CMD_SURFACE_FROM_WIN = 0x0000,

	// WebGPU commands

{cmds}}} cmd_t;

uint64_t (*kos_query_device) (uint64_t, uint64_t name);
void* (*kos_load_device_function) (uint64_t device, const char* name);
uint64_t (*kos_callback) (uint64_t callback, int argument_count, ...);

static uint64_t win_device = -1;

int load(void) {{
	win_device = kos_query_device(0, (uint64_t) "{WIN_DEVICE}");

	if (win_device != (uint64_t) -1) {{
		aquabsd_alps_win_get_draw_win = kos_load_device_function(win_device, "get_draw_win");
	}}

	return 0;
}}

uint64_t send(uint16_t _cmd, void* data) {{
	cmd_t const cmd = _cmd;

	if (cmd == CMD_SURFACE_FROM_WIN) {{
		struct {{
			WGPUInstance instance;
			aquabsd_alps_win_t* win;
		}} __attribute__((packed))* const args = data;

		WGPUSurfaceDescriptorFromXcbWindow const descr_from_xcb = {{
			.chain = (WGPUChainedStruct const) {{
				.sType = WGPUSType_SurfaceDescriptorFromXcbWindow,
			}},
			.connection = args->win->connection,
			.window = args->win->win,
		}};

		WGPUSurfaceDescriptor const descr = {{
			.nextInChain = (WGPUChainedStruct const*) &descr_from_xcb,
		}};

		WGPUSurface const surface = wgpuInstanceCreateSurface(args->instance, &descr);
		return (uint64_t) surface;
	}}
	{impls}
	return -1;
}}
"""

with open("main.c", "w") as f:
	f.write(out)
