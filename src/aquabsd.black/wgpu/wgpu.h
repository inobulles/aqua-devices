// This Source Form is subject to the terms of the AQUA Software License, v. 1.0.
// Copyright (c) 2023 Aymeric Wibo

// this file is automatically generated by 'aqua-devices/aquabsd.black/wgpu/gen.py'
// if you need to update this, read the 'aqua-devices/aquabsd.black/wgpu/README.md' document

#pragma once

#include <root.h>
#include <aquabsd/alps/win.h>

#include "wgpu_types.h"

static device_t wgpu_device = -1;

static int wgpu_init(void) {
	wgpu_device = query_device("aquabsd.black.wgpu");

	if (wgpu_device == NO_DEVICE) {
		return -ERR_NO_DEVICE;
	}

	return SUCCESS;
}

static WGPUSurface wgpu_surface_from_win(WGPUInstance instance, win_t* win) {
	struct {
		WGPUInstance instance;
		void* win;
	} __attribute__((packed)) const args = {
		.instance = instance,
		.win = (void*) win->internal_win,
	};

	return (WGPUSurface) send_device(wgpu_device, 0x0000, (void*) &args);
}

static WGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor const * descriptor) {
	struct {
		WGPUInstanceDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.descriptor = descriptor,
	};

	return (WGPUInstance) send_device(wgpu_device, 0x1000, (void*) &args);
}

static WGPUProc wgpuGetProcAddress(WGPUDevice device, char const * procName) {
	struct {
		WGPUDevice device;
		char const * procName;
	} __attribute__((packed)) const args = {
		.device = device,
		.procName = procName,
	};

	return (WGPUProc) send_device(wgpu_device, 0x1001, (void*) &args);
}

static size_t wgpuAdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName * features) {
	struct {
		WGPUAdapter adapter;
		WGPUFeatureName * features;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
		.features = features,
	};

	return (size_t) send_device(wgpu_device, 0x1002, (void*) &args);
}

static bool wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) {
	struct {
		WGPUAdapter adapter;
		WGPUSupportedLimits * limits;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
		.limits = limits,
	};

	return (bool) send_device(wgpu_device, 0x1003, (void*) &args);
}

static void wgpuAdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties * properties) {
	struct {
		WGPUAdapter adapter;
		WGPUAdapterProperties * properties;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
		.properties = properties,
	};

	send_device(wgpu_device, 0x1004, (void*) &args);
}

static bool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) {
	struct {
		WGPUAdapter adapter;
		WGPUFeatureName feature;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
		.feature = feature,
	};

	return (bool) send_device(wgpu_device, 0x1005, (void*) &args);
}

static void wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {
	struct {
		WGPUAdapter adapter;
		WGPU_NULLABLE WGPUDeviceDescriptor const * descriptor;
		WGPURequestDeviceCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
		.descriptor = descriptor,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1006, (void*) &args);
}

static void wgpuAdapterReference(WGPUAdapter adapter) {
	struct {
		WGPUAdapter adapter;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
	};

	send_device(wgpu_device, 0x1007, (void*) &args);
}

static void wgpuAdapterRelease(WGPUAdapter adapter) {
	struct {
		WGPUAdapter adapter;
	} __attribute__((packed)) const args = {
		.adapter = adapter,
	};

	send_device(wgpu_device, 0x1008, (void*) &args);
}

static void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, char const * label) {
	struct {
		WGPUBindGroup bindGroup;
		char const * label;
	} __attribute__((packed)) const args = {
		.bindGroup = bindGroup,
		.label = label,
	};

	send_device(wgpu_device, 0x1009, (void*) &args);
}

static void wgpuBindGroupReference(WGPUBindGroup bindGroup) {
	struct {
		WGPUBindGroup bindGroup;
	} __attribute__((packed)) const args = {
		.bindGroup = bindGroup,
	};

	send_device(wgpu_device, 0x100a, (void*) &args);
}

static void wgpuBindGroupRelease(WGPUBindGroup bindGroup) {
	struct {
		WGPUBindGroup bindGroup;
	} __attribute__((packed)) const args = {
		.bindGroup = bindGroup,
	};

	send_device(wgpu_device, 0x100b, (void*) &args);
}

static void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, char const * label) {
	struct {
		WGPUBindGroupLayout bindGroupLayout;
		char const * label;
	} __attribute__((packed)) const args = {
		.bindGroupLayout = bindGroupLayout,
		.label = label,
	};

	send_device(wgpu_device, 0x100c, (void*) &args);
}

static void wgpuBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout) {
	struct {
		WGPUBindGroupLayout bindGroupLayout;
	} __attribute__((packed)) const args = {
		.bindGroupLayout = bindGroupLayout,
	};

	send_device(wgpu_device, 0x100d, (void*) &args);
}

static void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) {
	struct {
		WGPUBindGroupLayout bindGroupLayout;
	} __attribute__((packed)) const args = {
		.bindGroupLayout = bindGroupLayout,
	};

	send_device(wgpu_device, 0x100e, (void*) &args);
}

static void wgpuBufferDestroy(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	send_device(wgpu_device, 0x100f, (void*) &args);
}

static void const * wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {
	struct {
		WGPUBuffer buffer;
		size_t offset;
		size_t size;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
		.offset = offset,
		.size = size,
	};

	return (void const *) send_device(wgpu_device, 0x1010, (void*) &args);
}

static WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	return (WGPUBufferMapState) send_device(wgpu_device, 0x1011, (void*) &args);
}

static void * wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {
	struct {
		WGPUBuffer buffer;
		size_t offset;
		size_t size;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
		.offset = offset,
		.size = size,
	};

	return (void *) send_device(wgpu_device, 0x1012, (void*) &args);
}

static uint64_t wgpuBufferGetSize(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	return (uint64_t) send_device(wgpu_device, 0x1013, (void*) &args);
}

static WGPUBufferUsageFlags wgpuBufferGetUsage(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	return (WGPUBufferUsageFlags) send_device(wgpu_device, 0x1014, (void*) &args);
}

static void wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {
	struct {
		WGPUBuffer buffer;
		WGPUMapModeFlags mode;
		size_t offset;
		size_t size;
		WGPUBufferMapCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
		.mode = mode,
		.offset = offset,
		.size = size,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1015, (void*) &args);
}

static void wgpuBufferSetLabel(WGPUBuffer buffer, char const * label) {
	struct {
		WGPUBuffer buffer;
		char const * label;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
		.label = label,
	};

	send_device(wgpu_device, 0x1016, (void*) &args);
}

static void wgpuBufferUnmap(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	send_device(wgpu_device, 0x1017, (void*) &args);
}

static void wgpuBufferReference(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	send_device(wgpu_device, 0x1018, (void*) &args);
}

static void wgpuBufferRelease(WGPUBuffer buffer) {
	struct {
		WGPUBuffer buffer;
	} __attribute__((packed)) const args = {
		.buffer = buffer,
	};

	send_device(wgpu_device, 0x1019, (void*) &args);
}

static void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, char const * label) {
	struct {
		WGPUCommandBuffer commandBuffer;
		char const * label;
	} __attribute__((packed)) const args = {
		.commandBuffer = commandBuffer,
		.label = label,
	};

	send_device(wgpu_device, 0x101a, (void*) &args);
}

static void wgpuCommandBufferReference(WGPUCommandBuffer commandBuffer) {
	struct {
		WGPUCommandBuffer commandBuffer;
	} __attribute__((packed)) const args = {
		.commandBuffer = commandBuffer,
	};

	send_device(wgpu_device, 0x101b, (void*) &args);
}

static void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer) {
	struct {
		WGPUCommandBuffer commandBuffer;
	} __attribute__((packed)) const args = {
		.commandBuffer = commandBuffer,
	};

	send_device(wgpu_device, 0x101c, (void*) &args);
}

static WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUComputePassDescriptor const * descriptor) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPU_NULLABLE WGPUComputePassDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.descriptor = descriptor,
	};

	return (WGPUComputePassEncoder) send_device(wgpu_device, 0x101d, (void*) &args);
}

static WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPURenderPassDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.descriptor = descriptor,
	};

	return (WGPURenderPassEncoder) send_device(wgpu_device, 0x101e, (void*) &args);
}

static void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUBuffer buffer;
		uint64_t offset;
		uint64_t size;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.buffer = buffer,
		.offset = offset,
		.size = size,
	};

	send_device(wgpu_device, 0x101f, (void*) &args);
}

static void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUBuffer source;
		uint64_t sourceOffset;
		WGPUBuffer destination;
		uint64_t destinationOffset;
		uint64_t size;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.source = source,
		.sourceOffset = sourceOffset,
		.destination = destination,
		.destinationOffset = destinationOffset,
		.size = size,
	};

	send_device(wgpu_device, 0x1020, (void*) &args);
}

static void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUImageCopyBuffer const * source;
		WGPUImageCopyTexture const * destination;
		WGPUExtent3D const * copySize;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.source = source,
		.destination = destination,
		.copySize = copySize,
	};

	send_device(wgpu_device, 0x1021, (void*) &args);
}

static void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUImageCopyTexture const * source;
		WGPUImageCopyBuffer const * destination;
		WGPUExtent3D const * copySize;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.source = source,
		.destination = destination,
		.copySize = copySize,
	};

	send_device(wgpu_device, 0x1022, (void*) &args);
}

static void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUImageCopyTexture const * source;
		WGPUImageCopyTexture const * destination;
		WGPUExtent3D const * copySize;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.source = source,
		.destination = destination,
		.copySize = copySize,
	};

	send_device(wgpu_device, 0x1023, (void*) &args);
}

static WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPU_NULLABLE WGPUCommandBufferDescriptor const * descriptor) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPU_NULLABLE WGPUCommandBufferDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.descriptor = descriptor,
	};

	return (WGPUCommandBuffer) send_device(wgpu_device, 0x1024, (void*) &args);
}

static void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * markerLabel) {
	struct {
		WGPUCommandEncoder commandEncoder;
		char const * markerLabel;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.markerLabel = markerLabel,
	};

	send_device(wgpu_device, 0x1025, (void*) &args);
}

static void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) {
	struct {
		WGPUCommandEncoder commandEncoder;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
	};

	send_device(wgpu_device, 0x1026, (void*) &args);
}

static void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel) {
	struct {
		WGPUCommandEncoder commandEncoder;
		char const * groupLabel;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.groupLabel = groupLabel,
	};

	send_device(wgpu_device, 0x1027, (void*) &args);
}

static void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUQuerySet querySet;
		uint32_t firstQuery;
		uint32_t queryCount;
		WGPUBuffer destination;
		uint64_t destinationOffset;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.querySet = querySet,
		.firstQuery = firstQuery,
		.queryCount = queryCount,
		.destination = destination,
		.destinationOffset = destinationOffset,
	};

	send_device(wgpu_device, 0x1028, (void*) &args);
}

static void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, char const * label) {
	struct {
		WGPUCommandEncoder commandEncoder;
		char const * label;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.label = label,
	};

	send_device(wgpu_device, 0x1029, (void*) &args);
}

static void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {
	struct {
		WGPUCommandEncoder commandEncoder;
		WGPUQuerySet querySet;
		uint32_t queryIndex;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
		.querySet = querySet,
		.queryIndex = queryIndex,
	};

	send_device(wgpu_device, 0x102a, (void*) &args);
}

static void wgpuCommandEncoderReference(WGPUCommandEncoder commandEncoder) {
	struct {
		WGPUCommandEncoder commandEncoder;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
	};

	send_device(wgpu_device, 0x102b, (void*) &args);
}

static void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder) {
	struct {
		WGPUCommandEncoder commandEncoder;
	} __attribute__((packed)) const args = {
		.commandEncoder = commandEncoder,
	};

	send_device(wgpu_device, 0x102c, (void*) &args);
}

static void wgpuComputePassEncoderBeginPipelineStatisticsQuery(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		WGPUQuerySet querySet;
		uint32_t queryIndex;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.querySet = querySet,
		.queryIndex = queryIndex,
	};

	send_device(wgpu_device, 0x102d, (void*) &args);
}

static void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		uint32_t workgroupCountX;
		uint32_t workgroupCountY;
		uint32_t workgroupCountZ;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.workgroupCountX = workgroupCountX,
		.workgroupCountY = workgroupCountY,
		.workgroupCountZ = workgroupCountZ,
	};

	send_device(wgpu_device, 0x102e, (void*) &args);
}

static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		WGPUBuffer indirectBuffer;
		uint64_t indirectOffset;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.indirectBuffer = indirectBuffer,
		.indirectOffset = indirectOffset,
	};

	send_device(wgpu_device, 0x102f, (void*) &args);
}

static void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
	};

	send_device(wgpu_device, 0x1030, (void*) &args);
}

static void wgpuComputePassEncoderEndPipelineStatisticsQuery(WGPUComputePassEncoder computePassEncoder) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
	};

	send_device(wgpu_device, 0x1031, (void*) &args);
}

static void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * markerLabel) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		char const * markerLabel;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.markerLabel = markerLabel,
	};

	send_device(wgpu_device, 0x1032, (void*) &args);
}

static void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
	};

	send_device(wgpu_device, 0x1033, (void*) &args);
}

static void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		char const * groupLabel;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.groupLabel = groupLabel,
	};

	send_device(wgpu_device, 0x1034, (void*) &args);
}

static void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		uint32_t groupIndex;
		WGPU_NULLABLE WGPUBindGroup group;
		size_t dynamicOffsetCount;
		uint32_t const * dynamicOffsets;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.groupIndex = groupIndex,
		.group = group,
		.dynamicOffsetCount = dynamicOffsetCount,
		.dynamicOffsets = dynamicOffsets,
	};

	send_device(wgpu_device, 0x1035, (void*) &args);
}

static void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, char const * label) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		char const * label;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.label = label,
	};

	send_device(wgpu_device, 0x1036, (void*) &args);
}

static void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
		WGPUComputePipeline pipeline;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
		.pipeline = pipeline,
	};

	send_device(wgpu_device, 0x1037, (void*) &args);
}

static void wgpuComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
	};

	send_device(wgpu_device, 0x1038, (void*) &args);
}

static void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) {
	struct {
		WGPUComputePassEncoder computePassEncoder;
	} __attribute__((packed)) const args = {
		.computePassEncoder = computePassEncoder,
	};

	send_device(wgpu_device, 0x1039, (void*) &args);
}

static WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) {
	struct {
		WGPUComputePipeline computePipeline;
		uint32_t groupIndex;
	} __attribute__((packed)) const args = {
		.computePipeline = computePipeline,
		.groupIndex = groupIndex,
	};

	return (WGPUBindGroupLayout) send_device(wgpu_device, 0x103a, (void*) &args);
}

static void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, char const * label) {
	struct {
		WGPUComputePipeline computePipeline;
		char const * label;
	} __attribute__((packed)) const args = {
		.computePipeline = computePipeline,
		.label = label,
	};

	send_device(wgpu_device, 0x103b, (void*) &args);
}

static void wgpuComputePipelineReference(WGPUComputePipeline computePipeline) {
	struct {
		WGPUComputePipeline computePipeline;
	} __attribute__((packed)) const args = {
		.computePipeline = computePipeline,
	};

	send_device(wgpu_device, 0x103c, (void*) &args);
}

static void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline) {
	struct {
		WGPUComputePipeline computePipeline;
	} __attribute__((packed)) const args = {
		.computePipeline = computePipeline,
	};

	send_device(wgpu_device, 0x103d, (void*) &args);
}

static WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUBindGroupDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUBindGroup) send_device(wgpu_device, 0x103e, (void*) &args);
}

static WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUBindGroupLayoutDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUBindGroupLayout) send_device(wgpu_device, 0x103f, (void*) &args);
}

static WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUBufferDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUBuffer) send_device(wgpu_device, 0x1040, (void*) &args);
}

static WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPU_NULLABLE WGPUCommandEncoderDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPU_NULLABLE WGPUCommandEncoderDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUCommandEncoder) send_device(wgpu_device, 0x1041, (void*) &args);
}

static WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUComputePipelineDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUComputePipeline) send_device(wgpu_device, 0x1042, (void*) &args);
}

static void wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {
	struct {
		WGPUDevice device;
		WGPUComputePipelineDescriptor const * descriptor;
		WGPUCreateComputePipelineAsyncCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1043, (void*) &args);
}

static WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUPipelineLayoutDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUPipelineLayout) send_device(wgpu_device, 0x1044, (void*) &args);
}

static WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUQuerySetDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUQuerySet) send_device(wgpu_device, 0x1045, (void*) &args);
}

static WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPURenderBundleEncoderDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPURenderBundleEncoder) send_device(wgpu_device, 0x1046, (void*) &args);
}

static WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPURenderPipelineDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPURenderPipeline) send_device(wgpu_device, 0x1047, (void*) &args);
}

static void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {
	struct {
		WGPUDevice device;
		WGPURenderPipelineDescriptor const * descriptor;
		WGPUCreateRenderPipelineAsyncCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1048, (void*) &args);
}

static WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPU_NULLABLE WGPUSamplerDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPU_NULLABLE WGPUSamplerDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUSampler) send_device(wgpu_device, 0x1049, (void*) &args);
}

static WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUShaderModuleDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUShaderModule) send_device(wgpu_device, 0x104a, (void*) &args);
}

static WGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUSurface surface;
		WGPUSwapChainDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.surface = surface,
		.descriptor = descriptor,
	};

	return (WGPUSwapChain) send_device(wgpu_device, 0x104b, (void*) &args);
}

static WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {
	struct {
		WGPUDevice device;
		WGPUTextureDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.device = device,
		.descriptor = descriptor,
	};

	return (WGPUTexture) send_device(wgpu_device, 0x104c, (void*) &args);
}

static void wgpuDeviceDestroy(WGPUDevice device) {
	struct {
		WGPUDevice device;
	} __attribute__((packed)) const args = {
		.device = device,
	};

	send_device(wgpu_device, 0x104d, (void*) &args);
}

static size_t wgpuDeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName * features) {
	struct {
		WGPUDevice device;
		WGPUFeatureName * features;
	} __attribute__((packed)) const args = {
		.device = device,
		.features = features,
	};

	return (size_t) send_device(wgpu_device, 0x104e, (void*) &args);
}

static bool wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) {
	struct {
		WGPUDevice device;
		WGPUSupportedLimits * limits;
	} __attribute__((packed)) const args = {
		.device = device,
		.limits = limits,
	};

	return (bool) send_device(wgpu_device, 0x104f, (void*) &args);
}

static WGPUQueue wgpuDeviceGetQueue(WGPUDevice device) {
	struct {
		WGPUDevice device;
	} __attribute__((packed)) const args = {
		.device = device,
	};

	return (WGPUQueue) send_device(wgpu_device, 0x1050, (void*) &args);
}

static bool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) {
	struct {
		WGPUDevice device;
		WGPUFeatureName feature;
	} __attribute__((packed)) const args = {
		.device = device,
		.feature = feature,
	};

	return (bool) send_device(wgpu_device, 0x1051, (void*) &args);
}

static void wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {
	struct {
		WGPUDevice device;
		WGPUErrorCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.device = device,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1052, (void*) &args);
}

static void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) {
	struct {
		WGPUDevice device;
		WGPUErrorFilter filter;
	} __attribute__((packed)) const args = {
		.device = device,
		.filter = filter,
	};

	send_device(wgpu_device, 0x1053, (void*) &args);
}

static void wgpuDeviceSetLabel(WGPUDevice device, char const * label) {
	struct {
		WGPUDevice device;
		char const * label;
	} __attribute__((packed)) const args = {
		.device = device,
		.label = label,
	};

	send_device(wgpu_device, 0x1054, (void*) &args);
}

static void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {
	struct {
		WGPUDevice device;
		WGPUErrorCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.device = device,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1055, (void*) &args);
}

static void wgpuDeviceReference(WGPUDevice device) {
	struct {
		WGPUDevice device;
	} __attribute__((packed)) const args = {
		.device = device,
	};

	send_device(wgpu_device, 0x1056, (void*) &args);
}

static void wgpuDeviceRelease(WGPUDevice device) {
	struct {
		WGPUDevice device;
	} __attribute__((packed)) const args = {
		.device = device,
	};

	send_device(wgpu_device, 0x1057, (void*) &args);
}

static WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) {
	struct {
		WGPUInstance instance;
		WGPUSurfaceDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.instance = instance,
		.descriptor = descriptor,
	};

	return (WGPUSurface) send_device(wgpu_device, 0x1058, (void*) &args);
}

static void wgpuInstanceProcessEvents(WGPUInstance instance) {
	struct {
		WGPUInstance instance;
	} __attribute__((packed)) const args = {
		.instance = instance,
	};

	send_device(wgpu_device, 0x1059, (void*) &args);
}

static void wgpuInstanceRequestAdapter(WGPUInstance instance, WGPU_NULLABLE WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {
	struct {
		WGPUInstance instance;
		WGPU_NULLABLE WGPURequestAdapterOptions const * options;
		WGPURequestAdapterCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.instance = instance,
		.options = options,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x105a, (void*) &args);
}

static void wgpuInstanceReference(WGPUInstance instance) {
	struct {
		WGPUInstance instance;
	} __attribute__((packed)) const args = {
		.instance = instance,
	};

	send_device(wgpu_device, 0x105b, (void*) &args);
}

static void wgpuInstanceRelease(WGPUInstance instance) {
	struct {
		WGPUInstance instance;
	} __attribute__((packed)) const args = {
		.instance = instance,
	};

	send_device(wgpu_device, 0x105c, (void*) &args);
}

static void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, char const * label) {
	struct {
		WGPUPipelineLayout pipelineLayout;
		char const * label;
	} __attribute__((packed)) const args = {
		.pipelineLayout = pipelineLayout,
		.label = label,
	};

	send_device(wgpu_device, 0x105d, (void*) &args);
}

static void wgpuPipelineLayoutReference(WGPUPipelineLayout pipelineLayout) {
	struct {
		WGPUPipelineLayout pipelineLayout;
	} __attribute__((packed)) const args = {
		.pipelineLayout = pipelineLayout,
	};

	send_device(wgpu_device, 0x105e, (void*) &args);
}

static void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) {
	struct {
		WGPUPipelineLayout pipelineLayout;
	} __attribute__((packed)) const args = {
		.pipelineLayout = pipelineLayout,
	};

	send_device(wgpu_device, 0x105f, (void*) &args);
}

static void wgpuQuerySetDestroy(WGPUQuerySet querySet) {
	struct {
		WGPUQuerySet querySet;
	} __attribute__((packed)) const args = {
		.querySet = querySet,
	};

	send_device(wgpu_device, 0x1060, (void*) &args);
}

static uint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet) {
	struct {
		WGPUQuerySet querySet;
	} __attribute__((packed)) const args = {
		.querySet = querySet,
	};

	return (uint32_t) send_device(wgpu_device, 0x1061, (void*) &args);
}

static WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet) {
	struct {
		WGPUQuerySet querySet;
	} __attribute__((packed)) const args = {
		.querySet = querySet,
	};

	return (WGPUQueryType) send_device(wgpu_device, 0x1062, (void*) &args);
}

static void wgpuQuerySetSetLabel(WGPUQuerySet querySet, char const * label) {
	struct {
		WGPUQuerySet querySet;
		char const * label;
	} __attribute__((packed)) const args = {
		.querySet = querySet,
		.label = label,
	};

	send_device(wgpu_device, 0x1063, (void*) &args);
}

static void wgpuQuerySetReference(WGPUQuerySet querySet) {
	struct {
		WGPUQuerySet querySet;
	} __attribute__((packed)) const args = {
		.querySet = querySet,
	};

	send_device(wgpu_device, 0x1064, (void*) &args);
}

static void wgpuQuerySetRelease(WGPUQuerySet querySet) {
	struct {
		WGPUQuerySet querySet;
	} __attribute__((packed)) const args = {
		.querySet = querySet,
	};

	send_device(wgpu_device, 0x1065, (void*) &args);
}

static void wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void * userdata) {
	struct {
		WGPUQueue queue;
		WGPUQueueWorkDoneCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.queue = queue,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x1066, (void*) &args);
}

static void wgpuQueueSetLabel(WGPUQueue queue, char const * label) {
	struct {
		WGPUQueue queue;
		char const * label;
	} __attribute__((packed)) const args = {
		.queue = queue,
		.label = label,
	};

	send_device(wgpu_device, 0x1067, (void*) &args);
}

static void wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) {
	struct {
		WGPUQueue queue;
		size_t commandCount;
		WGPUCommandBuffer const * commands;
	} __attribute__((packed)) const args = {
		.queue = queue,
		.commandCount = commandCount,
		.commands = commands,
	};

	send_device(wgpu_device, 0x1068, (void*) &args);
}

static void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {
	struct {
		WGPUQueue queue;
		WGPUBuffer buffer;
		uint64_t bufferOffset;
		void const * data;
		size_t size;
	} __attribute__((packed)) const args = {
		.queue = queue,
		.buffer = buffer,
		.bufferOffset = bufferOffset,
		.data = data,
		.size = size,
	};

	send_device(wgpu_device, 0x1069, (void*) &args);
}

static void wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {
	struct {
		WGPUQueue queue;
		WGPUImageCopyTexture const * destination;
		void const * data;
		size_t dataSize;
		WGPUTextureDataLayout const * dataLayout;
		WGPUExtent3D const * writeSize;
	} __attribute__((packed)) const args = {
		.queue = queue,
		.destination = destination,
		.data = data,
		.dataSize = dataSize,
		.dataLayout = dataLayout,
		.writeSize = writeSize,
	};

	send_device(wgpu_device, 0x106a, (void*) &args);
}

static void wgpuQueueReference(WGPUQueue queue) {
	struct {
		WGPUQueue queue;
	} __attribute__((packed)) const args = {
		.queue = queue,
	};

	send_device(wgpu_device, 0x106b, (void*) &args);
}

static void wgpuQueueRelease(WGPUQueue queue) {
	struct {
		WGPUQueue queue;
	} __attribute__((packed)) const args = {
		.queue = queue,
	};

	send_device(wgpu_device, 0x106c, (void*) &args);
}

static void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, char const * label) {
	struct {
		WGPURenderBundle renderBundle;
		char const * label;
	} __attribute__((packed)) const args = {
		.renderBundle = renderBundle,
		.label = label,
	};

	send_device(wgpu_device, 0x106d, (void*) &args);
}

static void wgpuRenderBundleReference(WGPURenderBundle renderBundle) {
	struct {
		WGPURenderBundle renderBundle;
	} __attribute__((packed)) const args = {
		.renderBundle = renderBundle,
	};

	send_device(wgpu_device, 0x106e, (void*) &args);
}

static void wgpuRenderBundleRelease(WGPURenderBundle renderBundle) {
	struct {
		WGPURenderBundle renderBundle;
	} __attribute__((packed)) const args = {
		.renderBundle = renderBundle,
	};

	send_device(wgpu_device, 0x106f, (void*) &args);
}

static void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		uint32_t vertexCount;
		uint32_t instanceCount;
		uint32_t firstVertex;
		uint32_t firstInstance;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.vertexCount = vertexCount,
		.instanceCount = instanceCount,
		.firstVertex = firstVertex,
		.firstInstance = firstInstance,
	};

	send_device(wgpu_device, 0x1070, (void*) &args);
}

static void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		uint32_t indexCount;
		uint32_t instanceCount;
		uint32_t firstIndex;
		int32_t baseVertex;
		uint32_t firstInstance;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.indexCount = indexCount,
		.instanceCount = instanceCount,
		.firstIndex = firstIndex,
		.baseVertex = baseVertex,
		.firstInstance = firstInstance,
	};

	send_device(wgpu_device, 0x1071, (void*) &args);
}

static void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		WGPUBuffer indirectBuffer;
		uint64_t indirectOffset;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.indirectBuffer = indirectBuffer,
		.indirectOffset = indirectOffset,
	};

	send_device(wgpu_device, 0x1072, (void*) &args);
}

static void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		WGPUBuffer indirectBuffer;
		uint64_t indirectOffset;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.indirectBuffer = indirectBuffer,
		.indirectOffset = indirectOffset,
	};

	send_device(wgpu_device, 0x1073, (void*) &args);
}

static WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPU_NULLABLE WGPURenderBundleDescriptor const * descriptor) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		WGPU_NULLABLE WGPURenderBundleDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.descriptor = descriptor,
	};

	return (WGPURenderBundle) send_device(wgpu_device, 0x1074, (void*) &args);
}

static void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		char const * markerLabel;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.markerLabel = markerLabel,
	};

	send_device(wgpu_device, 0x1075, (void*) &args);
}

static void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
	};

	send_device(wgpu_device, 0x1076, (void*) &args);
}

static void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		char const * groupLabel;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.groupLabel = groupLabel,
	};

	send_device(wgpu_device, 0x1077, (void*) &args);
}

static void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		uint32_t groupIndex;
		WGPU_NULLABLE WGPUBindGroup group;
		size_t dynamicOffsetCount;
		uint32_t const * dynamicOffsets;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.groupIndex = groupIndex,
		.group = group,
		.dynamicOffsetCount = dynamicOffsetCount,
		.dynamicOffsets = dynamicOffsets,
	};

	send_device(wgpu_device, 0x1078, (void*) &args);
}

static void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		WGPUBuffer buffer;
		WGPUIndexFormat format;
		uint64_t offset;
		uint64_t size;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.buffer = buffer,
		.format = format,
		.offset = offset,
		.size = size,
	};

	send_device(wgpu_device, 0x1079, (void*) &args);
}

static void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, char const * label) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		char const * label;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.label = label,
	};

	send_device(wgpu_device, 0x107a, (void*) &args);
}

static void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		WGPURenderPipeline pipeline;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.pipeline = pipeline,
	};

	send_device(wgpu_device, 0x107b, (void*) &args);
}

static void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
		uint32_t slot;
		WGPU_NULLABLE WGPUBuffer buffer;
		uint64_t offset;
		uint64_t size;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
		.slot = slot,
		.buffer = buffer,
		.offset = offset,
		.size = size,
	};

	send_device(wgpu_device, 0x107c, (void*) &args);
}

static void wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
	};

	send_device(wgpu_device, 0x107d, (void*) &args);
}

static void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) {
	struct {
		WGPURenderBundleEncoder renderBundleEncoder;
	} __attribute__((packed)) const args = {
		.renderBundleEncoder = renderBundleEncoder,
	};

	send_device(wgpu_device, 0x107e, (void*) &args);
}

static void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t queryIndex;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.queryIndex = queryIndex,
	};

	send_device(wgpu_device, 0x107f, (void*) &args);
}

static void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		WGPUQuerySet querySet;
		uint32_t queryIndex;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.querySet = querySet,
		.queryIndex = queryIndex,
	};

	send_device(wgpu_device, 0x1080, (void*) &args);
}

static void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t vertexCount;
		uint32_t instanceCount;
		uint32_t firstVertex;
		uint32_t firstInstance;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.vertexCount = vertexCount,
		.instanceCount = instanceCount,
		.firstVertex = firstVertex,
		.firstInstance = firstInstance,
	};

	send_device(wgpu_device, 0x1081, (void*) &args);
}

static void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t indexCount;
		uint32_t instanceCount;
		uint32_t firstIndex;
		int32_t baseVertex;
		uint32_t firstInstance;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.indexCount = indexCount,
		.instanceCount = instanceCount,
		.firstIndex = firstIndex,
		.baseVertex = baseVertex,
		.firstInstance = firstInstance,
	};

	send_device(wgpu_device, 0x1082, (void*) &args);
}

static void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		WGPUBuffer indirectBuffer;
		uint64_t indirectOffset;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.indirectBuffer = indirectBuffer,
		.indirectOffset = indirectOffset,
	};

	send_device(wgpu_device, 0x1083, (void*) &args);
}

static void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		WGPUBuffer indirectBuffer;
		uint64_t indirectOffset;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.indirectBuffer = indirectBuffer,
		.indirectOffset = indirectOffset,
	};

	send_device(wgpu_device, 0x1084, (void*) &args);
}

static void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
	};

	send_device(wgpu_device, 0x1085, (void*) &args);
}

static void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
	};

	send_device(wgpu_device, 0x1086, (void*) &args);
}

static void wgpuRenderPassEncoderEndPipelineStatisticsQuery(WGPURenderPassEncoder renderPassEncoder) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
	};

	send_device(wgpu_device, 0x1087, (void*) &args);
}

static void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		size_t bundleCount;
		WGPURenderBundle const * bundles;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.bundleCount = bundleCount,
		.bundles = bundles,
	};

	send_device(wgpu_device, 0x1088, (void*) &args);
}

static void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * markerLabel) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		char const * markerLabel;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.markerLabel = markerLabel,
	};

	send_device(wgpu_device, 0x1089, (void*) &args);
}

static void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
	};

	send_device(wgpu_device, 0x108a, (void*) &args);
}

static void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		char const * groupLabel;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.groupLabel = groupLabel,
	};

	send_device(wgpu_device, 0x108b, (void*) &args);
}

static void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPU_NULLABLE WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t groupIndex;
		WGPU_NULLABLE WGPUBindGroup group;
		size_t dynamicOffsetCount;
		uint32_t const * dynamicOffsets;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.groupIndex = groupIndex,
		.group = group,
		.dynamicOffsetCount = dynamicOffsetCount,
		.dynamicOffsets = dynamicOffsets,
	};

	send_device(wgpu_device, 0x108c, (void*) &args);
}

static void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		WGPUColor const * color;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.color = color,
	};

	send_device(wgpu_device, 0x108d, (void*) &args);
}

static void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		WGPUBuffer buffer;
		WGPUIndexFormat format;
		uint64_t offset;
		uint64_t size;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.buffer = buffer,
		.format = format,
		.offset = offset,
		.size = size,
	};

	send_device(wgpu_device, 0x108e, (void*) &args);
}

static void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, char const * label) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		char const * label;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.label = label,
	};

	send_device(wgpu_device, 0x108f, (void*) &args);
}

static void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		WGPURenderPipeline pipeline;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.pipeline = pipeline,
	};

	send_device(wgpu_device, 0x1090, (void*) &args);
}

static void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t x;
		uint32_t y;
		uint32_t width;
		uint32_t height;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.x = x,
		.y = y,
		.width = width,
		.height = height,
	};

	send_device(wgpu_device, 0x1091, (void*) &args);
}

static void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t reference;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.reference = reference,
	};

	send_device(wgpu_device, 0x1092, (void*) &args);
}

static void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPU_NULLABLE WGPUBuffer buffer, uint64_t offset, uint64_t size) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		uint32_t slot;
		WGPU_NULLABLE WGPUBuffer buffer;
		uint64_t offset;
		uint64_t size;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.slot = slot,
		.buffer = buffer,
		.offset = offset,
		.size = size,
	};

	send_device(wgpu_device, 0x1093, (void*) &args);
}

static void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
		float x;
		float y;
		float width;
		float height;
		float minDepth;
		float maxDepth;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
		.x = x,
		.y = y,
		.width = width,
		.height = height,
		.minDepth = minDepth,
		.maxDepth = maxDepth,
	};

	send_device(wgpu_device, 0x1094, (void*) &args);
}

static void wgpuRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
	};

	send_device(wgpu_device, 0x1095, (void*) &args);
}

static void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) {
	struct {
		WGPURenderPassEncoder renderPassEncoder;
	} __attribute__((packed)) const args = {
		.renderPassEncoder = renderPassEncoder,
	};

	send_device(wgpu_device, 0x1096, (void*) &args);
}

static WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) {
	struct {
		WGPURenderPipeline renderPipeline;
		uint32_t groupIndex;
	} __attribute__((packed)) const args = {
		.renderPipeline = renderPipeline,
		.groupIndex = groupIndex,
	};

	return (WGPUBindGroupLayout) send_device(wgpu_device, 0x1097, (void*) &args);
}

static void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, char const * label) {
	struct {
		WGPURenderPipeline renderPipeline;
		char const * label;
	} __attribute__((packed)) const args = {
		.renderPipeline = renderPipeline,
		.label = label,
	};

	send_device(wgpu_device, 0x1098, (void*) &args);
}

static void wgpuRenderPipelineReference(WGPURenderPipeline renderPipeline) {
	struct {
		WGPURenderPipeline renderPipeline;
	} __attribute__((packed)) const args = {
		.renderPipeline = renderPipeline,
	};

	send_device(wgpu_device, 0x1099, (void*) &args);
}

static void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline) {
	struct {
		WGPURenderPipeline renderPipeline;
	} __attribute__((packed)) const args = {
		.renderPipeline = renderPipeline,
	};

	send_device(wgpu_device, 0x109a, (void*) &args);
}

static void wgpuSamplerSetLabel(WGPUSampler sampler, char const * label) {
	struct {
		WGPUSampler sampler;
		char const * label;
	} __attribute__((packed)) const args = {
		.sampler = sampler,
		.label = label,
	};

	send_device(wgpu_device, 0x109b, (void*) &args);
}

static void wgpuSamplerReference(WGPUSampler sampler) {
	struct {
		WGPUSampler sampler;
	} __attribute__((packed)) const args = {
		.sampler = sampler,
	};

	send_device(wgpu_device, 0x109c, (void*) &args);
}

static void wgpuSamplerRelease(WGPUSampler sampler) {
	struct {
		WGPUSampler sampler;
	} __attribute__((packed)) const args = {
		.sampler = sampler,
	};

	send_device(wgpu_device, 0x109d, (void*) &args);
}

static void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) {
	struct {
		WGPUShaderModule shaderModule;
		WGPUCompilationInfoCallback callback;
		void * userdata;
	} __attribute__((packed)) const args = {
		.shaderModule = shaderModule,
		.callback = callback,
		.userdata = userdata,
	};

	send_device(wgpu_device, 0x109e, (void*) &args);
}

static void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, char const * label) {
	struct {
		WGPUShaderModule shaderModule;
		char const * label;
	} __attribute__((packed)) const args = {
		.shaderModule = shaderModule,
		.label = label,
	};

	send_device(wgpu_device, 0x109f, (void*) &args);
}

static void wgpuShaderModuleReference(WGPUShaderModule shaderModule) {
	struct {
		WGPUShaderModule shaderModule;
	} __attribute__((packed)) const args = {
		.shaderModule = shaderModule,
	};

	send_device(wgpu_device, 0x10a0, (void*) &args);
}

static void wgpuShaderModuleRelease(WGPUShaderModule shaderModule) {
	struct {
		WGPUShaderModule shaderModule;
	} __attribute__((packed)) const args = {
		.shaderModule = shaderModule,
	};

	send_device(wgpu_device, 0x10a1, (void*) &args);
}

static WGPUTextureFormat wgpuSurfaceGetPreferredFormat(WGPUSurface surface, WGPUAdapter adapter) {
	struct {
		WGPUSurface surface;
		WGPUAdapter adapter;
	} __attribute__((packed)) const args = {
		.surface = surface,
		.adapter = adapter,
	};

	return (WGPUTextureFormat) send_device(wgpu_device, 0x10a2, (void*) &args);
}

static void wgpuSurfaceReference(WGPUSurface surface) {
	struct {
		WGPUSurface surface;
	} __attribute__((packed)) const args = {
		.surface = surface,
	};

	send_device(wgpu_device, 0x10a3, (void*) &args);
}

static void wgpuSurfaceRelease(WGPUSurface surface) {
	struct {
		WGPUSurface surface;
	} __attribute__((packed)) const args = {
		.surface = surface,
	};

	send_device(wgpu_device, 0x10a4, (void*) &args);
}

static WGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain swapChain) {
	struct {
		WGPUSwapChain swapChain;
	} __attribute__((packed)) const args = {
		.swapChain = swapChain,
	};

	return (WGPUTextureView) send_device(wgpu_device, 0x10a5, (void*) &args);
}

static void wgpuSwapChainPresent(WGPUSwapChain swapChain) {
	struct {
		WGPUSwapChain swapChain;
	} __attribute__((packed)) const args = {
		.swapChain = swapChain,
	};

	send_device(wgpu_device, 0x10a6, (void*) &args);
}

static void wgpuSwapChainReference(WGPUSwapChain swapChain) {
	struct {
		WGPUSwapChain swapChain;
	} __attribute__((packed)) const args = {
		.swapChain = swapChain,
	};

	send_device(wgpu_device, 0x10a7, (void*) &args);
}

static void wgpuSwapChainRelease(WGPUSwapChain swapChain) {
	struct {
		WGPUSwapChain swapChain;
	} __attribute__((packed)) const args = {
		.swapChain = swapChain,
	};

	send_device(wgpu_device, 0x10a8, (void*) &args);
}

static WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor) {
	struct {
		WGPUTexture texture;
		WGPU_NULLABLE WGPUTextureViewDescriptor const * descriptor;
	} __attribute__((packed)) const args = {
		.texture = texture,
		.descriptor = descriptor,
	};

	return (WGPUTextureView) send_device(wgpu_device, 0x10a9, (void*) &args);
}

static void wgpuTextureDestroy(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	send_device(wgpu_device, 0x10aa, (void*) &args);
}

static uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (uint32_t) send_device(wgpu_device, 0x10ab, (void*) &args);
}

static WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (WGPUTextureDimension) send_device(wgpu_device, 0x10ac, (void*) &args);
}

static WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (WGPUTextureFormat) send_device(wgpu_device, 0x10ad, (void*) &args);
}

static uint32_t wgpuTextureGetHeight(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (uint32_t) send_device(wgpu_device, 0x10ae, (void*) &args);
}

static uint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (uint32_t) send_device(wgpu_device, 0x10af, (void*) &args);
}

static uint32_t wgpuTextureGetSampleCount(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (uint32_t) send_device(wgpu_device, 0x10b0, (void*) &args);
}

static WGPUTextureUsageFlags wgpuTextureGetUsage(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (WGPUTextureUsageFlags) send_device(wgpu_device, 0x10b1, (void*) &args);
}

static uint32_t wgpuTextureGetWidth(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	return (uint32_t) send_device(wgpu_device, 0x10b2, (void*) &args);
}

static void wgpuTextureSetLabel(WGPUTexture texture, char const * label) {
	struct {
		WGPUTexture texture;
		char const * label;
	} __attribute__((packed)) const args = {
		.texture = texture,
		.label = label,
	};

	send_device(wgpu_device, 0x10b3, (void*) &args);
}

static void wgpuTextureReference(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	send_device(wgpu_device, 0x10b4, (void*) &args);
}

static void wgpuTextureRelease(WGPUTexture texture) {
	struct {
		WGPUTexture texture;
	} __attribute__((packed)) const args = {
		.texture = texture,
	};

	send_device(wgpu_device, 0x10b5, (void*) &args);
}

static void wgpuTextureViewSetLabel(WGPUTextureView textureView, char const * label) {
	struct {
		WGPUTextureView textureView;
		char const * label;
	} __attribute__((packed)) const args = {
		.textureView = textureView,
		.label = label,
	};

	send_device(wgpu_device, 0x10b6, (void*) &args);
}

static void wgpuTextureViewReference(WGPUTextureView textureView) {
	struct {
		WGPUTextureView textureView;
	} __attribute__((packed)) const args = {
		.textureView = textureView,
	};

	send_device(wgpu_device, 0x10b7, (void*) &args);
}

static void wgpuTextureViewRelease(WGPUTextureView textureView) {
	struct {
		WGPUTextureView textureView;
	} __attribute__((packed)) const args = {
		.textureView = textureView,
	};

	send_device(wgpu_device, 0x10b8, (void*) &args);
}
