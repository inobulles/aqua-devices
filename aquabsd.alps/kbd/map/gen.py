import requests

KEYSYMDEF_URL = "https://cgit.freedesktop.org/xorg/proto/x11proto/plain/keysymdef.h"

# attempt to open cached version of 'keysymdef.h'
# if it doesn't exist, download and cache it

header = None

try:
	with open("keysymdef.h") as f:
		header = f.read()

except FileNotFoundError:
	with open("keysymdef.h", "w") as f:
		header = requests.get(KEYSYMDEF_URL).text
		f.write(header)

# parse header

src = """
// this file is automatically generated by 'aquabsd.alps/aquabsd.alps.kbd/map/gen.py' from the X11 keysyms spec
// if you need to update this (you probably won't ever), delete 'keysymdef.h' and run 'gen.py'

static inline const char* __map_x11_to_aqua(int key) {
	switch (key) {
"""

has_case = []
current_set = None

for line in header.split('\n'):
	if line.startswith("#ifdef"):
		current_set = line.split()[1]

		src += f"""
	// {current_set}

"""

	elif line.startswith("#define"):
		bits = line.split()

		name = (bits[1][3:]
			.lower()
			.replace('_', '.'))

		unicode = None
		sym = int(bits[2][2:], 16)

		if sym in has_case:
			continue

		if len(bits) >= 5 and bits[4][:2] == "U+":
			*bits, = map(lambda bit: bit
				.replace('-', '_')
				.replace('.', ''), bits)

			unicode = bits[4]
			name = '.'.join(bits[5: -1]).lower()

		if unicode == '-':
			unicode = None

		if unicode is not None:
			char = chr(int(unicode[2:], 16))

		if name == "voidsymbol":
			name = "void"

		has_case.append(sym)
		src += f"""	case {hex(sym)}: return "{name}"; // {current_set}{f" ({unicode}, {char})" if unicode is not None else ""}
"""

# write to output file

src += """
	default: return "void";
	}
}
"""

with open("map.h", "w") as f:
	f.write(src)
